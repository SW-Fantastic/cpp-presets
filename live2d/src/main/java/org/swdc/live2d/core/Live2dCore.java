// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.live2d.core;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;
import org.swdc.live2d.conf.Live2dCoreConfigure;

public class Live2dCore extends Live2dCoreConfigure {
    static { Loader.load(); }

// Parsed from Live2DCubismCore.h

/**
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Proprietary Software license
 * that can be found at https://www.live2d.com/eula/live2d-proprietary-software-license-agreement_en.html.
 */

// #ifndef LIVE2D_CUBISM_CORE_H
// #define LIVE2D_CUBISM_CORE_H

// #if defined(__cplusplus)
// #endif

/* ------- *
 * DEFINES *
 * ------- */

/** Core API attribute. */
// #if !defined(csmApi)
// #define csmApi
// #endif

    /* ----- *
     * TYPES *
     * ----- */

    /** Cubism moc. */
    @Opaque public static class csmMoc extends Pointer {
        /** Empty constructor. Calls {@code super((Pointer)null)}. */
        public csmMoc() { super((Pointer)null); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public csmMoc(Pointer p) { super(p); }
    }

    /** Cubism model. */
    @Opaque public static class csmModel extends Pointer {
        /** Empty constructor. Calls {@code super((Pointer)null)}. */
        public csmModel() { super((Pointer)null); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public csmModel(Pointer p) { super(p); }
    }

    /** Cubism version identifier. */

    /** Alignment constraints. */
    /** enum  */
    public static final int
        /** Necessary alignment for mocs (in bytes). */
        csmAlignofMoc = 64,

        /** Necessary alignment for models (in bytes). */
        csmAlignofModel = 16;

    /** Bit masks for non-dynamic drawable flags. */
    /** enum  */
    public static final int
        /** Additive blend mode mask. */
        csmBlendAdditive = 1 << 0,

        /** Multiplicative blend mode mask. */
        csmBlendMultiplicative = 1 << 1,

        /** Double-sidedness mask. */
        csmIsDoubleSided = 1 << 2,

        /** Clipping mask inversion mode mask. */
        csmIsInvertedMask = 1 << 3;

    /** Bit masks for dynamic drawable flags. */
    /** enum  */
    public static final int
        /** Flag set when visible. */
        csmIsVisible = 1 << 0,
        /** Flag set when visibility did change. */
        csmVisibilityDidChange = 1 << 1,
        /** Flag set when opacity did change. */
        csmOpacityDidChange = 1 << 2,
        /** Flag set when draw order did change. */
        csmDrawOrderDidChange = 1 << 3,
        /** Flag set when render order did change. */
        csmRenderOrderDidChange = 1 << 4,
        /** Flag set when vertex positions did change. */
        csmVertexPositionsDidChange = 1 << 5,
        /** Flag set when blend color did change. */
        csmBlendColorDidChange = 1 << 6;

    /** Bitfield. */

    /** moc3 file format version. */
    /** enum  */
    public static final int
        /** unknown */
        csmMocVersion_Unknown = 0,
        /** moc3 file version 3.0.00 - 3.2.07 */
        csmMocVersion_30 = 1,
        /** moc3 file version 3.3.00 - 3.3.03 */
        csmMocVersion_33 = 2,
        /** moc3 file version 4.0.00 - 4.1.05 */
        csmMocVersion_40 = 3,
        /** moc3 file version 4.2.00 - 4.2.04 */
        csmMocVersion_42 = 4,
        /** moc3 file version 5.0.00 - */
        csmMocVersion_50 = 5;

    /** moc3 version identifier. */

    /** Parameter types. */
    /** enum  */
    public static final int
        /** Normal parameter. */
        csmParameterType_Normal = 0,

        /** Parameter for blend shape. */
        csmParameterType_BlendShape = 1;

    /** Parameter type. */

    /** 2 component vector. */
    public static class csmVector2 extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public csmVector2() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public csmVector2(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public csmVector2(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public csmVector2 position(long position) {
            return (csmVector2)super.position(position);
        }
        @Override public csmVector2 getPointer(long i) {
            return new csmVector2((Pointer)this).offsetAddress(i);
        }
    
        /** First component. */
        public native float X(); public native csmVector2 X(float setter);

        /** Second component. */
        public native float Y(); public native csmVector2 Y(float setter);
    }

    /** 4 component vector. */
    public static class csmVector4 extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public csmVector4() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public csmVector4(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public csmVector4(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public csmVector4 position(long position) {
            return (csmVector4)super.position(position);
        }
        @Override public csmVector4 getPointer(long i) {
            return new csmVector4((Pointer)this).offsetAddress(i);
        }
    
        /** 1st component. */
        public native float X(); public native csmVector4 X(float setter);

        /** 2nd component. */
        public native float Y(); public native csmVector4 Y(float setter);

        /** 3rd component. */
        public native float Z(); public native csmVector4 Z(float setter);

        /** 4th component. */
        public native float W(); public native csmVector4 W(float setter);
    }

    /** Log handler.
     *
     * @param  message  Null-terminated string message to log.
     */
    public static class csmLogFunction extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    csmLogFunction(Pointer p) { super(p); }
        protected csmLogFunction() { allocate(); }
        private native void allocate();
        public native void call(@Cast("const char*") BytePointer message);
    }

// #if CSM_CORE_WIN32_DLL
// #define csmCallingConvention __stdcall
// #else
// #define csmCallingConvention
// #endif

    /* ------- *
     * VERSION *
     * ------- */

    /**
     * Queries Core version.
     *
     * @return  Core version.
     */
    public static native @Cast("csmVersion") int csmGetVersion();

    /**
     * Gets Moc file supported latest version.
     *
     * @return csmMocVersion (Moc file latest format version).
     */
    public static native @Cast("csmMocVersion") int csmGetLatestMocVersion();

    /**
     * Gets Moc file format version.
     *
     * @param  address  Address of moc.
     * @param  size     Size of moc (in bytes).
     *
     * @return csmMocVersion
     */
    public static native @Cast("csmMocVersion") int csmGetMocVersion(@Const Pointer _address, @Cast("const unsigned int") int size);

    /* ----------- *
     * CONSISTENCY *
     * ----------- */

    /**
     * Checks consistency of a moc.
     *
     * @param  address  Address of unrevived moc. The address must be aligned to 'csmAlignofMoc'.
     * @param  size     Size of moc (in bytes).
     *
     * @return  '1' if Moc is valid; '0' otherwise.
     */
    public static native int csmHasMocConsistency(Pointer _address, @Cast("const unsigned int") int size);

    /* ------- *
     * LOGGING *
     * ------- */

    /**
     * Queries log handler.
     *
     * @return  Log handler.
     */
    public static native csmLogFunction csmGetLogFunction();

    /**
     * Sets log handler.
     *
     * @param  handler  Handler to use.
     */
    public static native void csmSetLogFunction(csmLogFunction handler);

    /* --- *
     * MOC *
     * --- */

    /**
     * Tries to revive a moc from bytes in place.
     *
     * @param  address  Address of unrevived moc. The address must be aligned to 'csmAlignofMoc'.
     * @param  size     Size of moc (in bytes).
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native csmMoc csmReviveMocInPlace(Pointer _address, @Cast("const unsigned int") int size);

    /* ----- *
     * MODEL *
     * ----- */

    /**
     * Queries size of a model in bytes.
     *
     * @param  moc  Moc to query.
     *
     * @return  Valid size on success; '0' otherwise.
     */
    public static native @Cast("unsigned int") int csmGetSizeofModel(@Const csmMoc moc);

    /**
     * Tries to instantiate a model in place.
     *
     * @param  moc      Source moc.
     * @param  address  Address to place instance at. Address must be aligned to 'csmAlignofModel'.
     * @param  size     Size of memory block for instance (in bytes).
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native csmModel csmInitializeModelInPlace(@Const csmMoc moc,
                                                                        Pointer _address,
                                                                        @Cast("const unsigned int") int size);

    /**
     * Updates a model.
     *
     * @param  model  Model to update.
     */
    public static native void csmUpdateModel(csmModel model);

    /* ------ *
     * CANVAS *
     * ------ */

    /**
     * Reads info on a model canvas.
     *
     * @param  model              Model query.
     *
     * @param  outSizeInPixels    Canvas dimensions.
     * @param  outOriginInPixels  Origin of model on canvas.
     * @param  outPixelsPerUnit   Aspect used for scaling pixels to units.
     */
    public static native void csmReadCanvasInfo(@Const csmModel model,
                                                           csmVector2 outSizeInPixels,
                                                           csmVector2 outOriginInPixels,
                                                           FloatPointer outPixelsPerUnit);
    public static native void csmReadCanvasInfo(@Const csmModel model,
                                                           csmVector2 outSizeInPixels,
                                                           csmVector2 outOriginInPixels,
                                                           FloatBuffer outPixelsPerUnit);
    public static native void csmReadCanvasInfo(@Const csmModel model,
                                                           csmVector2 outSizeInPixels,
                                                           csmVector2 outOriginInPixels,
                                                           float[] outPixelsPerUnit);

    /* ---------- *
     * PARAMETERS *
     * ---------- */

    /**
     * Gets number of parameters.
     *
     * @param model [in]  Model to query.
     *
     * @return  Valid count on success; '-1' otherwise.
     */
    public static native int csmGetParameterCount(@Const csmModel model);

    /**
     * Gets parameter IDs.
     * All IDs are null-terminated ANSI strings.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Cast("const char**") PointerPointer csmGetParameterIds(@Const csmModel model);


    /**
     * Gets parameter types.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Cast("const csmParameterType*") IntPointer csmGetParameterTypes(@Const csmModel model);

    /**
     * Gets minimum parameter values.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const FloatPointer csmGetParameterMinimumValues(@Const csmModel model);

    /**
     * Gets maximum parameter values.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const FloatPointer csmGetParameterMaximumValues(@Const csmModel model);

    /**
     * Gets default parameter values.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const FloatPointer csmGetParameterDefaultValues(@Const csmModel model);

    /**
     * Gets read/write parameter values buffer.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native FloatPointer csmGetParameterValues(csmModel model);

    /**
     * Gets number of key values of each parameter.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const IntPointer csmGetParameterKeyCounts(@Const csmModel model);

    /**
     * Gets key values of each parameter.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Cast("const float**") PointerPointer csmGetParameterKeyValues(@Const csmModel model);


    /* ----- *
     * PARTS *
     * ----- */

    /**
     * Gets number of parts.
     *
     * @param  model  Model to query.
     *
     * @return  Valid count on success; '-1' otherwise.
     */
    public static native int csmGetPartCount(@Const csmModel model);

    /**
     * Gets parts IDs.
     * All IDs are null-terminated ANSI strings.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Cast("const char**") PointerPointer csmGetPartIds(@Const csmModel model);

    /**
     * Gets read/write part opacities buffer.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native FloatPointer csmGetPartOpacities(csmModel model);

    /**
     * Gets part's parent part indices.
     *
     * @param   model   Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const IntPointer csmGetPartParentPartIndices(@Const csmModel model);

    /* --------- *
     * DRAWABLES *
     * --------- */

    /**
     * Gets number of drawables.
     *
     * @param  model  Model to query.
     *
     * @return  Valid count on success; '-1' otherwise.
     */
    public static native int csmGetDrawableCount(@Const csmModel model);

    /**
     * Gets drawable IDs.
     * All IDs are null-terminated ANSI strings.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Cast("const char**") PointerPointer csmGetDrawableIds(@Const csmModel model);

    /**
     * Gets constant drawable flags.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Cast("const csmFlags*") BytePointer csmGetDrawableConstantFlags(@Const csmModel model);

    /**
     * Gets dynamic drawable flags.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Cast("const csmFlags*") BytePointer csmGetDrawableDynamicFlags(@Const csmModel model);

    /**
     * Gets drawable texture indices.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const IntPointer csmGetDrawableTextureIndices(@Const csmModel model);

    /**
     * Gets drawable draw orders.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const IntPointer csmGetDrawableDrawOrders(@Const csmModel model);

    /**
     * Gets drawable render orders.
     * The higher the order, the more up front a drawable is.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0'otherwise.
     */
    public static native @Const IntPointer csmGetDrawableRenderOrders(@Const csmModel model);

    /**
     * Gets drawable opacities.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const FloatPointer csmGetDrawableOpacities(@Const csmModel model);

    /**
     * Gets numbers of masks of each drawable.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const IntPointer csmGetDrawableMaskCounts(@Const csmModel model);

    /**
     * Gets mask indices of each drawable.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Cast("const int**") PointerPointer csmGetDrawableMasks(@Const csmModel model);

    /**
     * Gets number of vertices of each drawable.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const IntPointer csmGetDrawableVertexCounts(@Const csmModel model);

    /**
     * Gets vertex position data of each drawable.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; a null pointer otherwise.
     */
    public static native @Cast("const csmVector2**") PointerPointer csmGetDrawableVertexPositions(@Const csmModel model);

    /**
     * Gets texture coordinate data of each drawables.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Cast("const csmVector2**") PointerPointer csmGetDrawableVertexUvs(@Const csmModel model);

    /**
     * Gets number of triangle indices for each drawable.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const IntPointer csmGetDrawableIndexCounts(@Const csmModel model);

    /**
     * Gets triangle index data for each drawable.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Cast("const unsigned short**") PointerPointer csmGetDrawableIndices(@Const csmModel model);

    /**
     * Gets multiply color data for each drawable.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const csmVector4 csmGetDrawableMultiplyColors(@Const csmModel model);

    /**
     * Gets screen color data for each drawable.
     *
     * @param  model  Model to query.
     *
     * @return  Valid pointer on success; '0' otherwise.
     */
    public static native @Const csmVector4 csmGetDrawableScreenColors(@Const csmModel model);

    /**
    * Gets drawable's parent part indices.
    *
    * @param   model   Model to query.
    *
    * @return  Valid pointer on success; '0' otherwise.
    */
    public static native @Const IntPointer csmGetDrawableParentPartIndices(@Const csmModel model);

    /**
     * Resets all dynamic drawable flags.
     *
     * @param  model  Model containing flags.
     */
    public static native void csmResetDrawableDynamicFlags(csmModel model);

// #if defined(__cplusplus)
// #endif

// #endif


// Parsed from csmBasicType.h

/**
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

// #pragma once

/**
 * \brief CubismFrameworkで用いる基本型の定義
 *
 */

// #include <cstddef>

/** 真偽値型 */
/** 文字型 */
/** 符号なし文字型 */

/** バイト型 */
/** 符号付き文字型 */
/** 8ビット符号なし整数型 */

/** 16ビット符号付き整数型 */
/** 16ビット符号なし整数型 */

/** 32ビット符号付き整数型 */
/** 32ビット符号なし整数型 */

/** 64ビット符号付き整数型 */
/** 64ビット符号なし整数型 */

/** 32ビット浮動小数点数型 */

/** size_t型 */

// #ifdef _MSC_VER
// #else
// #endif


// Parsed from csmAllocator.h

// #ifndef CSM_ALLOCATOR_H
// #define CSM_ALLOCATOR_H

// #include "csmBasicType.h"
// #include "../include/Live2DCubismCore.h"

public static native Pointer csmAllocateAligned(@Cast("const csmSizeType") long size, @Cast("const csmUint32") int alignment);

public static native void csmDeallocateAligned(Pointer alignedMemory);



public static native csmMoc csmAllocMoc(@Cast("csmByte*") BytePointer mocBytes, @Cast("csmSizeType") long size,@Cast("csmBool") boolean shouldCheckMocConsistency);
public static native csmMoc csmAllocMoc(@Cast("csmByte*") ByteBuffer mocBytes, @Cast("csmSizeType") long size,@Cast("csmBool") boolean shouldCheckMocConsistency);
public static native csmMoc csmAllocMoc(@Cast("csmByte*") byte[] mocBytes, @Cast("csmSizeType") long size,@Cast("csmBool") boolean shouldCheckMocConsistency);

public static native csmModel csmAllocModel(csmMoc moc);



// #endif

}
