// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.llama.core;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.llama.core.ggml.*;
import static org.swdc.llama.core.ggml.GGML.*;

import static org.swdc.llama.core.LLamaCore.*;


    // An updateable view of the KV cache.
    @Properties(inherit = org.swdc.llama.config.LLamaConfigure.class)
public class llama_kv_cache_view extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public llama_kv_cache_view() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public llama_kv_cache_view(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public llama_kv_cache_view(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public llama_kv_cache_view position(long position) {
            return (llama_kv_cache_view)super.position(position);
        }
        @Override public llama_kv_cache_view getPointer(long i) {
            return new llama_kv_cache_view((Pointer)this).offsetAddress(i);
        }
    
        // Number of KV cache cells. This will be the same as the context size.
        public native int n_cells(); public native llama_kv_cache_view n_cells(int setter);

        // Maximum number of sequences that can exist in a cell. It's not an error
        // if there are more sequences in a cell than this value, however they will
        // not be visible in the view cells_sequences.
        public native int n_seq_max(); public native llama_kv_cache_view n_seq_max(int setter);

        // Number of tokens in the cache. For example, if there are two populated
        // cells, the first with 1 sequence id in it and the second with 2 sequence
        // ids then you'll have 3 tokens.
        public native int token_count(); public native llama_kv_cache_view token_count(int setter);

        // Number of populated cache cells.
        public native int used_cells(); public native llama_kv_cache_view used_cells(int setter);

        // Maximum contiguous empty slots in the cache.
        public native int max_contiguous(); public native llama_kv_cache_view max_contiguous(int setter);

        // Index to the start of the max_contiguous slot range. Can be negative
        // when cache is full.
        public native int max_contiguous_idx(); public native llama_kv_cache_view max_contiguous_idx(int setter);

        // Information for an individual cell.
        public native llama_kv_cache_view_cell cells(); public native llama_kv_cache_view cells(llama_kv_cache_view_cell setter);

        // The sequences for each cell. There will be n_seq_max items per cell.
        public native @Cast("llama_seq_id*") IntPointer cells_sequences(); public native llama_kv_cache_view cells_sequences(IntPointer setter);
    }
