// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.llama.core.ggml;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.llama.core.ggml.GGML.*;


    // threadpool params
    // Use ggml_threadpool_params_default() or ggml_threadpool_params_init() to populate the defaults
    @Properties(inherit = org.swdc.llama.config.GGMLConfigure.class)
public class ggml_threadpool_params extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public ggml_threadpool_params() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public ggml_threadpool_params(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public ggml_threadpool_params(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public ggml_threadpool_params position(long position) {
            return (ggml_threadpool_params)super.position(position);
        }
        @Override public ggml_threadpool_params getPointer(long i) {
            return new ggml_threadpool_params((Pointer)this).offsetAddress(i);
        }
    
        public native @Cast("bool") boolean cpumask(int i); public native ggml_threadpool_params cpumask(int i, boolean setter);
        @MemberGetter public native @Cast("bool*") BoolPointer cpumask(); // mask of cpu cores (all-zeros means use default affinity settings)
        public native int n_threads(); public native ggml_threadpool_params n_threads(int setter);                   // number of threads
        public native @Cast("ggml_sched_priority") int prio(); public native ggml_threadpool_params prio(int setter);                   // thread priority
        public native @Cast("uint32_t") int poll(); public native ggml_threadpool_params poll(int setter);                        // polling level (0 - no polling, 100 - aggressive polling)
        public native @Cast("bool") boolean strict_cpu(); public native ggml_threadpool_params strict_cpu(boolean setter);                  // strict cpu placement
        public native @Cast("bool") boolean paused(); public native ggml_threadpool_params paused(boolean setter);                      // start in paused state
    }
