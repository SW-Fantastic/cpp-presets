// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.llama.core;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.llama.core.ggml.*;
import static org.swdc.llama.core.ggml.GGML.*;

import static org.swdc.llama.core.LLamaCore.*;


    // user code can implement the interface below in order to create custom llama_sampler
    @Properties(inherit = org.swdc.llama.config.LLamaConfigure.class)
public class llama_sampler_i extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public llama_sampler_i() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public llama_sampler_i(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public llama_sampler_i(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public llama_sampler_i position(long position) {
            return (llama_sampler_i)super.position(position);
        }
        @Override public llama_sampler_i getPointer(long i) {
            return new llama_sampler_i((Pointer)this).offsetAddress(i);
        }
    
        public static class Name_llama_sampler extends FunctionPointer {
            static { Loader.load(); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public    Name_llama_sampler(Pointer p) { super(p); }
            protected Name_llama_sampler() { allocate(); }
            private native void allocate();
            public native @Cast("const char*") BytePointer call(@Const llama_sampler smpl);
        }
        public native Name_llama_sampler name(); public native llama_sampler_i name(Name_llama_sampler setter);                                 // can be NULL
        public static class Accept_llama_sampler_int extends FunctionPointer {
            static { Loader.load(); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public    Accept_llama_sampler_int(Pointer p) { super(p); }
            protected Accept_llama_sampler_int() { allocate(); }
            private native void allocate();
            public native void call(      llama_sampler smpl, @Cast("llama_token") int token);
        }
        public native Accept_llama_sampler_int accept(); public native llama_sampler_i accept(Accept_llama_sampler_int setter);              // can be NULL
        public static class Apply_llama_sampler_llama_token_data_array extends FunctionPointer {
            static { Loader.load(); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public    Apply_llama_sampler_llama_token_data_array(Pointer p) { super(p); }
            protected Apply_llama_sampler_llama_token_data_array() { allocate(); }
            private native void allocate();
            public native void call(      llama_sampler smpl, llama_token_data_array cur_p);
        }
        public native Apply_llama_sampler_llama_token_data_array apply(); public native llama_sampler_i apply(Apply_llama_sampler_llama_token_data_array setter); // required
        public static class Reset_llama_sampler extends FunctionPointer {
            static { Loader.load(); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public    Reset_llama_sampler(Pointer p) { super(p); }
            protected Reset_llama_sampler() { allocate(); }
            private native void allocate();
            public native void call(      llama_sampler smpl);
        }
        public native Reset_llama_sampler reset(); public native llama_sampler_i reset(Reset_llama_sampler setter);                                 // can be NULL
        public static class Clone_llama_sampler extends FunctionPointer {
            static { Loader.load(); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public    Clone_llama_sampler(Pointer p) { super(p); }
            protected Clone_llama_sampler() { allocate(); }
            private native void allocate();
            public native llama_sampler call(@Const llama_sampler smpl);
        }
        public native Clone_llama_sampler clone(); public native llama_sampler_i clone(Clone_llama_sampler setter);                                 // can be NULL if ctx is NULL
        public static class Free_llama_sampler extends FunctionPointer {
            static { Loader.load(); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public    Free_llama_sampler(Pointer p) { super(p); }
            protected Free_llama_sampler() { allocate(); }
            private native void allocate();
            public native void call(      llama_sampler smpl);
        }
        public native @Name("free") Free_llama_sampler _free(); public native llama_sampler_i _free(Free_llama_sampler setter);                                 // can be NULL if ctx is NULL

        // TODO: API for internal libllama usage for appending the sampling to an existing ggml_cgraph
        //void (*apply_ggml) (struct llama_sampler * smpl, ...);
    }
