// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.llama.core.ggml;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.llama.core.ggml.GGML.*;


    @Properties(inherit = org.swdc.llama.config.GGMLConfigure.class)
public class ggml_init_params extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public ggml_init_params() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public ggml_init_params(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public ggml_init_params(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public ggml_init_params position(long position) {
            return (ggml_init_params)super.position(position);
        }
        @Override public ggml_init_params getPointer(long i) {
            return new ggml_init_params((Pointer)this).offsetAddress(i);
        }
    
        // memory pool
        public native @Cast("size_t") long mem_size(); public native ggml_init_params mem_size(long setter);   // bytes
        public native Pointer mem_buffer(); public native ggml_init_params mem_buffer(Pointer setter); // if NULL, memory will be allocated internally
        public native @Cast("bool") boolean no_alloc(); public native ggml_init_params no_alloc(boolean setter);   // don't allocate memory for the tensor data
    }
