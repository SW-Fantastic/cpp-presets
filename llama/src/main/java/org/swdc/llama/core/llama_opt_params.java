// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.llama.core;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.llama.core.ggml.*;
import static org.swdc.llama.core.ggml.GGML.*;

import static org.swdc.llama.core.LLamaCore.*;


    @Properties(inherit = org.swdc.llama.config.LLamaConfigure.class)
public class llama_opt_params extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public llama_opt_params() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public llama_opt_params(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public llama_opt_params(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public llama_opt_params position(long position) {
            return (llama_opt_params)super.position(position);
        }
        @Override public llama_opt_params getPointer(long i) {
            return new llama_opt_params((Pointer)this).offsetAddress(i);
        }
    
        public native @Cast("uint32_t") int n_ctx_train(); public native llama_opt_params n_ctx_train(int setter); // assumed context size post training, use context size specified in llama_context if 0

        public native llama_opt_param_filter param_filter(); public native llama_opt_params param_filter(llama_opt_param_filter setter); // callback for determining which tensors contain trainable parameters
        public native Pointer param_filter_ud(); public native llama_opt_params param_filter_ud(Pointer setter);              // userdata for determining which tensors contain trainable parameters // callback for calculating optimizer parameters
        public native Pointer get_opt_pars_ud(); public native llama_opt_params get_opt_pars_ud(Pointer setter);                     // userdata for calculating optimizer parameters
    }
