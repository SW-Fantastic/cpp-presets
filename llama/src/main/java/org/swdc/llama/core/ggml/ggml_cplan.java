// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.llama.core.ggml;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.llama.core.ggml.GGML.*;

// #endif

    // the compute plan that needs to be prepared for ggml_graph_compute()
    // since https://github.com/ggml-org/ggml/issues/287
    @Properties(inherit = org.swdc.llama.config.GGMLConfigure.class)
public class ggml_cplan extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public ggml_cplan() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public ggml_cplan(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public ggml_cplan(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public ggml_cplan position(long position) {
            return (ggml_cplan)super.position(position);
        }
        @Override public ggml_cplan getPointer(long i) {
            return new ggml_cplan((Pointer)this).offsetAddress(i);
        }
    
        public native @Cast("size_t") long work_size(); public native ggml_cplan work_size(long setter); // size of work buffer, calculated by `ggml_graph_plan()`
        public native @Cast("uint8_t*") BytePointer work_data(); public native ggml_cplan work_data(BytePointer setter); // work buffer, to be allocated by caller before calling to `ggml_graph_compute()`

        public native int n_threads(); public native ggml_cplan n_threads(int setter);
        public native ggml_threadpool threadpool(); public native ggml_cplan threadpool(ggml_threadpool setter);

        // abort ggml_graph_compute when true
        public native ggml_abort_callback abort_callback(); public native ggml_cplan abort_callback(ggml_abort_callback setter);
        public native Pointer abort_callback_data(); public native ggml_cplan abort_callback_data(Pointer setter);
    }
