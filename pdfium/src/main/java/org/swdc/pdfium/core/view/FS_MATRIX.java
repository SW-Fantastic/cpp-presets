// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.pdfium.core.view;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.pdfium.core.PdfiumView.*;


// Matrix for transformation, in the form [a b c d e f], equivalent to:
// | a  b  0 |
// | c  d  0 |
// | e  f  1 |
//
// Translation is performed with [1 0 0 1 tx ty].
// Scaling is performed with [sx 0 0 sy 0 0].
// See PDF Reference 1.7, 4.2.2 Common Transformations for more.
@Properties(inherit = org.swdc.pdfium.core.PdfiumViewConfigure.class)
public class FS_MATRIX extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FS_MATRIX() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FS_MATRIX(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FS_MATRIX(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FS_MATRIX position(long position) {
        return (FS_MATRIX)super.position(position);
    }
    @Override public FS_MATRIX getPointer(long i) {
        return new FS_MATRIX((Pointer)this).offsetAddress(i);
    }

  public native float a(); public native FS_MATRIX a(float setter);
  public native float b(); public native FS_MATRIX b(float setter);
  public native float c(); public native FS_MATRIX c(float setter);
  public native float d(); public native FS_MATRIX d(float setter);
  public native float e(); public native FS_MATRIX e(float setter);
  public native float f(); public native FS_MATRIX f(float setter);
}
