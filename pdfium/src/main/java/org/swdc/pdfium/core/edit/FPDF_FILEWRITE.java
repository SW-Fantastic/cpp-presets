// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.pdfium.core.edit;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.pdfium.core.view.*;
import static org.swdc.pdfium.core.PdfiumView.*;

import static org.swdc.pdfium.core.PdfiumEdit.*;

// #endif

// Structure for custom file write
@Properties(inherit = org.swdc.pdfium.conf.PdfiumEditConfigure.class)
public class FPDF_FILEWRITE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FPDF_FILEWRITE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FPDF_FILEWRITE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FPDF_FILEWRITE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FPDF_FILEWRITE position(long position) {
        return (FPDF_FILEWRITE)super.position(position);
    }
    @Override public FPDF_FILEWRITE getPointer(long i) {
        return new FPDF_FILEWRITE((Pointer)this).offsetAddress(i);
    }

  //
  // Version number of the interface. Currently must be 1.
  //
  public native int version(); public native FPDF_FILEWRITE version(int setter);

  // Method: WriteBlock
  //          Output a block of data in your custom way.
  // Interface Version:
  //          1
  // Implementation Required:
  //          Yes
  // Comments:
  //          Called by function FPDF_SaveDocument
  // Parameters:
  //          pThis       -   Pointer to the structure itself
  //          pData       -   Pointer to a buffer to output
  //          size        -   The size of the buffer.
  // Return value:
  //          Should be non-zero if successful, zero for error.
  public static class WriteBlock_FPDF_FILEWRITE_Pointer_long extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    WriteBlock_FPDF_FILEWRITE_Pointer_long(Pointer p) { super(p); }
      protected WriteBlock_FPDF_FILEWRITE_Pointer_long() { allocate(); }
      private native void allocate();
      public native int call(FPDF_FILEWRITE pThis,
                      @Const Pointer pData,
                      @Cast("unsigned long") long size);
  }
  public native WriteBlock_FPDF_FILEWRITE_Pointer_long WriteBlock(); public native FPDF_FILEWRITE WriteBlock(WriteBlock_FPDF_FILEWRITE_Pointer_long setter);
}
