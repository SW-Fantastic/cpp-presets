// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.pdfium.core.view;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.pdfium.core.PdfiumView.*;


// Structure for custom file access.
@Properties(inherit = org.swdc.pdfium.core.PdfiumViewConfigure.class)
public class FPDF_FILEACCESS extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FPDF_FILEACCESS() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FPDF_FILEACCESS(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FPDF_FILEACCESS(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FPDF_FILEACCESS position(long position) {
        return (FPDF_FILEACCESS)super.position(position);
    }
    @Override public FPDF_FILEACCESS getPointer(long i) {
        return new FPDF_FILEACCESS((Pointer)this).offsetAddress(i);
    }

  // File length, in bytes.
  public native @Cast("unsigned long") long m_FileLen(); public native FPDF_FILEACCESS m_FileLen(long setter);

  // A function pointer for getting a block of data from a specific position.
  // Position is specified by byte offset from the beginning of the file.
  // The pointer to the buffer is never NULL and the size is never 0.
  // The position and size will never go out of range of the file length.
  // It may be possible for PDFium to call this function multiple times for
  // the same position.
  // Return value: should be non-zero if successful, zero for error.
  public static class M_GetBlock_Pointer_long_BytePointer_long extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    M_GetBlock_Pointer_long_BytePointer_long(Pointer p) { super(p); }
      protected M_GetBlock_Pointer_long_BytePointer_long() { allocate(); }
      private native void allocate();
      public native int call(Pointer param,
                      @Cast("unsigned long") long _position,
                      @Cast("unsigned char*") BytePointer pBuf,
                      @Cast("unsigned long") long size);
  }
  public native M_GetBlock_Pointer_long_BytePointer_long m_GetBlock(); public native FPDF_FILEACCESS m_GetBlock(M_GetBlock_Pointer_long_BytePointer_long setter);

  // A custom pointer for all implementation specific data.  This pointer will
  // be used as the first parameter to the m_GetBlock callback.
  public native Pointer m_Param(); public native FPDF_FILEACCESS m_Param(Pointer setter);
}
