// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.pdfium.core.view;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.pdfium.core.PdfiumView.*;


/*
 * Structure for file reading or writing (I/O).
 *
 * Note: This is a handler and should be implemented by callers,
 * and is only used from XFA.
 */
@Properties(inherit = org.swdc.pdfium.core.PdfiumViewConfigure.class)
public class FPDF_FILEHANDLER extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FPDF_FILEHANDLER() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FPDF_FILEHANDLER(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FPDF_FILEHANDLER(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FPDF_FILEHANDLER position(long position) {
        return (FPDF_FILEHANDLER)super.position(position);
    }
    @Override public FPDF_FILEHANDLER getPointer(long i) {
        return new FPDF_FILEHANDLER((Pointer)this).offsetAddress(i);
    }

  /*
   * User-defined data.
   * Note: Callers can use this field to track controls.
   */
  public native Pointer clientData(); public native FPDF_FILEHANDLER clientData(Pointer setter);

  /*
   * Callback function to release the current file stream object.
   *
   * Parameters:
   *       clientData   -  Pointer to user-defined data.
   * Returns:
   *       None.
   */
  public static class Release_Pointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Release_Pointer(Pointer p) { super(p); }
      protected Release_Pointer() { allocate(); }
      private native void allocate();
      public native void call(Pointer clientData);
  }
  public native Release_Pointer Release(); public native FPDF_FILEHANDLER Release(Release_Pointer setter);

  /*
   * Callback function to retrieve the current file stream size.
   *
   * Parameters:
   *       clientData   -  Pointer to user-defined data.
   * Returns:
   *       Size of file stream.
   */
  public static class GetSize_Pointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    GetSize_Pointer(Pointer p) { super(p); }
      protected GetSize_Pointer() { allocate(); }
      private native void allocate();
      public native @Cast("FPDF_DWORD") long call(Pointer clientData);
  }
  public native GetSize_Pointer GetSize(); public native FPDF_FILEHANDLER GetSize(GetSize_Pointer setter);

  /*
   * Callback function to read data from the current file stream.
   *
   * Parameters:
   *       clientData   -  Pointer to user-defined data.
   *       offset       -  Offset position starts from the beginning of file
   *                       stream. This parameter indicates reading position.
   *       buffer       -  Memory buffer to store data which are read from
   *                       file stream. This parameter should not be NULL.
   *       size         -  Size of data which should be read from file stream,
   *                       in bytes. The buffer indicated by |buffer| must be
   *                       large enough to store specified data.
   * Returns:
   *       0 for success, other value for failure.
   */
  public static class ReadBlock_Pointer_long_Pointer_long extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    ReadBlock_Pointer_long_Pointer_long(Pointer p) { super(p); }
      protected ReadBlock_Pointer_long_Pointer_long() { allocate(); }
      private native void allocate();
      public native @Cast("FPDF_RESULT") int call(Pointer clientData,
                             @Cast("FPDF_DWORD") long offset,
                             Pointer buffer,
                             @Cast("FPDF_DWORD") long size);
  }
  public native ReadBlock_Pointer_long_Pointer_long ReadBlock(); public native FPDF_FILEHANDLER ReadBlock(ReadBlock_Pointer_long_Pointer_long setter);

  /*
   * Callback function to write data into the current file stream.
   *
   * Parameters:
   *       clientData   -  Pointer to user-defined data.
   *       offset       -  Offset position starts from the beginning of file
   *                       stream. This parameter indicates writing position.
   *       buffer       -  Memory buffer contains data which is written into
   *                       file stream. This parameter should not be NULL.
   *       size         -  Size of data which should be written into file
   *                       stream, in bytes.
   * Returns:
   *       0 for success, other value for failure.
   */
  public static class WriteBlock_Pointer_long_Pointer_long extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    WriteBlock_Pointer_long_Pointer_long(Pointer p) { super(p); }
      protected WriteBlock_Pointer_long_Pointer_long() { allocate(); }
      private native void allocate();
      public native @Cast("FPDF_RESULT") int call(Pointer clientData,
                              @Cast("FPDF_DWORD") long offset,
                              @Const Pointer buffer,
                              @Cast("FPDF_DWORD") long size);
  }
  public native WriteBlock_Pointer_long_Pointer_long WriteBlock(); public native FPDF_FILEHANDLER WriteBlock(WriteBlock_Pointer_long_Pointer_long setter);
  /*
   * Callback function to flush all internal accessing buffers.
   *
   * Parameters:
   *       clientData   -  Pointer to user-defined data.
   * Returns:
   *       0 for success, other value for failure.
   */
  public static class Flush_Pointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Flush_Pointer(Pointer p) { super(p); }
      protected Flush_Pointer() { allocate(); }
      private native void allocate();
      public native @Cast("FPDF_RESULT") int call(Pointer clientData);
  }
  public native Flush_Pointer Flush(); public native FPDF_FILEHANDLER Flush(Flush_Pointer setter);

  /*
   * Callback function to change file size.
   *
   * Description:
   *       This function is called under writing mode usually. Implementer
   *       can determine whether to realize it based on application requests.
   * Parameters:
   *       clientData   -  Pointer to user-defined data.
   *       size         -  New size of file stream, in bytes.
   * Returns:
   *       0 for success, other value for failure.
   */
  public static class Truncate_Pointer_long extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Truncate_Pointer_long(Pointer p) { super(p); }
      protected Truncate_Pointer_long() { allocate(); }
      private native void allocate();
      public native @Cast("FPDF_RESULT") int call(Pointer clientData, @Cast("FPDF_DWORD") long size);
  }
  public native Truncate_Pointer_long Truncate(); public native FPDF_FILEHANDLER Truncate(Truncate_Pointer_long setter);
}
