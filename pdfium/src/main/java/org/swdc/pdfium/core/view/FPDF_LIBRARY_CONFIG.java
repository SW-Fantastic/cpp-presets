// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.pdfium.core.view;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.pdfium.core.PdfiumView.*;


// Process-wide options for initializing the library.
@Properties(inherit = org.swdc.pdfium.core.PdfiumViewConfigure.class)
public class FPDF_LIBRARY_CONFIG extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FPDF_LIBRARY_CONFIG() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FPDF_LIBRARY_CONFIG(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FPDF_LIBRARY_CONFIG(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FPDF_LIBRARY_CONFIG position(long position) {
        return (FPDF_LIBRARY_CONFIG)super.position(position);
    }
    @Override public FPDF_LIBRARY_CONFIG getPointer(long i) {
        return new FPDF_LIBRARY_CONFIG((Pointer)this).offsetAddress(i);
    }

  // Version number of the interface. Currently must be 2.
  // Support for version 1 will be deprecated in the future.
  public native int version(); public native FPDF_LIBRARY_CONFIG version(int setter);

  // Array of paths to scan in place of the defaults when using built-in
  // FXGE font loading code. The array is terminated by a NULL pointer.
  // The Array may be NULL itself to use the default paths. May be ignored
  // entirely depending upon the platform.
  public native @Cast("const char*") BytePointer m_pUserFontPaths(int i); public native FPDF_LIBRARY_CONFIG m_pUserFontPaths(int i, BytePointer setter);
  @MemberGetter public native @Cast("const char**") PointerPointer m_pUserFontPaths();

  // Version 2.

  // Pointer to the v8::Isolate to use, or NULL to force PDFium to create one.
  public native Pointer m_pIsolate(); public native FPDF_LIBRARY_CONFIG m_pIsolate(Pointer setter);

  // The embedder data slot to use in the v8::Isolate to store PDFium's
  // per-isolate data. The value needs to be in the range
  // [0, |v8::Internals::kNumIsolateDataLots|). Note that 0 is fine for most
  // embedders.
  public native @Cast("unsigned int") int m_v8EmbedderSlot(); public native FPDF_LIBRARY_CONFIG m_v8EmbedderSlot(int setter);

  // Version 3 - Experimental.

  // Pointer to the V8::Platform to use.
  public native Pointer m_pPlatform(); public native FPDF_LIBRARY_CONFIG m_pPlatform(Pointer setter);

  // Version 4 - Experimental.

  // Explicit specification of core renderer to use. |m_RendererType| must be
  // a valid value for |FPDF_LIBRARY_CONFIG| versions of this level or higher,
  // or else the initialization will fail with an immediate crash.
  // Note that use of a specified |FPDF_RENDERER_TYPE| value for which the
  // corresponding render library is not included in the build will similarly
  // fail with an immediate crash.
  public native @Cast("FPDF_RENDERER_TYPE") int m_RendererType(); public native FPDF_LIBRARY_CONFIG m_RendererType(int setter);
}
