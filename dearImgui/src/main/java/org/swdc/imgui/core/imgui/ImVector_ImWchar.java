// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


//-----------------------------------------------------------------------------
// ImVector<>
// Lightweight std::vector<>-like class to avoid dragging dependencies (also, some implementations of STL with debug enabled are absurdly slow, we bypass it so our code runs fast in debug).
//-----------------------------------------------------------------------------
// - You generally do NOT need to care or use this ever. But we need to make it available in imgui.h because some of our public structures are relying on it.
// - We use std-like naming convention here, which is a little unusual for this codebase.
// - Important: clear() frees memory, resize(0) keep the allocated buffer. We use resize(0) a lot to intentionally recycle allocated buffers across frames and amortize our costs.
// - Important: our implementation does NOT call C++ constructors/destructors, we treat everything as raw data! This is intentional but be extra mindful of that,
//   Do NOT use this class as a std::vector replacement in your own code! Many of the structures used by dear imgui can be safely initialized by a zero-memset.
//-----------------------------------------------------------------------------

@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImVector_ImWchar extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImVector_ImWchar() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImVector_ImWchar(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImVector_ImWchar(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImVector_ImWchar position(long position) {
        return (ImVector_ImWchar)super.position(position);
    }
    @Override public ImVector_ImWchar getPointer(long i) {
        return new ImVector_ImWchar((Pointer)this).offsetAddress(i);
    }

    public native int Size(); public native ImVector_ImWchar Size(int setter);
    public native int Capacity(); public native ImVector_ImWchar Capacity(int setter);
    public native @Cast("ImWchar*") IntPointer Data(); public native ImVector_ImWchar Data(IntPointer setter);
}
