// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


// Hold rendering data for one glyph.
// (Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this)
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImFontGlyph extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImFontGlyph() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImFontGlyph(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImFontGlyph(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImFontGlyph position(long position) {
        return (ImFontGlyph)super.position(position);
    }
    @Override public ImFontGlyph getPointer(long i) {
        return new ImFontGlyph((Pointer)this).offsetAddress(i);
    }

    public native @Cast("unsigned int") @NoOffset int Colored(); public native ImFontGlyph Colored(int setter);     // Flag to indicate glyph is colored and should generally ignore tinting (make it usable with no shift on little-endian as this is used in loops)
    public native @Cast("unsigned int") @NoOffset int Visible(); public native ImFontGlyph Visible(int setter);     // Flag to indicate glyph has no visible pixels (e.g. space). Allow early out when rendering.
    public native @Cast("unsigned int") @NoOffset int Codepoint(); public native ImFontGlyph Codepoint(int setter);  // 0x0000..0x10FFFF
    public native float AdvanceX(); public native ImFontGlyph AdvanceX(float setter);        // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
    public native float X0(); public native ImFontGlyph X0(float setter);
    public native float Y0(); public native ImFontGlyph Y0(float setter);
    public native float X1(); public native ImFontGlyph X1(float setter);
    public native float Y1(); public native ImFontGlyph Y1(float setter);  // Glyph corners
    public native float U0(); public native ImFontGlyph U0(float setter);
    public native float V0(); public native ImFontGlyph V0(float setter);
    public native float U1(); public native ImFontGlyph U1(float setter);
    public native float V1(); public native ImFontGlyph V1(float setter);  // Texture coordinates
}
