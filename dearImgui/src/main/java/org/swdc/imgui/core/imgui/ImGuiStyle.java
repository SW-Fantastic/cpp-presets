// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;

@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImGuiStyle extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImGuiStyle() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImGuiStyle(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImGuiStyle(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImGuiStyle position(long position) {
        return (ImGuiStyle)super.position(position);
    }
    @Override public ImGuiStyle getPointer(long i) {
        return new ImGuiStyle((Pointer)this).offsetAddress(i);
    }

    public native float Alpha(); public native ImGuiStyle Alpha(float setter);                        // Global alpha applies to everything in Dear ImGui.
    public native float DisabledAlpha(); public native ImGuiStyle DisabledAlpha(float setter);                // Additional alpha multiplier applied by BeginDisabled(). Multiply over current value of Alpha.
    public native @ByRef ImVec2 WindowPadding(); public native ImGuiStyle WindowPadding(ImVec2 setter);                // Padding within a window.
    public native float WindowRounding(); public native ImGuiStyle WindowRounding(float setter);               // Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.
    public native float WindowBorderSize(); public native ImGuiStyle WindowBorderSize(float setter);             // Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    public native @ByRef ImVec2 WindowMinSize(); public native ImGuiStyle WindowMinSize(ImVec2 setter);                // Minimum window size. This is a global setting. If you want to constrain individual windows, use SetNextWindowSizeConstraints().
    public native @ByRef ImVec2 WindowTitleAlign(); public native ImGuiStyle WindowTitleAlign(ImVec2 setter);             // Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.
    public native @Cast("ImGuiDir") int WindowMenuButtonPosition(); public native ImGuiStyle WindowMenuButtonPosition(int setter);     // Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left.
    public native float ChildRounding(); public native ImGuiStyle ChildRounding(float setter);                // Radius of child window corners rounding. Set to 0.0f to have rectangular windows.
    public native float ChildBorderSize(); public native ImGuiStyle ChildBorderSize(float setter);              // Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    public native float PopupRounding(); public native ImGuiStyle PopupRounding(float setter);                // Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)
    public native float PopupBorderSize(); public native ImGuiStyle PopupBorderSize(float setter);              // Thickness of border around popup/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    public native @ByRef ImVec2 FramePadding(); public native ImGuiStyle FramePadding(ImVec2 setter);                 // Padding within a framed rectangle (used by most widgets).
    public native float FrameRounding(); public native ImGuiStyle FrameRounding(float setter);                // Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).
    public native float FrameBorderSize(); public native ImGuiStyle FrameBorderSize(float setter);              // Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    public native @ByRef ImVec2 ItemSpacing(); public native ImGuiStyle ItemSpacing(ImVec2 setter);                  // Horizontal and vertical spacing between widgets/lines.
    public native @ByRef ImVec2 ItemInnerSpacing(); public native ImGuiStyle ItemInnerSpacing(ImVec2 setter);             // Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).
    public native @ByRef ImVec2 CellPadding(); public native ImGuiStyle CellPadding(ImVec2 setter);                  // Padding within a table cell. Cellpadding.x is locked for entire table. CellPadding.y may be altered between different rows.
    public native @ByRef ImVec2 TouchExtraPadding(); public native ImGuiStyle TouchExtraPadding(ImVec2 setter);            // Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
    public native float IndentSpacing(); public native ImGuiStyle IndentSpacing(float setter);                // Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).
    public native float ColumnsMinSpacing(); public native ImGuiStyle ColumnsMinSpacing(float setter);            // Minimum horizontal spacing between two columns. Preferably > (FramePadding.x + 1).
    public native float ScrollbarSize(); public native ImGuiStyle ScrollbarSize(float setter);                // Width of the vertical scrollbar, Height of the horizontal scrollbar.
    public native float ScrollbarRounding(); public native ImGuiStyle ScrollbarRounding(float setter);            // Radius of grab corners for scrollbar.
    public native float GrabMinSize(); public native ImGuiStyle GrabMinSize(float setter);                  // Minimum width/height of a grab box for slider/scrollbar.
    public native float GrabRounding(); public native ImGuiStyle GrabRounding(float setter);                 // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
    public native float LogSliderDeadzone(); public native ImGuiStyle LogSliderDeadzone(float setter);            // The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero.
    public native float TabRounding(); public native ImGuiStyle TabRounding(float setter);                  // Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.
    public native float TabBorderSize(); public native ImGuiStyle TabBorderSize(float setter);                // Thickness of border around tabs.
    public native float TabMinWidthForCloseButton(); public native ImGuiStyle TabMinWidthForCloseButton(float setter);    // Minimum width for close button to appear on an unselected tab when hovered. Set to 0.0f to always show when hovering, set to FLT_MAX to never show close button unless selected.
    public native float TabBarBorderSize(); public native ImGuiStyle TabBarBorderSize(float setter);             // Thickness of tab-bar separator, which takes on the tab active color to denote focus.
    public native float TabBarOverlineSize(); public native ImGuiStyle TabBarOverlineSize(float setter);           // Thickness of tab-bar overline, which highlights the selected tab-bar.
    public native float TableAngledHeadersAngle(); public native ImGuiStyle TableAngledHeadersAngle(float setter);      // Angle of angled headers (supported values range from -50.0f degrees to +50.0f degrees).
    public native @ByRef ImVec2 TableAngledHeadersTextAlign(); public native ImGuiStyle TableAngledHeadersTextAlign(ImVec2 setter);  // Alignment of angled headers within the cell
    public native @Cast("ImGuiDir") int ColorButtonPosition(); public native ImGuiStyle ColorButtonPosition(int setter);          // Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.
    public native @ByRef ImVec2 ButtonTextAlign(); public native ImGuiStyle ButtonTextAlign(ImVec2 setter);              // Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered).
    public native @ByRef ImVec2 SelectableTextAlign(); public native ImGuiStyle SelectableTextAlign(ImVec2 setter);          // Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line.
    public native float SeparatorTextBorderSize(); public native ImGuiStyle SeparatorTextBorderSize(float setter);      // Thickness of border in SeparatorText()
    public native @ByRef ImVec2 SeparatorTextAlign(); public native ImGuiStyle SeparatorTextAlign(ImVec2 setter);           // Alignment of text within the separator. Defaults to (0.0f, 0.5f) (left aligned, center).
    public native @ByRef ImVec2 SeparatorTextPadding(); public native ImGuiStyle SeparatorTextPadding(ImVec2 setter);         // Horizontal offset of text from each edge of the separator + spacing on other axis. Generally small values. .y is recommended to be == FramePadding.y.
    public native @ByRef ImVec2 DisplayWindowPadding(); public native ImGuiStyle DisplayWindowPadding(ImVec2 setter);         // Apply to regular windows: amount which we enforce to keep visible when moving near edges of your screen.
    public native @ByRef ImVec2 DisplaySafeAreaPadding(); public native ImGuiStyle DisplaySafeAreaPadding(ImVec2 setter);       // Apply to every windows, menus, popups, tooltips: amount where we avoid displaying contents. Adjust if you cannot see the edges of your screen (e.g. on a TV where scaling has not been configured).
    public native float MouseCursorScale(); public native ImGuiStyle MouseCursorScale(float setter);             // Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). We apply per-monitor DPI scaling over this scale. May be removed later.
    public native @Cast("bool") boolean AntiAliasedLines(); public native ImGuiStyle AntiAliasedLines(boolean setter);             // Enable anti-aliased lines/borders. Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
    public native @Cast("bool") boolean AntiAliasedLinesUseTex(); public native ImGuiStyle AntiAliasedLinesUseTex(boolean setter);       // Enable anti-aliased lines/borders using textures where possible. Require backend to render with bilinear filtering (NOT point/nearest filtering). Latched at the beginning of the frame (copied to ImDrawList).
    public native @Cast("bool") boolean AntiAliasedFill(); public native ImGuiStyle AntiAliasedFill(boolean setter);              // Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
    public native float CurveTessellationTol(); public native ImGuiStyle CurveTessellationTol(float setter);         // Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.
    public native float CircleTessellationMaxError(); public native ImGuiStyle CircleTessellationMaxError(float setter);   // Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry.
    public native @ByRef ImVec4 Colors(int i); public native ImGuiStyle Colors(int i, ImVec4 setter);
    @MemberGetter public native ImVec4 Colors();

    // Behaviors
    // (It is possible to modify those fields mid-frame if specific behavior need it, unlike e.g. configuration fields in ImGuiIO)
    public native float HoverStationaryDelay(); public native ImGuiStyle HoverStationaryDelay(float setter);         // Delay for IsItemHovered(ImGuiHoveredFlags_Stationary). Time required to consider mouse stationary.
    public native float HoverDelayShort(); public native ImGuiStyle HoverDelayShort(float setter);              // Delay for IsItemHovered(ImGuiHoveredFlags_DelayShort). Usually used along with HoverStationaryDelay.
    public native float HoverDelayNormal(); public native ImGuiStyle HoverDelayNormal(float setter);             // Delay for IsItemHovered(ImGuiHoveredFlags_DelayNormal). "
    public native @Cast("ImGuiHoveredFlags") int HoverFlagsForTooltipMouse(); public native ImGuiStyle HoverFlagsForTooltipMouse(int setter);    // Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using mouse.
    public native @Cast("ImGuiHoveredFlags") int HoverFlagsForTooltipNav(); public native ImGuiStyle HoverFlagsForTooltipNav(int setter);      // Default flags when using IsItemHovered(ImGuiHoveredFlags_ForTooltip) or BeginItemTooltip()/SetItemTooltip() while using keyboard/gamepad.
}
