// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


// [ALPHA] Rarely used / very advanced uses only. Use with SetNextWindowClass() and DockSpace() functions.
// Important: the content of this class is still highly WIP and likely to change and be refactored
// before we stabilize Docking features. Please be mindful if using this.
// Provide hints:
// - To the platform backend via altered viewport flags (enable/disable OS decoration, OS task bar icons, etc.)
// - To the platform backend for OS level parent/child relationships of viewport.
// - To the docking system for various options and filtering.
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImGuiWindowClass extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImGuiWindowClass() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImGuiWindowClass(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImGuiWindowClass(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImGuiWindowClass position(long position) {
        return (ImGuiWindowClass)super.position(position);
    }
    @Override public ImGuiWindowClass getPointer(long i) {
        return new ImGuiWindowClass((Pointer)this).offsetAddress(i);
    }

    public native @Cast("ImGuiID") int ClassId(); public native ImGuiWindowClass ClassId(int setter);                     // User data. 0 = Default class (unclassed). Windows of different classes cannot be docked with each others.
    public native @Cast("ImGuiID") int ParentViewportId(); public native ImGuiWindowClass ParentViewportId(int setter);            // Hint for the platform backend. -1: use default. 0: request platform backend to not parent the platform. != 0: request platform backend to create a parent<>child relationship between the platform windows. Not conforming backends are free to e.g. parent every viewport to the main viewport or not.
    public native @Cast("ImGuiID") int FocusRouteParentWindowId(); public native ImGuiWindowClass FocusRouteParentWindowId(int setter);    // ID of parent window for shortcut focus route evaluation, e.g. Shortcut() call from Parent Window will succeed when this window is focused.
    public native @Cast("ImGuiViewportFlags") int ViewportFlagsOverrideSet(); public native ImGuiWindowClass ViewportFlagsOverrideSet(int setter);    // Viewport flags to set when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.
    public native @Cast("ImGuiViewportFlags") int ViewportFlagsOverrideClear(); public native ImGuiWindowClass ViewportFlagsOverrideClear(int setter);  // Viewport flags to clear when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.
    public native @Cast("ImGuiTabItemFlags") int TabItemFlagsOverrideSet(); public native ImGuiWindowClass TabItemFlagsOverrideSet(int setter);     // [EXPERIMENTAL] TabItem flags to set when a window of this class gets submitted into a dock node tab bar. May use with ImGuiTabItemFlags_Leading or ImGuiTabItemFlags_Trailing.
    public native @Cast("ImGuiDockNodeFlags") int DockNodeFlagsOverrideSet(); public native ImGuiWindowClass DockNodeFlagsOverrideSet(int setter);    // [EXPERIMENTAL] Dock node flags to set when a window of this class is hosted by a dock node (it doesn't have to be selected!)
    public native @Cast("bool") boolean DockingAlwaysTabBar(); public native ImGuiWindowClass DockingAlwaysTabBar(boolean setter);         // Set to true to enforce single floating windows of this class always having their own docking node (equivalent of setting the global io.ConfigDockingAlwaysTabBar)
    public native @Cast("bool") boolean DockingAllowUnclassed(); public native ImGuiWindowClass DockingAllowUnclassed(boolean setter);       // Set to true to allow windows of this class to be docked/merged with an unclassed window. // FIXME-DOCK: Move to DockNodeFlags override?
}
