// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


// Load and rasterize multiple TTF/OTF fonts into a same texture. The font atlas will build a single texture holding:
//  - One or more fonts.
//  - Custom graphics data needed to render the shapes needed by Dear ImGui.
//  - Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas).
// It is the user-code responsibility to setup/build the atlas, then upload the pixel data into a texture accessible by your graphics api.
//  - Optionally, call any of the AddFont*** functions. If you don't call any, the default font embedded in the code will be loaded for you.
//  - Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.
//  - Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples)
//  - Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture in a format natural to your graphics API.
//    This value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details.
// Common pitfalls:
// - If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the
//   atlas is build (when calling GetTexData*** or Build()). We only copy the pointer, not the data.
// - Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction.
//   You can set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed,
// - Even though many functions are suffixed with "TTF", OTF data is supported just as well.
// - This is an old API and it is currently awkward for those and various other reasons! We will address them in the future!
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImFontAtlas extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImFontAtlas() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImFontAtlas(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImFontAtlas(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImFontAtlas position(long position) {
        return (ImFontAtlas)super.position(position);
    }
    @Override public ImFontAtlas getPointer(long i) {
        return new ImFontAtlas((Pointer)this).offsetAddress(i);
    }

    //-------------------------------------------
    // Glyph Ranges
    //-------------------------------------------

    //-------------------------------------------
    // [BETA] Custom Rectangles/Glyphs API
    //-------------------------------------------

    //-------------------------------------------
    // Members
    //-------------------------------------------

    public native @Cast("ImFontAtlasFlags") int Flags(); public native ImFontAtlas Flags(int setter);                                          // Build flags (see ImFontAtlasFlags_)
    public native ImTextureID TexID(); public native ImFontAtlas TexID(ImTextureID setter);                                          // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.
    public native int TexDesiredWidth(); public native ImFontAtlas TexDesiredWidth(int setter);                                // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.
    public native int TexGlyphPadding(); public native ImFontAtlas TexGlyphPadding(int setter);                                // Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0 (will also need to set AntiAliasedLinesUseTex = false).
    public native @Cast("bool") boolean Locked(); public native ImFontAtlas Locked(boolean setter);                                         // Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.
    public native Pointer UserData(); public native ImFontAtlas UserData(Pointer setter);                                       // Store your own atlas related user-data (if e.g. you have multiple font atlas).

    // [Internal]
    // NB: Access texture data via GetTexData*() calls! Which will setup a default font for you.
    public native @Cast("bool") boolean TexReady(); public native ImFontAtlas TexReady(boolean setter);                                       // Set when texture was built matching current font input
    public native @Cast("bool") boolean TexPixelsUseColors(); public native ImFontAtlas TexPixelsUseColors(boolean setter);                             // Tell whether our texture data is known to use colors (rather than just alpha channel), in order to help backend select a format.
    public native @Cast("unsigned char*") BytePointer TexPixelsAlpha8(); public native ImFontAtlas TexPixelsAlpha8(BytePointer setter);                                // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight
    public native @Cast("unsigned int*") IntPointer TexPixelsRGBA32(); public native ImFontAtlas TexPixelsRGBA32(IntPointer setter);                                // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4
    public native int TexWidth(); public native ImFontAtlas TexWidth(int setter);                                       // Texture width calculated during Build().
    public native int TexHeight(); public native ImFontAtlas TexHeight(int setter);                                      // Texture height calculated during Build().
    public native @ByRef ImVec2 TexUvScale(); public native ImFontAtlas TexUvScale(ImVec2 setter);                                     // = (1.0f/TexWidth, 1.0f/TexHeight)
    public native @ByRef ImVec2 TexUvWhitePixel(); public native ImFontAtlas TexUvWhitePixel(ImVec2 setter);                                // Texture coordinates to a white pixel
    public native @ByRef ImVector_ImFontPtr Fonts(); public native ImFontAtlas Fonts(ImVector_ImFontPtr setter);                                          // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.
    public native @ByRef ImVector_ImFontAtlasCustomRect CustomRects(); public native ImFontAtlas CustomRects(ImVector_ImFontAtlasCustomRect setter);                            // Rectangles for packing custom texture data into the atlas.
    public native @ByRef ImVector_ImFontConfig ConfigData(); public native ImFontAtlas ConfigData(ImVector_ImFontConfig setter);                                     // Configuration data
    public native @ByRef ImVec4 TexUvLines(int i); public native ImFontAtlas TexUvLines(int i, ImVec4 setter);
    @MemberGetter public native ImVec4 TexUvLines();  // UVs for baked anti-aliased lines

    // [Internal] Font builder
    public native @Const ImFontBuilderIO FontBuilderIO(); public native ImFontAtlas FontBuilderIO(ImFontBuilderIO setter);                                  // Opaque interface to a font builder (default to stb_truetype, can be changed to use FreeType by defining IMGUI_ENABLE_FREETYPE).
    public native @Cast("unsigned int") int FontBuilderFlags(); public native ImFontAtlas FontBuilderFlags(int setter);                               // Shared flags (for all fonts) for custom font builder. THIS IS BUILD IMPLEMENTATION DEPENDENT. Per-font override is also available in ImFontConfig.

    // [Internal] Packing data
    public native int PackIdMouseCursors(); public native ImFontAtlas PackIdMouseCursors(int setter);                             // Custom texture rectangle ID for white pixel and mouse cursors
    public native int PackIdLines(); public native ImFontAtlas PackIdLines(int setter);                                    // Custom texture rectangle ID for baked anti-aliased lines

    // [Obsolete]
    //typedef ImFontAtlasCustomRect    CustomRect;         // OBSOLETED in 1.72+
    //typedef ImFontGlyphRangesBuilder GlyphRangesBuilder; // OBSOLETED in 1.67+
}
