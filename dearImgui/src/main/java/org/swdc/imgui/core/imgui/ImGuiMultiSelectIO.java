// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


// Main IO structure returned by BeginMultiSelect()/EndMultiSelect().
// This mainly contains a list of selection requests.
// - Use 'Demo->Tools->Debug Log->Selection' to see requests as they happen.
// - Some fields are only useful if your list is dynamic and allows deletion (getting post-deletion focus/state right is shown in the demo)
// - Below: who reads/writes each fields? 'r'=read, 'w'=write, 'ms'=multi-select code, 'app'=application/user code.
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImGuiMultiSelectIO extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImGuiMultiSelectIO() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImGuiMultiSelectIO(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImGuiMultiSelectIO(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImGuiMultiSelectIO position(long position) {
        return (ImGuiMultiSelectIO)super.position(position);
    }
    @Override public ImGuiMultiSelectIO getPointer(long i) {
        return new ImGuiMultiSelectIO((Pointer)this).offsetAddress(i);
    }

    //------------------------------------------// BeginMultiSelect / EndMultiSelect
    public native @ByRef ImVector_ImGuiSelectionRequest Requests(); public native ImGuiMultiSelectIO Requests(ImVector_ImGuiSelectionRequest setter);       //  ms:w, app:r     /  ms:w  app:r   // Requests to apply to your selection data.
    public native @Cast("ImGuiSelectionUserData") long RangeSrcItem(); public native ImGuiMultiSelectIO RangeSrcItem(long setter);   //  ms:w  app:r     /                // (If using clipper) Begin: Source item (often the first selected item) must never be clipped: use clipper.IncludeItemByIndex() to ensure it is submitted.
    public native @Cast("ImGuiSelectionUserData") long NavIdItem(); public native ImGuiMultiSelectIO NavIdItem(long setter);      //  ms:w, app:r     /                // (If using deletion) Last known SetNextItemSelectionUserData() value for NavId (if part of submitted items).
    public native @Cast("bool") boolean NavIdSelected(); public native ImGuiMultiSelectIO NavIdSelected(boolean setter);  //  ms:w, app:r     /        app:r   // (If using deletion) Last known selection state for NavId (if part of submitted items).
    public native @Cast("bool") boolean RangeSrcReset(); public native ImGuiMultiSelectIO RangeSrcReset(boolean setter);  //        app:w     /  ms:r          // (If using deletion) Set before EndMultiSelect() to reset ResetSrcItem (e.g. if deleted selection).
    public native int ItemsCount(); public native ImGuiMultiSelectIO ItemsCount(int setter);     //  ms:w, app:r     /        app:r   // 'int items_count' parameter to BeginMultiSelect() is copied here for convenience, allowing simpler calls to your ApplyRequests handler. Not used internally.
}
