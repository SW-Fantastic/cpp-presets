// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


// Helper to build glyph ranges from text/string data. Feed your application strings/characters to it then call BuildRanges().
// This is essentially a tightly packed of vector of 64k booleans = 8KB storage.
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImFontGlyphRangesBuilder extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImFontGlyphRangesBuilder() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImFontGlyphRangesBuilder(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImFontGlyphRangesBuilder(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImFontGlyphRangesBuilder position(long position) {
        return (ImFontGlyphRangesBuilder)super.position(position);
    }
    @Override public ImFontGlyphRangesBuilder getPointer(long i) {
        return new ImFontGlyphRangesBuilder((Pointer)this).offsetAddress(i);
    }

    public native @ByRef ImVector_ImU32 UsedChars(); public native ImFontGlyphRangesBuilder UsedChars(ImVector_ImU32 setter);  // Store 1-bit per Unicode code point (0=unused, 1=used)
}
