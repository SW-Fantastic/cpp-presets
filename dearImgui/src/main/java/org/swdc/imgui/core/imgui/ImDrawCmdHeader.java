// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;

// #else
// You can override the vertex format layout by defining IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT in imconfig.h
// The code expect ImVec2 pos (8 bytes), ImVec2 uv (8 bytes), ImU32 col (4 bytes), but you can re-order them or add other fields as needed to simplify integration in your engine.
// The type has to be described within the macro (you can either declare the struct or use a typedef). This is because ImVec2/ImU32 are likely not declared at the time you'd want to set your type up.
// NOTE: IMGUI DOESN'T CLEAR THE STRUCTURE AND DOESN'T CALL A CONSTRUCTOR SO ANY CUSTOM FIELD WILL BE UNINITIALIZED. IF YOU ADD EXTRA FIELDS (SUCH AS A 'Z' COORDINATES) YOU WILL NEED TO CLEAR THEM DURING RENDER OR TO IGNORE THEM.
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImDrawCmdHeader extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImDrawCmdHeader() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImDrawCmdHeader(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImDrawCmdHeader(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImDrawCmdHeader position(long position) {
        return (ImDrawCmdHeader)super.position(position);
    }
    @Override public ImDrawCmdHeader getPointer(long i) {
        return new ImDrawCmdHeader((Pointer)this).offsetAddress(i);
    }

    public native @ByRef ImVec4 ClipRect(); public native ImDrawCmdHeader ClipRect(ImVec4 setter);
    public native ImTextureID TextureId(); public native ImDrawCmdHeader TextureId(ImTextureID setter);
    public native @Cast("unsigned int") int VtxOffset(); public native ImDrawCmdHeader VtxOffset(int setter);
}
