// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;
  // [Obsoleted in 1.89.8] Clear the current frame text input buffer. Now included within ClearInputKeys().
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

//-----------------------------------------------------------------------------
// [SECTION] Misc data structures (ImGuiInputTextCallbackData, ImGuiSizeCallbackData, ImGuiPayload)
//-----------------------------------------------------------------------------

// Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback* flag is used.
// The callback function should return 0 by default.
// Callbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details)
// - ImGuiInputTextFlags_CallbackEdit:        Callback on buffer edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)
// - ImGuiInputTextFlags_CallbackAlways:      Callback on each iteration
// - ImGuiInputTextFlags_CallbackCompletion:  Callback on pressing TAB
// - ImGuiInputTextFlags_CallbackHistory:     Callback on pressing Up/Down arrows
// - ImGuiInputTextFlags_CallbackCharFilter:  Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.
// - ImGuiInputTextFlags_CallbackResize:      Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow.
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImGuiInputTextCallbackData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImGuiInputTextCallbackData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImGuiInputTextCallbackData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImGuiInputTextCallbackData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImGuiInputTextCallbackData position(long position) {
        return (ImGuiInputTextCallbackData)super.position(position);
    }
    @Override public ImGuiInputTextCallbackData getPointer(long i) {
        return new ImGuiInputTextCallbackData((Pointer)this).offsetAddress(i);
    }

    public native ImGuiContext Ctx(); public native ImGuiInputTextCallbackData Ctx(ImGuiContext setter);             // Parent UI context
    public native @Cast("ImGuiInputTextFlags") int EventFlag(); public native ImGuiInputTextCallbackData EventFlag(int setter);       // One ImGuiInputTextFlags_Callback*    // Read-only
    public native @Cast("ImGuiInputTextFlags") int Flags(); public native ImGuiInputTextCallbackData Flags(int setter);           // What user passed to InputText()      // Read-only
    public native Pointer UserData(); public native ImGuiInputTextCallbackData UserData(Pointer setter);        // What user passed to InputText()      // Read-only

    // Arguments for the different callback events
    // - During Resize callback, Buf will be same as your input buffer.
    // - However, during Completion/History/Always callback, Buf always points to our own internal data (it is not the same as your buffer)! Changes to it will be reflected into your own buffer shortly after the callback.
    // - To modify the text buffer in a callback, prefer using the InsertChars() / DeleteChars() function. InsertChars() will take care of calling the resize callback if necessary.
    // - If you know your edits are not going to resize the underlying buffer allocation, you may modify the contents of 'Buf[]' directly. You need to update 'BufTextLen' accordingly (0 <= BufTextLen < BufSize) and set 'BufDirty'' to true so InputText can update its internal state.
    public native @Cast("ImWchar") int EventChar(); public native ImGuiInputTextCallbackData EventChar(int setter);       // Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;
    public native @Cast("ImGuiKey") int EventKey(); public native ImGuiInputTextCallbackData EventKey(int setter);        // Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]
    public native @Cast("char*") BytePointer Buf(); public native ImGuiInputTextCallbackData Buf(BytePointer setter);             // Text buffer                          // Read-write   // [Resize] Can replace pointer / [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!
    public native int BufTextLen(); public native ImGuiInputTextCallbackData BufTextLen(int setter);      // Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()
    public native int BufSize(); public native ImGuiInputTextCallbackData BufSize(int setter);         // Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1
    public native @Cast("bool") boolean BufDirty(); public native ImGuiInputTextCallbackData BufDirty(boolean setter);        // Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]
    public native int CursorPos(); public native ImGuiInputTextCallbackData CursorPos(int setter);       //                                      // Read-write   // [Completion,History,Always]
    public native int SelectionStart(); public native ImGuiInputTextCallbackData SelectionStart(int setter);  //                                      // Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)
    public native int SelectionEnd(); public native ImGuiInputTextCallbackData SelectionEnd(int setter);    //                                      // Read-write   // [Completion,History,Always]
}
