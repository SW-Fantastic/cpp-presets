// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;
     // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.

//-----------------------------------------------------------------------------
// [SECTION] Font API (ImFontConfig, ImFontGlyph, ImFontAtlasFlags, ImFontAtlas, ImFontGlyphRangesBuilder, ImFont)
//-----------------------------------------------------------------------------

@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImFontConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImFontConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImFontConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImFontConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImFontConfig position(long position) {
        return (ImFontConfig)super.position(position);
    }
    @Override public ImFontConfig getPointer(long i) {
        return new ImFontConfig((Pointer)this).offsetAddress(i);
    }

    public native Pointer FontData(); public native ImFontConfig FontData(Pointer setter);              //          // TTF/OTF data
    public native int FontDataSize(); public native ImFontConfig FontDataSize(int setter);          //          // TTF/OTF data size
    public native @Cast("bool") boolean FontDataOwnedByAtlas(); public native ImFontConfig FontDataOwnedByAtlas(boolean setter);  // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
    public native int FontNo(); public native ImFontConfig FontNo(int setter);                // 0        // Index of font within TTF/OTF file
    public native float SizePixels(); public native ImFontConfig SizePixels(float setter);            //          // Size in pixels for rasterizer (more or less maps to the resulting font height).
    public native int OversampleH(); public native ImFontConfig OversampleH(int setter);           // 2        // Rasterize at higher quality for sub-pixel positioning. Note the difference between 2 and 3 is minimal. You can reduce this to 1 for large glyphs save memory. Read https://github.com/nothings/stb/blob/master/tests/oversample/README.md for details.
    public native int OversampleV(); public native ImFontConfig OversampleV(int setter);           // 1        // Rasterize at higher quality for sub-pixel positioning. This is not really useful as we don't use sub-pixel positions on the Y axis.
    public native @Cast("bool") boolean PixelSnapH(); public native ImFontConfig PixelSnapH(boolean setter);            // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
    public native @ByRef ImVec2 GlyphExtraSpacing(); public native ImFontConfig GlyphExtraSpacing(ImVec2 setter);     // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
    public native @ByRef ImVec2 GlyphOffset(); public native ImFontConfig GlyphOffset(ImVec2 setter);           // 0, 0     // Offset all glyphs from this font input.
    public native @Cast("const ImWchar*") IntPointer GlyphRanges(); public native ImFontConfig GlyphRanges(IntPointer setter);           // NULL     // THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE. Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list).
    public native float GlyphMinAdvanceX(); public native ImFontConfig GlyphMinAdvanceX(float setter);      // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
    public native float GlyphMaxAdvanceX(); public native ImFontConfig GlyphMaxAdvanceX(float setter);      // FLT_MAX  // Maximum AdvanceX for glyphs
    public native @Cast("bool") boolean MergeMode(); public native ImFontConfig MergeMode(boolean setter);             // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
    public native @Cast("unsigned int") int FontBuilderFlags(); public native ImFontConfig FontBuilderFlags(int setter);      // 0        // Settings for custom font builder. THIS IS BUILDER IMPLEMENTATION DEPENDENT. Leave as zero if unsure.
    public native float RasterizerMultiply(); public native ImFontConfig RasterizerMultiply(float setter);    // 1.0f     // Linearly brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable. This is a silly thing we may remove in the future.
    public native float RasterizerDensity(); public native ImFontConfig RasterizerDensity(float setter);     // 1.0f     // DPI scale for rasterization, not altering other font metrics: make it easy to swap between e.g. a 100% and a 400% fonts for a zooming display. IMPORTANT: If you increase this it is expected that you increase font scale accordingly, otherwise quality may look lowered.
    public native @Cast("ImWchar") int EllipsisChar(); public native ImFontConfig EllipsisChar(int setter);          // -1       // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.

    // [Internal]
    public native @Cast("char") byte Name(int i); public native ImFontConfig Name(int i, byte setter);
    @MemberGetter public native @Cast("char*") BytePointer Name();              // Name (strictly to ease debugging)
    public native ImFont DstFont(); public native ImFontConfig DstFont(ImFont setter);
}
