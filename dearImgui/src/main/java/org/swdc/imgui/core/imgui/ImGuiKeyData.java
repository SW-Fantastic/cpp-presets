// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


//-----------------------------------------------------------------------------
// [SECTION] ImGuiIO
//-----------------------------------------------------------------------------
// Communicate most settings and inputs/outputs to Dear ImGui using this structure.
// Access via ImGui::GetIO(). Read 'Programmer guide' section in .cpp file for general usage.
// It is generally expected that:
// - initialization: backends and user code writes to ImGuiIO.
// - main loop: backends writes to ImGuiIO, user code and imgui code reads from ImGuiIO.
//-----------------------------------------------------------------------------

// [Internal] Storage used by IsKeyDown(), IsKeyPressed() etc functions.
// If prior to 1.87 you used io.KeysDownDuration[] (which was marked as internal), you should use GetKeyData(key)->DownDuration and *NOT* io.KeysData[key]->DownDuration.
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImGuiKeyData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImGuiKeyData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImGuiKeyData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImGuiKeyData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImGuiKeyData position(long position) {
        return (ImGuiKeyData)super.position(position);
    }
    @Override public ImGuiKeyData getPointer(long i) {
        return new ImGuiKeyData((Pointer)this).offsetAddress(i);
    }

    public native @Cast("bool") boolean Down(); public native ImGuiKeyData Down(boolean setter);              // True for if key is down
    public native float DownDuration(); public native ImGuiKeyData DownDuration(float setter);      // Duration the key has been down (<0.0f: not pressed, 0.0f: just pressed, >0.0f: time held)
    public native float DownDurationPrev(); public native ImGuiKeyData DownDurationPrev(float setter);  // Last frame duration the key has been down
    public native float AnalogValue(); public native ImGuiKeyData AnalogValue(float setter);       // 0.0f..1.0f for gamepad values
}
