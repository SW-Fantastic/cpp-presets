// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;
           // Transparent black = 0x00000000

// Helper: ImColor() implicitly converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)
// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.
// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.
// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImColor extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImColor() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImColor(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImColor(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImColor position(long position) {
        return (ImColor)super.position(position);
    }
    @Override public ImColor getPointer(long i) {
        return new ImColor((Pointer)this).offsetAddress(i);
    }

    public native @ByRef ImVec4 Value(); public native ImColor Value(ImVec4 setter);
}
