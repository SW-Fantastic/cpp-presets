// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.glfw;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUIGLFW.*;


/** \brief Gamma ramp.
 *
 *  This describes the gamma ramp for a monitor.
 *
 *  @see \ref monitor_gamma
 *  @see glfwGetGammaRamp glfwSetGammaRamp
 *
 *  @since Added in version 3.0.
 *
 *  \ingroup monitor
 */
@Properties(inherit = org.swdc.imgui.conf.ImGuiGLFWConfigure.class)
public class GLFWgammaramp extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public GLFWgammaramp() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public GLFWgammaramp(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GLFWgammaramp(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public GLFWgammaramp position(long position) {
        return (GLFWgammaramp)super.position(position);
    }
    @Override public GLFWgammaramp getPointer(long i) {
        return new GLFWgammaramp((Pointer)this).offsetAddress(i);
    }

    /** An array of value describing the response of the red channel.
     */
    public native @Cast("unsigned short*") ShortPointer red(); public native GLFWgammaramp red(ShortPointer setter);
    /** An array of value describing the response of the green channel.
     */
    public native @Cast("unsigned short*") ShortPointer green(); public native GLFWgammaramp green(ShortPointer setter);
    /** An array of value describing the response of the blue channel.
     */
    public native @Cast("unsigned short*") ShortPointer blue(); public native GLFWgammaramp blue(ShortPointer setter);
    /** The number of elements in each array.
     */
    public native @Cast("unsigned int") int size(); public native GLFWgammaramp size(int setter);
}
