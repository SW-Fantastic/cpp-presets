// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core;

import org.swdc.imgui.core.imgui.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class ImGUICore extends org.swdc.imgui.conf.ImGuiCoreConfigure {
    static { Loader.load(); }

// Parsed from cimgui.h

// THIS FILE HAS BEEN AUTO-GENERATED BY THE 'DEAR BINDINGS' GENERATOR.
// **DO NOT EDIT DIRECTLY**
// https://github.com/dearimgui/dear_bindings

// dear imgui, v1.91.1
// (headers)

// Help:
// - See links below.
// - Call and read ImGui::ShowDemoWindow() in imgui_demo.cpp. All applications in examples/ are doing that.
// - Read top of imgui.cpp for more details, links and comments.
// - Add '#define IMGUI_DEFINE_MATH_OPERATORS' before including this file (or in imconfig.h) to access courtesy maths operators for ImVec2 and ImVec4.

// Resources:
// - FAQ ........................ https://dearimgui.com/faq (in repository as docs/FAQ.md)
// - Homepage ................... https://github.com/ocornut/imgui
// - Releases & changelog ....... https://github.com/ocornut/imgui/releases
// - Gallery .................... https://github.com/ocornut/imgui/issues/7503 (please post your screenshots/video there!)
// - Wiki ....................... https://github.com/ocornut/imgui/wiki (lots of good stuff there)
//   - Getting Started            https://github.com/ocornut/imgui/wiki/Getting-Started (how to integrate in an existing app by adding ~25 lines of code)
//   - Third-party Extensions     https://github.com/ocornut/imgui/wiki/Useful-Extensions (ImPlot & many more)
//   - Bindings/Backends          https://github.com/ocornut/imgui/wiki/Bindings (language bindings, backends for various tech/engines)
//   - Glossary                   https://github.com/ocornut/imgui/wiki/Glossary
//   - Debug Tools                https://github.com/ocornut/imgui/wiki/Debug-Tools
//   - Software using Dear ImGui  https://github.com/ocornut/imgui/wiki/Software-using-dear-imgui
// - Issues & support ........... https://github.com/ocornut/imgui/issues
// - Test Engine & Automation ... https://github.com/ocornut/imgui_test_engine (test suite, test engine to automate your apps)

// For first-time users having issues compiling/linking/running/loading fonts:
// please post in https://github.com/ocornut/imgui/discussions if you cannot find a solution in resources above.
// Everything else should be asked in 'Issues'! We are building a database of cross-linked knowledge there.

// Library Version
// (Integer encoded as XYYZZ for use in #if preprocessor conditionals, e.g. '#if IMGUI_VERSION_NUM >= 12345')
public static final String IMGUI_VERSION =       "1.91.1";
public static final int IMGUI_VERSION_NUM =   19110;
// #define IMGUI_HAS_TABLE
// #define IMGUI_HAS_VIEWPORT           // Viewport WIP branch
// #define IMGUI_HAS_DOCK               // Docking WIP branch

/*

Index of this file:
// [SECTION] Header mess
// [SECTION] Forward declarations and basic types
// [SECTION] Dear ImGui end-user API functions
// [SECTION] Flags & Enumerations
// [SECTION] Tables API flags and structures (ImGuiTableFlags, ImGuiTableColumnFlags, ImGuiTableRowFlags, ImGuiTableBgTarget, ImGuiTableSortSpecs, ImGuiTableColumnSortSpecs)
// [SECTION] Helpers: Debug log, Memory allocations macros, ImVector<>
// [SECTION] ImGuiStyle
// [SECTION] ImGuiIO
// [SECTION] Misc data structures (ImGuiInputTextCallbackData, ImGuiSizeCallbackData, ImGuiWindowClass, ImGuiPayload)
// [SECTION] Helpers (ImGuiOnceUponAFrame, ImGuiTextFilter, ImGuiTextBuffer, ImGuiStorage, ImGuiListClipper, Math Operators, ImColor)
// [SECTION] Multi-Select API flags and structures (ImGuiMultiSelectFlags, ImGuiMultiSelectIO, ImGuiSelectionRequest, ImGuiSelectionBasicStorage, ImGuiSelectionExternalStorage)
// [SECTION] Drawing API (ImDrawCallback, ImDrawCmd, ImDrawIdx, ImDrawVert, ImDrawChannel, ImDrawListSplitter, ImDrawFlags, ImDrawListFlags, ImDrawList, ImDrawData)
// [SECTION] Font API (ImFontConfig, ImFontGlyph, ImFontGlyphRangesBuilder, ImFontAtlasFlags, ImFontAtlas, ImFont)
// [SECTION] Viewports (ImGuiViewportFlags, ImGuiViewport)
// [SECTION] ImGuiPlatformIO + other Platform Dependent Interfaces (ImGuiPlatformMonitor, ImGuiPlatformImeData)
// [SECTION] Obsolete functions and types

*/

// #pragma once

// #ifdef __cplusplus
// #endif
// Configuration file with compile-time options
// (edit imconfig.h or '#define IMGUI_USER_CONFIG "myfilename.h" from your build system)
// #ifdef IMGUI_USER_CONFIG
// #include IMGUI_USER_CONFIG
// #endif // #ifdef IMGUI_USER_CONFIG
// #include "imconfig.h"  //-----------------------------------------------------------------------------
// #ifndef IMGUI_DISABLE
// [SECTION] Header mess
//-----------------------------------------------------------------------------

// Includes
// #include <stdint.h>
// #include <stdbool.h>
// #include <stdarg.h>
// #include <stddef.h>
// Define attributes of all API symbols declarations (e.g. for DLL under Windows)
// CIMGUI_API is used for core imgui functions, CIMGUI_IMPL_API is used for the default backends files (imgui_impl_xxx.h)
// Using dear imgui via a shared library is not recommended: we don't guarantee backward nor forward ABI compatibility + this is a call-heavy library and function call overhead adds up.
// #ifndef CIMGUI_API

// #if defined(_WIN32)
// #define CIMGUI_API __declspec(dllexport)
// #elif defined(__clang__)
// #define CIMGUI_API __attribute__((visibility("default")))
// #else
// #define CIMGUI_API
// #endif

// #endif // #ifndef CIMGUI_API
// #ifndef CIMGUI_IMPL_API
// #define CIMGUI_IMPL_API              CIMGUI_API
// #endif // #ifndef CIMGUI_IMPL_API
// Helper Macros
// #ifndef IM_ASSERT
// #include <assert.h>
// #define IM_ASSERT(_EXPR)            assert(_EXPR)                                // You can override the default assert handler by editing imconfig.h
// #endif // #ifndef IM_ASSERT
// #define IM_ARRAYSIZE(_ARR)          ((int)(sizeof(_ARR) / sizeof(*(_ARR))))      // Size of a static C-style array. Don't use on pointers!
// #define IM_UNUSED(_VAR)             ((void)(_VAR))                               // Used to silence "unused variable warnings". Often useful as asserts may be stripped out from final builds.

// Check that version and structures layouts are matching between compiled imgui code and caller. Read comments above DebugCheckVersionAndDataLayout() for details.
// #define CIMGUI_CHECKVERSION() ImGui_DebugCheckVersionAndDataLayout(IMGUI_VERSION, sizeof(ImGuiIO), sizeof(ImGuiStyle), sizeof(ImVec2), sizeof(ImVec4), sizeof(ImDrawVert), sizeof(ImDrawIdx))

// Helper Macros - IM_FMTARGS, IM_FMTLIST: Apply printf-style warnings to our formatting functions.
// (MSVC provides an equivalent mechanism via SAL Annotations but it would require the macros in a different
//  location. e.g. #include <sal.h> + void myprintf(_Printf_format_string_ const char* format, ...))
// #if !defined(IMGUI_USE_STB_SPRINTF)&& defined(__MINGW32__)&&!defined(__clang__)
// #define IM_FMTARGS(FMT)             __attribute__((format(gnu_printf, FMT, FMT+1)))
// #define IM_FMTLIST(FMT)             __attribute__((format(gnu_printf, FMT, 0)))
// #else
// #if !defined(IMGUI_USE_STB_SPRINTF)&&(defined(__clang__)|| defined(__GNUC__))
// #define IM_FMTARGS(FMT)             __attribute__((format(printf, FMT, FMT+1)))
// #define IM_FMTLIST(FMT)             __attribute__((format(printf, FMT, 0)))
// #else
// #define IM_FMTARGS(FMT)
// #define IM_FMTLIST(FMT)
// #endif // #if !defined(IMGUI_USE_STB_SPRINTF)&&(defined(__clang__)|| defined(__GNUC__))
// #endif // #if !defined(IMGUI_USE_STB_SPRINTF)&& defined(__MINGW32__)&&!defined(__clang__)
// Disable some of MSVC most aggressive Debug runtime checks in function header/footer (used in some simple/low-level functions)
// #if defined(_MSC_VER)&&!defined(__clang__)&&!defined(__INTEL_COMPILER)&&!defined(IMGUI_DEBUG_PARANOID)
// #define IM_MSVC_RUNTIME_CHECKS_OFF      __pragma(runtime_checks("",off))     __pragma(check_stack(off)) __pragma(strict_gs_check(push,off))
// #define IM_MSVC_RUNTIME_CHECKS_RESTORE  __pragma(runtime_checks("",restore)) __pragma(check_stack())    __pragma(strict_gs_check(pop))
// #else
// #define IM_MSVC_RUNTIME_CHECKS_OFF
// #define IM_MSVC_RUNTIME_CHECKS_RESTORE
// #endif // #if defined(_MSC_VER)&&!defined(__clang__)&&!defined(__INTEL_COMPILER)&&!defined(IMGUI_DEBUG_PARANOID)
// Warnings
// #ifdef _MSC_VER
// #pragma warning (push)
// #pragma warning (disable: 26495)     // [Static Analyzer] Variable 'XXX' is uninitialized. Always initialize a member variable (type.6).
// #endif // #ifdef _MSC_VER
// #if defined(__clang__)
// #pragma clang diagnostic push
// #if __has_warning("-Wunknown-warning-option")
// #pragma clang diagnostic ignored "-Wunknown-warning-option"          // warning: unknown warning group 'xxx'
// #endif // #if __has_warning("-Wunknown-warning-option")
// #pragma clang diagnostic ignored "-Wunknown-pragmas"                 // warning: unknown warning group 'xxx'
// #pragma clang diagnostic ignored "-Wold-style-cast"
// #pragma clang diagnostic ignored "-Wfloat-equal"                     // warning: comparing floating point with == or != is unsafe
// #pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"
// #pragma clang diagnostic ignored "-Wreserved-identifier"             // warning: identifier '_Xxx' is reserved because it starts with '_' followed by a capital letter
// #pragma clang diagnostic ignored "-Wunsafe-buffer-usage"             // warning: 'xxx' is an unsafe pointer used for buffer access
// #else
// #if defined(__GNUC__)
// #pragma GCC diagnostic push
// #pragma GCC diagnostic ignored "-Wpragmas"           // warning: unknown option after '#pragma GCC diagnostic' kind
// #pragma GCC diagnostic ignored "-Wclass-memaccess"   // [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
// #endif // #if defined(__GNUC__)
// #endif // #if defined(__clang__)
//-----------------------------------------------------------------------------
// [SECTION] Forward declarations and basic types
//-----------------------------------------------------------------------------

// Auto-generated forward declarations for C header
// Scalar data types      // A unique ID used by widgets (typically the result of hashing a stack of string)          // 8-bit signed integer        // 8-bit unsigned integer        // 16-bit signed integer      // 16-bit unsigned integer          // 32-bit signed integer == int        // 32-bit unsigned integer (often used to store packed colors)    // 64-bit signed integer  // 64-bit unsigned integer

// Forward declarations                                  // Temporary storage to output draw commands out of order, used by ImDrawListSplitter and ImDrawList::ChannelsSplit()                                          // A single draw command within a parent ImDrawList (generally maps to 1 GPU draw call, unless it is a callback)                                        // All draw command lists required to render the frame + pos/size coordinates to use for the projection matrix.
// Targeting imgui\ImDrawListSharedData.java

                    // Data shared among multiple draw lists (typically owned by parent ImGui context, but you may create one yourself)                        // Helper to split a draw list into different layers which can be drawn into out of order, then flattened back.                                        // A single vertex (pos + uv + col = 20 bytes by default. Override layout with IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT)                                                // Runtime data for a single font within a parent ImFontAtlas
// Targeting imgui\ImFontBuilderIO.java

                              // Opaque interface to a font builder (stb_truetype or FreeType).                                    // Configuration data when adding a font or merging fonts                                      // A single font glyph (code point + coordinates within in ImFontAtlas + offset)            // Helper to build glyph ranges from text/string data
// Targeting imgui\ImGuiContext.java

                                    // Dear ImGui context (opaque structure, unless including imgui_internal.h)                                              // Main configuration and I/O between your application and ImGui (also see: ImGuiPlatformIO)        // Shared state of InputText() when using custom ImGuiInputTextCallback (rare/advanced use)                                    // Storage for ImGuiIO and IsKeyDown(), IsKeyPressed() etc functions.                            // Helper to manually clip large list of items                        // Structure to interact with a BeginMultiSelect()/EndMultiSelect() block                                    // User data payload for drag and drop operations                              // Interface between platform/renderer backends and ImGui (e.g. Clipboard, IME, Multi-Viewport support). Extends ImGuiIO.                    // Platform IME data for io.PlatformSetImeDataFn() function.                    // Multi-viewport support: user-provided bounds for each connected monitor/display. Used when positioning popups and tooltips to avoid them straddling monitors        // Optional helper to store multi-selection state + apply multi-selection requests.  //Optional helper to apply multi-selection requests to existing randomly accessible storage.                  // A selection request (stored in ImGuiMultiSelectIO)                  // Callback data when using SetNextWindowSizeConstraints() (rare/advanced use)                                    // Helper for key->value storage (container sorted by key)                            // Helper for key->value storage (pair)                                        // Runtime data for styling/colors                      // Sorting specifications for a table (often handling sort specs for a single column, occasionally more)          // Sorting specification for one column of a table                              // Helper to hold and append into a text buffer (~string builder)                              // Helper to parse and apply text filters (e.g. "aaaaa[,bbbbb][,ccccc]")                                  // A Platform Window (always 1 unless multi-viewport are enabled. One per platform window to output to). In the future may represent Platform Monitor                            // Window class (rare/advanced uses: provide hints to the platform backend via altered viewport flags and parent/child info)

// Enumerations
// - We don't use strongly typed enums much because they add constraints (can't extend in private code, can't store typed in bit fields, extra casting on iteration)
// - Tip: Use your programming IDE navigation facilities on the names in the _central column_ below to find the actual flags/enum lists!
//   - In Visual Studio: CTRL+comma ("Edit.GoToAll") can follow symbols inside comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
//   - In Visual Studio w/ Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols inside comments.
//   - In VS Code, CLion, etc.: CTRL+click can follow symbols inside comments.             // -> enum ImGuiDir              // Enum: A cardinal direction (Left, Right, Up, Down)             // -> enum ImGuiKey              // Enum: A key identifier (ImGuiKey_XXX or ImGuiMod_XXX value)     // -> enum ImGuiMouseSource      // Enum; A mouse input source identifier (Mouse, TouchScreen, Pen)  // -> enum ImGuiSortDirection    // Enum: A sorting direction (ascending or descending)             // -> enum ImGuiCol_             // Enum: A color identifier for styling            // -> enum ImGuiCond_            // Enum: A condition for many Set*() functions        // -> enum ImGuiDataType_        // Enum: A primary data type     // -> enum ImGuiMouseButton_     // Enum: A mouse button identifier (0=left, 1=right, 2=middle)     // -> enum ImGuiMouseCursor_     // Enum: A mouse cursor shape        // -> enum ImGuiStyleVar_        // Enum: A variable identifier for styling   // -> enum ImGuiTableBgTarget_   // Enum: A color target for TableSetBgColor()

// Flags (declared as int to allow using as flags without overhead, and to not pollute the top of this file)
// - Tip: Use your programming IDE navigation facilities on the names in the _central column_ below to find the actual flags/enum lists!
//   - In Visual Studio: CTRL+comma ("Edit.GoToAll") can follow symbols inside comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
//   - In Visual Studio w/ Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols inside comments.
//   - In VS Code, CLion, etc.: CTRL+click can follow symbols inside comments.            // -> enum ImDrawFlags_          // Flags: for ImDrawList functions        // -> enum ImDrawListFlags_      // Flags: for ImDrawList instance       // -> enum ImFontAtlasFlags_     // Flags: for ImFontAtlas build      // -> enum ImGuiBackendFlags_    // Flags: for io.BackendFlags       // -> enum ImGuiButtonFlags_     // Flags: for InvisibleButton()        // -> enum ImGuiChildFlags_      // Flags: for BeginChild()    // -> enum ImGuiColorEditFlags_  // Flags: for ColorEdit4(), ColorPicker4() etc.       // -> enum ImGuiConfigFlags_     // Flags: for io.ConfigFlags        // -> enum ImGuiComboFlags_      // Flags: for BeginCombo()     // -> enum ImGuiDockNodeFlags_   // Flags: for DockSpace()     // -> enum ImGuiDragDropFlags_   // Flags: for BeginDragDropSource(), AcceptDragDropPayload()      // -> enum ImGuiFocusedFlags_    // Flags: for IsWindowFocused()      // -> enum ImGuiHoveredFlags_    // Flags: for IsItemHovered(), IsWindowHovered() etc.        // -> enum ImGuiInputFlags_      // Flags: for Shortcut(), SetNextItemShortcut()    // -> enum ImGuiInputTextFlags_  // Flags: for InputText(), InputTextMultiline()         // -> enum ImGuiItemFlags_       // Flags: for PushItemFlag(), shared by all items          // -> ImGuiKey | ImGuiMod_XXX    // Flags: for IsKeyChordPressed(), Shortcut() etc. an ImGuiKey optionally OR-ed with one or more ImGuiMod_XXX values.        // -> enum ImGuiPopupFlags_      // Flags: for OpenPopup*(), BeginPopupContext*(), IsPopupOpen()  // -> enum ImGuiMultiSelectFlags_// Flags: for BeginMultiSelect()   // -> enum ImGuiSelectableFlags_ // Flags: for Selectable()       // -> enum ImGuiSliderFlags_     // Flags: for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.       // -> enum ImGuiTabBarFlags_     // Flags: for BeginTabBar()      // -> enum ImGuiTabItemFlags_    // Flags: for BeginTabItem()        // -> enum ImGuiTableFlags_      // Flags: For BeginTable()  // -> enum ImGuiTableColumnFlags_// Flags: For TableSetupColumn()     // -> enum ImGuiTableRowFlags_   // Flags: For TableNextRow()     // -> enum ImGuiTreeNodeFlags_   // Flags: for TreeNode(), TreeNodeEx(), CollapsingHeader()     // -> enum ImGuiViewportFlags_   // Flags: for ImGuiViewport
// Targeting imgui\ImTextureID.java

  // Default: store a pointer or an integer fitting in a pointer (most renderer backends are ok with that)
// #endif // #ifndef ImTextureID
// ImDrawIdx: vertex index. [Compile-time configurable type]
// - To use 16-bit indices + allow large meshes: backend need to set 'io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset' and handle ImDrawCmd::VtxOffset (recommended).
// - To use 32-bit indices: override with '#define ImDrawIdx unsigned int' in your imconfig.h file.
// #ifndef ImDrawIdx  // Default: 16-bit (for maximum compatibility with renderer backends)
// #endif // #ifndef ImDrawIdx
// Character types
// (we generally use UTF-8 encoded string in the API. This is storage specifically for a decoded character used for keyboard input and display)        // A single decoded U32 character/code point. We encode them as multi bytes UTF-8 when used in strings.      // A single decoded U16 character/code point. We encode them as multi bytes UTF-8 when used in strings.
// #ifdef IMGUI_USE_WCHAR32
// #else
// #endif// ImWchar [configurable type: override in imconfig.h with '#define IMGUI_USE_WCHAR32' to support Unicode planes 1-16]
// Multi-Selection item index or identifier when using BeginMultiSelect()
// - Used by SetNextItemSelectionUserData() + and inside ImGuiMultiSelectIO structure.
// - Most users are likely to use this store an item INDEX but this may be used to store a POINTER/ID as well. Read comments near ImGuiMultiSelectIO for details.
// Targeting imgui\ImGuiInputTextCallback.java


// Targeting imgui\ImGuiSizeCallback.java


// Targeting imgui\ImGuiMemAllocFunc.java


// Targeting imgui\ImGuiMemFreeFunc.java


// Targeting imgui\ImVec2.java


// Targeting imgui\ImVec4.java


//-----------------------------------------------------------------------------
// [SECTION] Dear ImGui end-user API functions
// (Note that ImGui:: being a namespace, you can add extra ImGui:: functions in your own separate file. Please don't modify imgui source files!)
//-----------------------------------------------------------------------------

// Context creation and access
// - Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between contexts.
// - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()
//   for each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for details.
public static native ImGuiContext ImGui_CreateContext(ImFontAtlas shared_font_atlas);
public static native void ImGui_DestroyContext(ImGuiContext ctx);  // NULL = destroy current context
public static native ImGuiContext ImGui_GetCurrentContext();
public static native void ImGui_SetCurrentContext(ImGuiContext ctx);

// Main
public static native ImGuiIO ImGui_GetIO();          // access the ImGuiIO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)
public static native ImGuiPlatformIO ImGui_GetPlatformIO();  // access the ImGuiPlatformIO structure (mostly hooks/functions to connect to platform/renderer and OS Clipboard, IME etc.)
public static native ImGuiStyle ImGui_GetStyle();       // access the Style structure (colors, sizes). Always use PushStyleColor(), PushStyleVar() to modify style mid-frame!
public static native void ImGui_NewFrame();       // start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().
public static native void ImGui_EndFrame();       // ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!
public static native void ImGui_Render();         // ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData().
public static native ImDrawData ImGui_GetDrawData();    // valid after Render() and until the next call to NewFrame(). this is what you have to render.

// Demo, Debug, Information
public static native void ImGui_ShowDemoWindow(@Cast("bool*") BoolPointer p_open);
public static native void ImGui_ShowDemoWindow(@Cast("bool*") boolean[] p_open);           // create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!
public static native void ImGui_ShowMetricsWindow(@Cast("bool*") BoolPointer p_open);
public static native void ImGui_ShowMetricsWindow(@Cast("bool*") boolean[] p_open);        // create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.
public static native void ImGui_ShowDebugLogWindow(@Cast("bool*") BoolPointer p_open);
public static native void ImGui_ShowDebugLogWindow(@Cast("bool*") boolean[] p_open);       // create Debug Log window. display a simplified log of important dear imgui events.
public static native void ImGui_ShowIDStackToolWindow();                         // Implied p_open = NULL
public static native void ImGui_ShowIDStackToolWindowEx(@Cast("bool*") BoolPointer p_open);
public static native void ImGui_ShowIDStackToolWindowEx(@Cast("bool*") boolean[] p_open);  // create Stack Tool window. hover items with mouse to query information about the source of their unique ID.
public static native void ImGui_ShowAboutWindow(@Cast("bool*") BoolPointer p_open);
public static native void ImGui_ShowAboutWindow(@Cast("bool*") boolean[] p_open);          // create About window. display Dear ImGui version, credits and build/system information.
public static native void ImGui_ShowStyleEditor(ImGuiStyle ref);       // add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)
public static native @Cast("bool") boolean ImGui_ShowStyleSelector(@Cast("const char*") BytePointer label);
public static native @Cast("bool") boolean ImGui_ShowStyleSelector(String label);                // add style selector block (not a window), essentially a combo listing the default styles.
public static native void ImGui_ShowFontSelector(@Cast("const char*") BytePointer label);
public static native void ImGui_ShowFontSelector(String label);                 // add font selector block (not a window), essentially a combo listing the loaded fonts.
public static native void ImGui_ShowUserGuide();                                 // add basic help/info block (not a window): how to manipulate ImGui as an end-user (mouse/keyboard controls).
public static native @Cast("const char*") BytePointer ImGui_GetVersion();                                    // get the compiled version string e.g. "1.80 WIP" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)

// Styles
public static native void ImGui_StyleColorsDark(ImGuiStyle dst);     // new, recommended style (default)
public static native void ImGui_StyleColorsLight(ImGuiStyle dst);    // best used with borders and a custom, thicker font
public static native void ImGui_StyleColorsClassic(ImGuiStyle dst);  // classic imgui style

// Windows
// - Begin() = push window to the stack and start appending to it. End() = pop window from the stack.
// - Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,
//   which clicking will set the boolean to false when clicked.
// - You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.
//   Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().
// - Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting
//   anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!
//   [Important: due to legacy reason, Begin/End and BeginChild/EndChild are inconsistent with all other functions
//    such as BeginMenu/EndMenu, BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding
//    BeginXXX function returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
// - Note that the bottom of window stack always contains a window called "Debug".
public static native @Cast("bool") boolean ImGui_Begin(@Cast("const char*") BytePointer name, @Cast("bool*") BoolPointer p_open, @Cast("ImGuiWindowFlags") int flags);
public static native @Cast("bool") boolean ImGui_Begin(String name, @Cast("bool*") boolean[] p_open, @Cast("ImGuiWindowFlags") int flags);
public static native void ImGui_End();

// Child Windows
// - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.
// - Before 1.90 (November 2023), the "ImGuiChildFlags child_flags = 0" parameter was "bool border = false".
//   This API is backward compatible with old code, as we guarantee that ImGuiChildFlags_Borders == true.
//   Consider updating your old code:
//      BeginChild("Name", size, false)   -> Begin("Name", size, 0); or Begin("Name", size, ImGuiChildFlags_None);
//      BeginChild("Name", size, true)    -> Begin("Name", size, ImGuiChildFlags_Borders);
// - Manual sizing (each axis can use a different setting e.g. ImVec2(0.0f, 400.0f)):
//     == 0.0f: use remaining parent window size for this axis.
//      > 0.0f: use specified size for this axis.
//      < 0.0f: right/bottom-align to specified distance from available content boundaries.
// - Specifying ImGuiChildFlags_AutoResizeX or ImGuiChildFlags_AutoResizeY makes the sizing automatic based on child contents.
//   Combining both ImGuiChildFlags_AutoResizeX _and_ ImGuiChildFlags_AutoResizeY defeats purpose of a scrolling region and is NOT recommended.
// - BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting
//   anything to the window. Always call a matching EndChild() for each BeginChild() call, regardless of its return value.
//   [Important: due to legacy reason, Begin/End and BeginChild/EndChild are inconsistent with all other functions
//    such as BeginMenu/EndMenu, BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding
//    BeginXXX function returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
public static native @Cast("bool") boolean ImGui_BeginChild(@Cast("const char*") BytePointer str_id, @ByVal ImVec2 size, @Cast("ImGuiChildFlags") int child_flags, @Cast("ImGuiWindowFlags") int window_flags);
public static native @Cast("bool") boolean ImGui_BeginChild(String str_id, @ByVal ImVec2 size, @Cast("ImGuiChildFlags") int child_flags, @Cast("ImGuiWindowFlags") int window_flags);
public static native @Cast("bool") boolean ImGui_BeginChildID(@Cast("ImGuiID") int id, @ByVal ImVec2 size, @Cast("ImGuiChildFlags") int child_flags, @Cast("ImGuiWindowFlags") int window_flags);
public static native void ImGui_EndChild();

// Windows Utilities
// - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into.
public static native @Cast("bool") boolean ImGui_IsWindowAppearing();
public static native @Cast("bool") boolean ImGui_IsWindowCollapsed();
public static native @Cast("bool") boolean ImGui_IsWindowFocused(@Cast("ImGuiFocusedFlags") int flags);  // is current window focused? or its root/child, depending on flags. see flags for options.
public static native @Cast("bool") boolean ImGui_IsWindowHovered(@Cast("ImGuiHoveredFlags") int flags);  // is current window hovered and hoverable (e.g. not blocked by a popup/modal)? See ImGuiHoveredFlags_ for options. IMPORTANT: If you are trying to check whether your mouse should be dispatched to Dear ImGui or to your underlying app, you should not use this function! Use the 'io.WantCaptureMouse' boolean for that! Refer to FAQ entry "How can I tell whether to dispatch mouse/keyboard to Dear ImGui or my application?" for details.
public static native ImDrawList ImGui_GetWindowDrawList();                             // get draw list associated to the current window, to append your own drawing primitives
public static native float ImGui_GetWindowDpiScale();                             // get DPI scale currently associated to the current window's viewport.
public static native @ByVal ImVec2 ImGui_GetWindowPos();                                  // get current window position in screen space (IT IS UNLIKELY YOU EVER NEED TO USE THIS. Consider always using GetCursorScreenPos() and GetContentRegionAvail() instead)
public static native @ByVal ImVec2 ImGui_GetWindowSize();                                 // get current window size (IT IS UNLIKELY YOU EVER NEED TO USE THIS. Consider always using GetCursorScreenPos() and GetContentRegionAvail() instead)
public static native float ImGui_GetWindowWidth();                                // get current window width (IT IS UNLIKELY YOU EVER NEED TO USE THIS). Shortcut for GetWindowSize().x.
public static native float ImGui_GetWindowHeight();                               // get current window height (IT IS UNLIKELY YOU EVER NEED TO USE THIS). Shortcut for GetWindowSize().y.
public static native ImGuiViewport ImGui_GetWindowViewport();                             // get viewport currently associated to the current window.

// Window manipulation
// - Prefer using SetNextXXX functions (before Begin) rather that SetXXX functions (after Begin).
public static native void ImGui_SetNextWindowPos(@ByVal ImVec2 pos, @Cast("ImGuiCond") int cond);                                       // Implied pivot = ImVec2(0, 0)
public static native void ImGui_SetNextWindowPosEx(@ByVal ImVec2 pos, @Cast("ImGuiCond") int cond, @ByVal ImVec2 pivot);  // set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.
public static native void ImGui_SetNextWindowSize(@ByVal ImVec2 size, @Cast("ImGuiCond") int cond);                                     // set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()
public static native void ImGui_SetNextWindowSizeConstraints(@ByVal ImVec2 size_min, @ByVal ImVec2 size_max, ImGuiSizeCallback custom_callback, Pointer custom_callback_data); // set next window size limits. use 0.0f or FLT_MAX if you don't want limits. Use -1 for both min and max of same axis to preserve current size (which itself is a constraint). Use callback to apply non-trivial programmatic constraints.
public static native void ImGui_SetNextWindowContentSize(@ByVal ImVec2 size);                                                        // set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()
public static native void ImGui_SetNextWindowCollapsed(@Cast("bool") boolean collapsed, @Cast("ImGuiCond") int cond);                             // set next window collapsed state. call before Begin()
public static native void ImGui_SetNextWindowFocus();                                                                     // set next window to be focused / top-most. call before Begin()
public static native void ImGui_SetNextWindowScroll(@ByVal ImVec2 scroll);                                                           // set next window scrolling value (use < 0.0f to not affect a given axis).
public static native void ImGui_SetNextWindowBgAlpha(float alpha);                                                            // set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.
public static native void ImGui_SetNextWindowViewport(@Cast("ImGuiID") int viewport_id);                                                   // set next window viewport
public static native void ImGui_SetWindowPos(@ByVal ImVec2 pos, @Cast("ImGuiCond") int cond);                                           // (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.
public static native void ImGui_SetWindowSize(@ByVal ImVec2 size, @Cast("ImGuiCond") int cond);                                         // (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.
public static native void ImGui_SetWindowCollapsed(@Cast("bool") boolean collapsed, @Cast("ImGuiCond") int cond);                                 // (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().
public static native void ImGui_SetWindowFocus();                                                                         // (not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus().
public static native void ImGui_SetWindowFontScale(float scale);                                                              // [OBSOLETE] set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes().
public static native void ImGui_SetWindowPosStr(@Cast("const char*") BytePointer name, @ByVal ImVec2 pos, @Cast("ImGuiCond") int cond);
public static native void ImGui_SetWindowPosStr(String name, @ByVal ImVec2 pos, @Cast("ImGuiCond") int cond);                      // set named window position.
public static native void ImGui_SetWindowSizeStr(@Cast("const char*") BytePointer name, @ByVal ImVec2 size, @Cast("ImGuiCond") int cond);
public static native void ImGui_SetWindowSizeStr(String name, @ByVal ImVec2 size, @Cast("ImGuiCond") int cond);                    // set named window size. set axis to 0.0f to force an auto-fit on this axis.
public static native void ImGui_SetWindowCollapsedStr(@Cast("const char*") BytePointer name, @Cast("bool") boolean collapsed, @Cast("ImGuiCond") int cond);
public static native void ImGui_SetWindowCollapsedStr(String name, @Cast("bool") boolean collapsed, @Cast("ImGuiCond") int cond);            // set named window collapsed state
public static native void ImGui_SetWindowFocusStr(@Cast("const char*") BytePointer name);
public static native void ImGui_SetWindowFocusStr(String name);                                                          // set named window to be focused / top-most. use NULL to remove focus.

// Windows Scrolling
// - Any change of Scroll will be applied at the beginning of next frame in the first call to Begin().
// - You may instead use SetNextWindowScroll() prior to calling Begin() to avoid this delay, as an alternative to using SetScrollX()/SetScrollY().
public static native float ImGui_GetScrollX();                                                     // get scrolling amount [0 .. GetScrollMaxX()]
public static native float ImGui_GetScrollY();                                                     // get scrolling amount [0 .. GetScrollMaxY()]
public static native void ImGui_SetScrollX(float scroll_x);                                           // set scrolling amount [0 .. GetScrollMaxX()]
public static native void ImGui_SetScrollY(float scroll_y);                                           // set scrolling amount [0 .. GetScrollMaxY()]
public static native float ImGui_GetScrollMaxX();                                                  // get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x
public static native float ImGui_GetScrollMaxY();                                                  // get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y
public static native void ImGui_SetScrollHereX(float center_x_ratio);                    // adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
public static native void ImGui_SetScrollHereY(float center_y_ratio);                    // adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
public static native void ImGui_SetScrollFromPosX(float local_x, float center_x_ratio);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
public static native void ImGui_SetScrollFromPosY(float local_y, float center_y_ratio);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.

// Parameters stacks (shared)
public static native void ImGui_PushFont(ImFont font);                             // use NULL as a shortcut to push default font
public static native void ImGui_PopFont();
public static native void ImGui_PushStyleColor(@Cast("ImGuiCol") int idx, @Cast("ImU32") int col);            // modify a style color. always use this if you modify the style after NewFrame().
public static native void ImGui_PushStyleColorImVec4(@Cast("ImGuiCol") int idx, @ByVal ImVec4 col);
public static native void ImGui_PopStyleColor();                                // Implied count = 1
public static native void ImGui_PopStyleColorEx(int count);
public static native void ImGui_PushStyleVar(@Cast("ImGuiStyleVar") int idx, float val);         // modify a style float variable. always use this if you modify the style after NewFrame()!
public static native void ImGui_PushStyleVarImVec2(@Cast("ImGuiStyleVar") int idx, @ByVal ImVec2 val);  // modify a style ImVec2 variable. "
public static native void ImGui_PushStyleVarX(@Cast("ImGuiStyleVar") int idx, float val_x);      // modify X component of a style ImVec2 variable. "
public static native void ImGui_PushStyleVarY(@Cast("ImGuiStyleVar") int idx, float val_y);      // modify Y component of a style ImVec2 variable. "
public static native void ImGui_PopStyleVar();                                  // Implied count = 1
public static native void ImGui_PopStyleVarEx(int count);
public static native void ImGui_PushItemFlag(@Cast("ImGuiItemFlags") int option, @Cast("bool") boolean enabled);  // modify specified shared item flag, e.g. PushItemFlag(ImGuiItemFlags_NoTabStop, true)
public static native void ImGui_PopItemFlag();

// Parameters stacks (current window)
public static native void ImGui_PushItemWidth(float item_width);                       // push width of items for common large "item+label" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side).
public static native void ImGui_PopItemWidth();
public static native void ImGui_SetNextItemWidth(float item_width);                    // set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)
public static native float ImGui_CalcItemWidth();                                   // width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.
public static native void ImGui_PushTextWrapPos(float wrap_local_pos_x);  // push word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space
public static native void ImGui_PopTextWrapPos();

// Style read access
// - Use the ShowStyleEditor() function to interactively see/edit the colors.
public static native ImFont ImGui_GetFont();                                                // get current font
public static native float ImGui_GetFontSize();                                            // get current font size (= height in pixels) of current font with current scale applied
public static native @ByVal ImVec2 ImGui_GetFontTexUvWhitePixel();                                 // get UV coordinate for a white pixel, useful to draw custom shapes via the ImDrawList API
public static native @Cast("ImU32") int ImGui_GetColorU32(@Cast("ImGuiCol") int idx);                                    // Implied alpha_mul = 1.0f
public static native @Cast("ImU32") int ImGui_GetColorU32Ex(@Cast("ImGuiCol") int idx, float alpha_mul);    // retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList
public static native @Cast("ImU32") int ImGui_GetColorU32ImVec4(@ByVal ImVec4 col);                                // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
public static native @Cast("ImU32") int ImGui_GetColorU32ImU32(@Cast("ImU32") int col);                                  // Implied alpha_mul = 1.0f
public static native @Cast("ImU32") int ImGui_GetColorU32ImU32Ex(@Cast("ImU32") int col, float alpha_mul);  // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
public static native @Const ImVec4 ImGui_GetStyleColorVec4(@Cast("ImGuiCol") int idx);                              // retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.

// Layout cursor positioning
// - By "cursor" we mean the current output position.
// - The typical widget behavior is to output themselves at the current cursor position, then move the cursor one line down.
// - You can call SameLine() between widgets to undo the last carriage return and output at the right of the preceding widget.
// - YOU CAN DO 99% OF WHAT YOU NEED WITH ONLY GetCursorScreenPos() and GetContentRegionAvail().
// - Attention! We currently have inconsistencies between window-local and absolute positions we will aim to fix with future API:
//    - Absolute coordinate:        GetCursorScreenPos(), SetCursorScreenPos(), all ImDrawList:: functions. -> this is the preferred way forward.
//    - Window-local coordinates:   SameLine(offset), GetCursorPos(), SetCursorPos(), GetCursorStartPos(), PushTextWrapPos()
//    - Window-local coordinates:   GetContentRegionMax(), GetWindowContentRegionMin(), GetWindowContentRegionMax() --> all obsoleted. YOU DON'T NEED THEM.
// - GetCursorScreenPos() = GetCursorPos() + GetWindowPos(). GetWindowPos() is almost only ever useful to convert from window-local to absolute coordinates. Try not to use it.
public static native @ByVal ImVec2 ImGui_GetCursorScreenPos();        // cursor position, absolute coordinates. THIS IS YOUR BEST FRIEND (prefer using this rather than GetCursorPos(), also more useful to work with ImDrawList API).
public static native void ImGui_SetCursorScreenPos(@ByVal ImVec2 pos);  // cursor position, absolute coordinates. THIS IS YOUR BEST FRIEND.
public static native @ByVal ImVec2 ImGui_GetContentRegionAvail();     // available space from current position. THIS IS YOUR BEST FRIEND.
public static native @ByVal ImVec2 ImGui_GetCursorPos();              // [window-local] cursor position in window-local coordinates. This is not your best friend.
public static native float ImGui_GetCursorPosX();             // [window-local] "
public static native float ImGui_GetCursorPosY();             // [window-local] "
public static native void ImGui_SetCursorPos(@ByVal ImVec2 local_pos);  // [window-local] "
public static native void ImGui_SetCursorPosX(float local_x);    // [window-local] "
public static native void ImGui_SetCursorPosY(float local_y);    // [window-local] "
public static native @ByVal ImVec2 ImGui_GetCursorStartPos();         // [window-local] initial cursor position, in window-local coordinates. Call GetCursorScreenPos() after Begin() to get the absolute coordinates version.

// Other layout functions
public static native void ImGui_Separator();                          // separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.
public static native void ImGui_SameLine();                           // Implied offset_from_start_x = 0.0f, spacing = -1.0f
public static native void ImGui_SameLineEx(float offset_from_start_x, float spacing); // call between widgets or groups to layout them horizontally. X position given in window coordinates.
public static native void ImGui_NewLine();                            // undo a SameLine() or force a new line when in a horizontal-layout context.
public static native void ImGui_Spacing();                            // add vertical spacing.
public static native void ImGui_Dummy(@ByVal ImVec2 size);                       // add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.
public static native void ImGui_Indent();                             // Implied indent_w = 0.0f
public static native void ImGui_IndentEx(float indent_w);    // move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0
public static native void ImGui_Unindent();                           // Implied indent_w = 0.0f
public static native void ImGui_UnindentEx(float indent_w);  // move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0
public static native void ImGui_BeginGroup();                         // lock horizontal starting position
public static native void ImGui_EndGroup();                           // unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
public static native void ImGui_AlignTextToFramePadding();            // vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)
public static native float ImGui_GetTextLineHeight();                  // ~ FontSize
public static native float ImGui_GetTextLineHeightWithSpacing();       // ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)
public static native float ImGui_GetFrameHeight();                     // ~ FontSize + style.FramePadding.y * 2
public static native float ImGui_GetFrameHeightWithSpacing();          // ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)

// ID stack/scopes
// Read the FAQ (docs/FAQ.md or http://dearimgui.com/faq) for more details about how ID are handled in dear imgui.
// - Those questions are answered and impacted by understanding of the ID stack system:
//   - "Q: Why is my widget not reacting when I click on it?"
//   - "Q: How can I have widgets with an empty label?"
//   - "Q: How can I have multiple widgets with the same label?"
// - Short version: ID are hashes of the entire ID stack. If you are creating widgets in a loop you most likely
//   want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them.
// - You can also use the "Label##foobar" syntax within widget label to distinguish them from each others.
// - In this header file we use the "label"/"name" terminology to denote a string that will be displayed + used as an ID,
//   whereas "str_id" denote a string that is only used as an ID and not normally displayed.
public static native void ImGui_PushID(@Cast("const char*") BytePointer str_id);
public static native void ImGui_PushID(String str_id);                                   // push string into the ID stack (will hash string).
public static native void ImGui_PushIDStr(@Cast("const char*") BytePointer str_id_begin, @Cast("const char*") BytePointer str_id_end);
public static native void ImGui_PushIDStr(String str_id_begin, String str_id_end);  // push string into the ID stack (will hash string).
public static native void ImGui_PushIDPtr(@Const Pointer ptr_id);                                // push pointer into the ID stack (will hash pointer).
public static native void ImGui_PushIDInt(int int_id);                                        // push integer into the ID stack (will hash integer).
public static native void ImGui_PopID();                                                  // pop from the ID stack.
public static native @Cast("ImGuiID") int ImGui_GetID(@Cast("const char*") BytePointer str_id);
public static native @Cast("ImGuiID") int ImGui_GetID(String str_id);                                    // calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself
public static native @Cast("ImGuiID") int ImGui_GetIDStr(@Cast("const char*") BytePointer str_id_begin, @Cast("const char*") BytePointer str_id_end);
public static native @Cast("ImGuiID") int ImGui_GetIDStr(String str_id_begin, String str_id_end);
public static native @Cast("ImGuiID") int ImGui_GetIDPtr(@Const Pointer ptr_id);
public static native @Cast("ImGuiID") int ImGui_GetIDInt(int int_id);

// Widgets: Text
public static native void ImGui_TextUnformatted(@Cast("const char*") BytePointer text);
public static native void ImGui_TextUnformatted(String text);                                           // Implied text_end = NULL
public static native void ImGui_TextUnformattedEx(@Cast("const char*") BytePointer text, @Cast("const char*") BytePointer text_end);
public static native void ImGui_TextUnformattedEx(String text, String text_end);      // raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.
public static native void ImGui_Text(@Cast("const char*") BytePointer fmt);
public static native void ImGui_Text(String fmt);                                    // formatted text
public static native void ImGui_TextV(@Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_TextV(String fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_TextColored(@ByVal ImVec4 col, @Cast("const char*") BytePointer fmt);
public static native void ImGui_TextColored(@ByVal ImVec4 col, String fmt);                 // shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();
public static native void ImGui_TextColoredV(@ByVal ImVec4 col, @Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_TextColoredV(@ByVal ImVec4 col, String fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_TextDisabled(@Cast("const char*") BytePointer fmt);
public static native void ImGui_TextDisabled(String fmt);                            // shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();
public static native void ImGui_TextDisabledV(@Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_TextDisabledV(String fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_TextWrapped(@Cast("const char*") BytePointer fmt);
public static native void ImGui_TextWrapped(String fmt);                             // shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().
public static native void ImGui_TextWrappedV(@Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_TextWrappedV(String fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_LabelText(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer fmt);
public static native void ImGui_LabelText(String label, String fmt);            // display text+label aligned the same way as value+label widgets
public static native void ImGui_LabelTextV(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_LabelTextV(String label, String fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_BulletText(@Cast("const char*") BytePointer fmt);
public static native void ImGui_BulletText(String fmt);                              // shortcut for Bullet()+Text()
public static native void ImGui_BulletTextV(@Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_BulletTextV(String fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_SeparatorText(@Cast("const char*") BytePointer label);
public static native void ImGui_SeparatorText(String label);                                            // currently: formatted text with an horizontal line

// Widgets: Main
// - Most widgets return true when the value has been changed or when pressed/selected
// - You may also use one of the many IsItemXXX functions (e.g. IsItemActive, IsItemHovered, etc.) to query widget state.
public static native @Cast("bool") boolean ImGui_Button(@Cast("const char*") BytePointer label);
public static native @Cast("bool") boolean ImGui_Button(String label);                                                               // Implied size = ImVec2(0, 0)
public static native @Cast("bool") boolean ImGui_ButtonEx(@Cast("const char*") BytePointer label, @ByVal ImVec2 size);
public static native @Cast("bool") boolean ImGui_ButtonEx(String label, @ByVal ImVec2 size);                           // button
public static native @Cast("bool") boolean ImGui_SmallButton(@Cast("const char*") BytePointer label);
public static native @Cast("bool") boolean ImGui_SmallButton(String label);                                                          // button with (FramePadding.y == 0) to easily embed within text
public static native @Cast("bool") boolean ImGui_InvisibleButton(@Cast("const char*") BytePointer str_id, @ByVal ImVec2 size, @Cast("ImGuiButtonFlags") int flags);
public static native @Cast("bool") boolean ImGui_InvisibleButton(String str_id, @ByVal ImVec2 size, @Cast("ImGuiButtonFlags") int flags);      // flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
public static native @Cast("bool") boolean ImGui_ArrowButton(@Cast("const char*") BytePointer str_id, @Cast("ImGuiDir") int dir);
public static native @Cast("bool") boolean ImGui_ArrowButton(String str_id, @Cast("ImGuiDir") int dir);                                           // square button with an arrow shape
public static native @Cast("bool") boolean ImGui_Checkbox(@Cast("const char*") BytePointer label, @Cast("bool*") BoolPointer v);
public static native @Cast("bool") boolean ImGui_Checkbox(String label, @Cast("bool*") boolean[] v);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsIntPtr(@Cast("const char*") BytePointer label, IntPointer flags, int flags_value);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsIntPtr(String label, IntBuffer flags, int flags_value);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsIntPtr(@Cast("const char*") BytePointer label, int[] flags, int flags_value);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsIntPtr(String label, IntPointer flags, int flags_value);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsIntPtr(@Cast("const char*") BytePointer label, IntBuffer flags, int flags_value);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsIntPtr(String label, int[] flags, int flags_value);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsUintPtr(@Cast("const char*") BytePointer label, @Cast("unsigned int*") IntPointer flags, @Cast("unsigned int") int flags_value);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsUintPtr(String label, @Cast("unsigned int*") IntBuffer flags, @Cast("unsigned int") int flags_value);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsUintPtr(@Cast("const char*") BytePointer label, @Cast("unsigned int*") int[] flags, @Cast("unsigned int") int flags_value);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsUintPtr(String label, @Cast("unsigned int*") IntPointer flags, @Cast("unsigned int") int flags_value);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsUintPtr(@Cast("const char*") BytePointer label, @Cast("unsigned int*") IntBuffer flags, @Cast("unsigned int") int flags_value);
public static native @Cast("bool") boolean ImGui_CheckboxFlagsUintPtr(String label, @Cast("unsigned int*") int[] flags, @Cast("unsigned int") int flags_value);
public static native @Cast("bool") boolean ImGui_RadioButton(@Cast("const char*") BytePointer label, @Cast("bool") boolean active);
public static native @Cast("bool") boolean ImGui_RadioButton(String label, @Cast("bool") boolean active);                                             // use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }
public static native @Cast("bool") boolean ImGui_RadioButtonIntPtr(@Cast("const char*") BytePointer label, IntPointer v, int v_button);
public static native @Cast("bool") boolean ImGui_RadioButtonIntPtr(String label, IntBuffer v, int v_button);
public static native @Cast("bool") boolean ImGui_RadioButtonIntPtr(@Cast("const char*") BytePointer label, int[] v, int v_button);
public static native @Cast("bool") boolean ImGui_RadioButtonIntPtr(String label, IntPointer v, int v_button);
public static native @Cast("bool") boolean ImGui_RadioButtonIntPtr(@Cast("const char*") BytePointer label, IntBuffer v, int v_button);
public static native @Cast("bool") boolean ImGui_RadioButtonIntPtr(String label, int[] v, int v_button);                              // shortcut to handle the above pattern when value is an integer
public static native void ImGui_ProgressBar(float fraction, @ByVal ImVec2 size_arg, @Cast("const char*") BytePointer overlay);
public static native void ImGui_ProgressBar(float fraction, @ByVal ImVec2 size_arg, String overlay);
public static native void ImGui_Bullet();                                                                            // draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses
public static native @Cast("bool") boolean ImGui_TextLink(@Cast("const char*") BytePointer label);
public static native @Cast("bool") boolean ImGui_TextLink(String label);                                                             // hyperlink text button, return true when clicked
public static native void ImGui_TextLinkOpenURL(@Cast("const char*") BytePointer label);
public static native void ImGui_TextLinkOpenURL(String label);                                                      // Implied url = NULL
public static native void ImGui_TextLinkOpenURLEx(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer url);
public static native void ImGui_TextLinkOpenURLEx(String label, String url);                      // hyperlink text button, automatically open file/url when clicked

// Widgets: Images
// - Read about ImTextureID here: https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples
// - 'uv0' and 'uv1' are texture coordinates. Read about them from the same link above.
// - Note that Image() may add +2.0f to provided size if a border is visible, ImageButton() adds style.FramePadding*2.0f to provided size.
public static native void ImGui_Image(ImTextureID user_texture_id, @ByVal ImVec2 image_size);                            // Implied uv0 = ImVec2(0, 0), uv1 = ImVec2(1, 1), tint_col = ImVec4(1, 1, 1, 1), border_col = ImVec4(0, 0, 0, 0)
public static native void ImGui_ImageEx(ImTextureID user_texture_id, @ByVal ImVec2 image_size, @ByVal ImVec2 uv0, @ByVal ImVec2 uv1, @ByVal ImVec4 tint_col, @ByVal ImVec4 border_col);
public static native @Cast("bool") boolean ImGui_ImageButton(@Cast("const char*") BytePointer str_id, ImTextureID user_texture_id, @ByVal ImVec2 image_size);
public static native @Cast("bool") boolean ImGui_ImageButton(String str_id, ImTextureID user_texture_id, @ByVal ImVec2 image_size);  // Implied uv0 = ImVec2(0, 0), uv1 = ImVec2(1, 1), bg_col = ImVec4(0, 0, 0, 0), tint_col = ImVec4(1, 1, 1, 1)
public static native @Cast("bool") boolean ImGui_ImageButtonEx(@Cast("const char*") BytePointer str_id, ImTextureID user_texture_id, @ByVal ImVec2 image_size, @ByVal ImVec2 uv0, @ByVal ImVec2 uv1, @ByVal ImVec4 bg_col, @ByVal ImVec4 tint_col);
public static native @Cast("bool") boolean ImGui_ImageButtonEx(String str_id, ImTextureID user_texture_id, @ByVal ImVec2 image_size, @ByVal ImVec2 uv0, @ByVal ImVec2 uv1, @ByVal ImVec4 bg_col, @ByVal ImVec4 tint_col);

// Widgets: Combo Box (Dropdown)
// - The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.
// - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose. This is analogous to how ListBox are created.
public static native @Cast("bool") boolean ImGui_BeginCombo(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer preview_value, @Cast("ImGuiComboFlags") int flags);
public static native @Cast("bool") boolean ImGui_BeginCombo(String label, String preview_value, @Cast("ImGuiComboFlags") int flags);
public static native void ImGui_EndCombo();                                                                                                                          // only call EndCombo() if BeginCombo() returns true!
public static native @Cast("bool") boolean ImGui_ComboChar(@Cast("const char*") BytePointer label, IntPointer current_item, @Cast("const char*const*") PointerPointer items, int items_count);
public static native @Cast("bool") boolean ImGui_ComboChar(@Cast("const char*") BytePointer label, IntPointer current_item, @Cast("const char*const*") @ByPtrPtr BytePointer items, int items_count);
public static native @Cast("bool") boolean ImGui_ComboChar(String label, IntBuffer current_item, @Cast("const char*const*") @ByPtrPtr ByteBuffer items, int items_count);
public static native @Cast("bool") boolean ImGui_ComboChar(@Cast("const char*") BytePointer label, int[] current_item, @Cast("const char*const*") @ByPtrPtr byte[] items, int items_count);
public static native @Cast("bool") boolean ImGui_ComboChar(String label, IntPointer current_item, @Cast("const char*const*") @ByPtrPtr BytePointer items, int items_count);
public static native @Cast("bool") boolean ImGui_ComboChar(@Cast("const char*") BytePointer label, IntBuffer current_item, @Cast("const char*const*") @ByPtrPtr ByteBuffer items, int items_count);
public static native @Cast("bool") boolean ImGui_ComboChar(String label, int[] current_item, @Cast("const char*const*") @ByPtrPtr byte[] items, int items_count);                                              // Implied popup_max_height_in_items = -1
public static native @Cast("bool") boolean ImGui_ComboCharEx(@Cast("const char*") BytePointer label, IntPointer current_item, @Cast("const char*const*") PointerPointer items, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboCharEx(@Cast("const char*") BytePointer label, IntPointer current_item, @Cast("const char*const*") @ByPtrPtr BytePointer items, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboCharEx(String label, IntBuffer current_item, @Cast("const char*const*") @ByPtrPtr ByteBuffer items, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboCharEx(@Cast("const char*") BytePointer label, int[] current_item, @Cast("const char*const*") @ByPtrPtr byte[] items, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboCharEx(String label, IntPointer current_item, @Cast("const char*const*") @ByPtrPtr BytePointer items, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboCharEx(@Cast("const char*") BytePointer label, IntBuffer current_item, @Cast("const char*const*") @ByPtrPtr ByteBuffer items, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboCharEx(String label, int[] current_item, @Cast("const char*const*") @ByPtrPtr byte[] items, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_Combo(@Cast("const char*") BytePointer label, IntPointer current_item, @Cast("const char*") BytePointer items_separated_by_zeros);
public static native @Cast("bool") boolean ImGui_Combo(String label, IntBuffer current_item, String items_separated_by_zeros);
public static native @Cast("bool") boolean ImGui_Combo(@Cast("const char*") BytePointer label, int[] current_item, @Cast("const char*") BytePointer items_separated_by_zeros);
public static native @Cast("bool") boolean ImGui_Combo(String label, IntPointer current_item, String items_separated_by_zeros);
public static native @Cast("bool") boolean ImGui_Combo(@Cast("const char*") BytePointer label, IntBuffer current_item, @Cast("const char*") BytePointer items_separated_by_zeros);
public static native @Cast("bool") boolean ImGui_Combo(String label, int[] current_item, String items_separated_by_zeros);                                                       // Implied popup_max_height_in_items = -1
public static native @Cast("bool") boolean ImGui_ComboEx(@Cast("const char*") BytePointer label, IntPointer current_item, @Cast("const char*") BytePointer items_separated_by_zeros, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboEx(String label, IntBuffer current_item, String items_separated_by_zeros, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboEx(@Cast("const char*") BytePointer label, int[] current_item, @Cast("const char*") BytePointer items_separated_by_zeros, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboEx(String label, IntPointer current_item, String items_separated_by_zeros, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboEx(@Cast("const char*") BytePointer label, IntBuffer current_item, @Cast("const char*") BytePointer items_separated_by_zeros, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboEx(String label, int[] current_item, String items_separated_by_zeros, int popup_max_height_in_items);
// Targeting imgui\Getter_Pointer_int.java


public static native @Cast("bool") boolean ImGui_ComboCallback(@Cast("const char*") BytePointer label, IntPointer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ComboCallback(String label, IntBuffer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ComboCallback(@Cast("const char*") BytePointer label, int[] current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ComboCallback(String label, IntPointer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ComboCallback(@Cast("const char*") BytePointer label, IntBuffer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ComboCallback(String label, int[] current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);  // Implied popup_max_height_in_items = -1
public static native @Cast("bool") boolean ImGui_ComboCallbackEx(@Cast("const char*") BytePointer label, IntPointer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboCallbackEx(String label, IntBuffer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboCallbackEx(@Cast("const char*") BytePointer label, int[] current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboCallbackEx(String label, IntPointer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboCallbackEx(@Cast("const char*") BytePointer label, IntBuffer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboCallbackEx(String label, int[] current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int popup_max_height_in_items);

// Widgets: Drag Sliders
// - CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp.
// - For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every function, note that a 'float v[X]' function argument is the same as 'float* v',
//   the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &myvector.x
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Format string may also be set to NULL or use the default format ("%f" or "%d").
// - Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For gamepad/keyboard navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision).
// - Use v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual input can override those limits if ImGuiSliderFlags_AlwaysClamp is not used.
// - Use v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with v_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.
// - We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.
// - Legacy: Pre-1.78 there are DragXXX() function signatures that take a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
public static native @Cast("bool") boolean ImGui_DragFloat(@Cast("const char*") BytePointer label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_DragFloat(String label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_DragFloat(@Cast("const char*") BytePointer label, float[] v);
public static native @Cast("bool") boolean ImGui_DragFloat(String label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_DragFloat(@Cast("const char*") BytePointer label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_DragFloat(String label, float[] v);                                                 // Implied v_speed = 1.0f, v_min = 0.0f, v_max = 0.0f, format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_DragFloatEx(@Cast("const char*") BytePointer label, FloatPointer v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloatEx(String label, FloatBuffer v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloatEx(@Cast("const char*") BytePointer label, float[] v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloatEx(String label, FloatPointer v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloatEx(@Cast("const char*") BytePointer label, FloatBuffer v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloatEx(String label, float[] v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags); // If v_min >= v_max we have no bound
public static native @Cast("bool") boolean ImGui_DragFloat2(@Cast("const char*") BytePointer label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_DragFloat2(String label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_DragFloat2(@Cast("const char*") BytePointer label, float[] v);
public static native @Cast("bool") boolean ImGui_DragFloat2(String label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_DragFloat2(@Cast("const char*") BytePointer label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_DragFloat2(String label, float[] v);                                              // Implied v_speed = 1.0f, v_min = 0.0f, v_max = 0.0f, format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_DragFloat2Ex(@Cast("const char*") BytePointer label, FloatPointer v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat2Ex(String label, FloatBuffer v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat2Ex(@Cast("const char*") BytePointer label, float[] v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat2Ex(String label, FloatPointer v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat2Ex(@Cast("const char*") BytePointer label, FloatBuffer v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat2Ex(String label, float[] v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat3(@Cast("const char*") BytePointer label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_DragFloat3(String label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_DragFloat3(@Cast("const char*") BytePointer label, float[] v);
public static native @Cast("bool") boolean ImGui_DragFloat3(String label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_DragFloat3(@Cast("const char*") BytePointer label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_DragFloat3(String label, float[] v);                                              // Implied v_speed = 1.0f, v_min = 0.0f, v_max = 0.0f, format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_DragFloat3Ex(@Cast("const char*") BytePointer label, FloatPointer v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat3Ex(String label, FloatBuffer v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat3Ex(@Cast("const char*") BytePointer label, float[] v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat3Ex(String label, FloatPointer v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat3Ex(@Cast("const char*") BytePointer label, FloatBuffer v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat3Ex(String label, float[] v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat4(@Cast("const char*") BytePointer label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_DragFloat4(String label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_DragFloat4(@Cast("const char*") BytePointer label, float[] v);
public static native @Cast("bool") boolean ImGui_DragFloat4(String label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_DragFloat4(@Cast("const char*") BytePointer label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_DragFloat4(String label, float[] v);                                              // Implied v_speed = 1.0f, v_min = 0.0f, v_max = 0.0f, format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_DragFloat4Ex(@Cast("const char*") BytePointer label, FloatPointer v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat4Ex(String label, FloatBuffer v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat4Ex(@Cast("const char*") BytePointer label, float[] v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat4Ex(String label, FloatPointer v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat4Ex(@Cast("const char*") BytePointer label, FloatBuffer v, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloat4Ex(String label, float[] v, float v_speed, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloatRange2(@Cast("const char*") BytePointer label, FloatPointer v_current_min, FloatPointer v_current_max);
public static native @Cast("bool") boolean ImGui_DragFloatRange2(String label, FloatBuffer v_current_min, FloatBuffer v_current_max);
public static native @Cast("bool") boolean ImGui_DragFloatRange2(@Cast("const char*") BytePointer label, float[] v_current_min, float[] v_current_max);
public static native @Cast("bool") boolean ImGui_DragFloatRange2(String label, FloatPointer v_current_min, FloatPointer v_current_max);
public static native @Cast("bool") boolean ImGui_DragFloatRange2(@Cast("const char*") BytePointer label, FloatBuffer v_current_min, FloatBuffer v_current_max);
public static native @Cast("bool") boolean ImGui_DragFloatRange2(String label, float[] v_current_min, float[] v_current_max);         // Implied v_speed = 1.0f, v_min = 0.0f, v_max = 0.0f, format = "%.3f", format_max = NULL, flags = 0
public static native @Cast("bool") boolean ImGui_DragFloatRange2Ex(@Cast("const char*") BytePointer label, FloatPointer v_current_min, FloatPointer v_current_max, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("const char*") BytePointer format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloatRange2Ex(String label, FloatBuffer v_current_min, FloatBuffer v_current_max, float v_speed, float v_min, float v_max, String format, String format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloatRange2Ex(@Cast("const char*") BytePointer label, float[] v_current_min, float[] v_current_max, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("const char*") BytePointer format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloatRange2Ex(String label, FloatPointer v_current_min, FloatPointer v_current_max, float v_speed, float v_min, float v_max, String format, String format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloatRange2Ex(@Cast("const char*") BytePointer label, FloatBuffer v_current_min, FloatBuffer v_current_max, float v_speed, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("const char*") BytePointer format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragFloatRange2Ex(String label, float[] v_current_min, float[] v_current_max, float v_speed, float v_min, float v_max, String format, String format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt(@Cast("const char*") BytePointer label, IntPointer v);
public static native @Cast("bool") boolean ImGui_DragInt(String label, IntBuffer v);
public static native @Cast("bool") boolean ImGui_DragInt(@Cast("const char*") BytePointer label, int[] v);
public static native @Cast("bool") boolean ImGui_DragInt(String label, IntPointer v);
public static native @Cast("bool") boolean ImGui_DragInt(@Cast("const char*") BytePointer label, IntBuffer v);
public static native @Cast("bool") boolean ImGui_DragInt(String label, int[] v);                                                     // Implied v_speed = 1.0f, v_min = 0, v_max = 0, format = "%d", flags = 0
public static native @Cast("bool") boolean ImGui_DragIntEx(@Cast("const char*") BytePointer label, IntPointer v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragIntEx(String label, IntBuffer v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragIntEx(@Cast("const char*") BytePointer label, int[] v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragIntEx(String label, IntPointer v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragIntEx(@Cast("const char*") BytePointer label, IntBuffer v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragIntEx(String label, int[] v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags); // If v_min >= v_max we have no bound
public static native @Cast("bool") boolean ImGui_DragInt2(@Cast("const char*") BytePointer label, IntPointer v);
public static native @Cast("bool") boolean ImGui_DragInt2(String label, IntBuffer v);
public static native @Cast("bool") boolean ImGui_DragInt2(@Cast("const char*") BytePointer label, int[] v);
public static native @Cast("bool") boolean ImGui_DragInt2(String label, IntPointer v);
public static native @Cast("bool") boolean ImGui_DragInt2(@Cast("const char*") BytePointer label, IntBuffer v);
public static native @Cast("bool") boolean ImGui_DragInt2(String label, int[] v);                                                  // Implied v_speed = 1.0f, v_min = 0, v_max = 0, format = "%d", flags = 0
public static native @Cast("bool") boolean ImGui_DragInt2Ex(@Cast("const char*") BytePointer label, IntPointer v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt2Ex(String label, IntBuffer v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt2Ex(@Cast("const char*") BytePointer label, int[] v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt2Ex(String label, IntPointer v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt2Ex(@Cast("const char*") BytePointer label, IntBuffer v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt2Ex(String label, int[] v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt3(@Cast("const char*") BytePointer label, IntPointer v);
public static native @Cast("bool") boolean ImGui_DragInt3(String label, IntBuffer v);
public static native @Cast("bool") boolean ImGui_DragInt3(@Cast("const char*") BytePointer label, int[] v);
public static native @Cast("bool") boolean ImGui_DragInt3(String label, IntPointer v);
public static native @Cast("bool") boolean ImGui_DragInt3(@Cast("const char*") BytePointer label, IntBuffer v);
public static native @Cast("bool") boolean ImGui_DragInt3(String label, int[] v);                                                  // Implied v_speed = 1.0f, v_min = 0, v_max = 0, format = "%d", flags = 0
public static native @Cast("bool") boolean ImGui_DragInt3Ex(@Cast("const char*") BytePointer label, IntPointer v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt3Ex(String label, IntBuffer v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt3Ex(@Cast("const char*") BytePointer label, int[] v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt3Ex(String label, IntPointer v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt3Ex(@Cast("const char*") BytePointer label, IntBuffer v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt3Ex(String label, int[] v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt4(@Cast("const char*") BytePointer label, IntPointer v);
public static native @Cast("bool") boolean ImGui_DragInt4(String label, IntBuffer v);
public static native @Cast("bool") boolean ImGui_DragInt4(@Cast("const char*") BytePointer label, int[] v);
public static native @Cast("bool") boolean ImGui_DragInt4(String label, IntPointer v);
public static native @Cast("bool") boolean ImGui_DragInt4(@Cast("const char*") BytePointer label, IntBuffer v);
public static native @Cast("bool") boolean ImGui_DragInt4(String label, int[] v);                                                  // Implied v_speed = 1.0f, v_min = 0, v_max = 0, format = "%d", flags = 0
public static native @Cast("bool") boolean ImGui_DragInt4Ex(@Cast("const char*") BytePointer label, IntPointer v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt4Ex(String label, IntBuffer v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt4Ex(@Cast("const char*") BytePointer label, int[] v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt4Ex(String label, IntPointer v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt4Ex(@Cast("const char*") BytePointer label, IntBuffer v, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragInt4Ex(String label, int[] v, float v_speed, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragIntRange2(@Cast("const char*") BytePointer label, IntPointer v_current_min, IntPointer v_current_max);
public static native @Cast("bool") boolean ImGui_DragIntRange2(String label, IntBuffer v_current_min, IntBuffer v_current_max);
public static native @Cast("bool") boolean ImGui_DragIntRange2(@Cast("const char*") BytePointer label, int[] v_current_min, int[] v_current_max);
public static native @Cast("bool") boolean ImGui_DragIntRange2(String label, IntPointer v_current_min, IntPointer v_current_max);
public static native @Cast("bool") boolean ImGui_DragIntRange2(@Cast("const char*") BytePointer label, IntBuffer v_current_min, IntBuffer v_current_max);
public static native @Cast("bool") boolean ImGui_DragIntRange2(String label, int[] v_current_min, int[] v_current_max);               // Implied v_speed = 1.0f, v_min = 0, v_max = 0, format = "%d", format_max = NULL, flags = 0
public static native @Cast("bool") boolean ImGui_DragIntRange2Ex(@Cast("const char*") BytePointer label, IntPointer v_current_min, IntPointer v_current_max, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("const char*") BytePointer format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragIntRange2Ex(String label, IntBuffer v_current_min, IntBuffer v_current_max, float v_speed, int v_min, int v_max, String format, String format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragIntRange2Ex(@Cast("const char*") BytePointer label, int[] v_current_min, int[] v_current_max, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("const char*") BytePointer format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragIntRange2Ex(String label, IntPointer v_current_min, IntPointer v_current_max, float v_speed, int v_min, int v_max, String format, String format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragIntRange2Ex(@Cast("const char*") BytePointer label, IntBuffer v_current_min, IntBuffer v_current_max, float v_speed, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("const char*") BytePointer format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragIntRange2Ex(String label, int[] v_current_min, int[] v_current_max, float v_speed, int v_min, int v_max, String format, String format_max, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragScalar(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data);
public static native @Cast("bool") boolean ImGui_DragScalar(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data);                   // Implied v_speed = 1.0f, p_min = NULL, p_max = NULL, format = NULL, flags = 0
public static native @Cast("bool") boolean ImGui_DragScalarEx(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data, float v_speed, @Const Pointer p_min, @Const Pointer p_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragScalarEx(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data, float v_speed, @Const Pointer p_min, @Const Pointer p_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragScalarN(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components);
public static native @Cast("bool") boolean ImGui_DragScalarN(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components);  // Implied v_speed = 1.0f, p_min = NULL, p_max = NULL, format = NULL, flags = 0
public static native @Cast("bool") boolean ImGui_DragScalarNEx(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components, float v_speed, @Const Pointer p_min, @Const Pointer p_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_DragScalarNEx(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components, float v_speed, @Const Pointer p_min, @Const Pointer p_max, String format, @Cast("ImGuiSliderFlags") int flags);

// Widgets: Regular Sliders
// - CTRL+Click on any slider to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp.
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Format string may also be set to NULL or use the default format ("%f" or "%d").
// - Legacy: Pre-1.78 there are SliderXXX() function signatures that take a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
public static native @Cast("bool") boolean ImGui_SliderFloat(@Cast("const char*") BytePointer label, FloatPointer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat(String label, FloatBuffer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat(@Cast("const char*") BytePointer label, float[] v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat(String label, FloatPointer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat(@Cast("const char*") BytePointer label, FloatBuffer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat(String label, float[] v, float v_min, float v_max);                                                                                       // Implied format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_SliderFloatEx(@Cast("const char*") BytePointer label, FloatPointer v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloatEx(String label, FloatBuffer v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloatEx(@Cast("const char*") BytePointer label, float[] v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloatEx(String label, FloatPointer v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloatEx(@Cast("const char*") BytePointer label, FloatBuffer v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloatEx(String label, float[] v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);                // adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display.
public static native @Cast("bool") boolean ImGui_SliderFloat2(@Cast("const char*") BytePointer label, FloatPointer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat2(String label, FloatBuffer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat2(@Cast("const char*") BytePointer label, float[] v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat2(String label, FloatPointer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat2(@Cast("const char*") BytePointer label, FloatBuffer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat2(String label, float[] v, float v_min, float v_max);                                                                                    // Implied format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_SliderFloat2Ex(@Cast("const char*") BytePointer label, FloatPointer v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat2Ex(String label, FloatBuffer v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat2Ex(@Cast("const char*") BytePointer label, float[] v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat2Ex(String label, FloatPointer v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat2Ex(@Cast("const char*") BytePointer label, FloatBuffer v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat2Ex(String label, float[] v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat3(@Cast("const char*") BytePointer label, FloatPointer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat3(String label, FloatBuffer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat3(@Cast("const char*") BytePointer label, float[] v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat3(String label, FloatPointer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat3(@Cast("const char*") BytePointer label, FloatBuffer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat3(String label, float[] v, float v_min, float v_max);                                                                                    // Implied format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_SliderFloat3Ex(@Cast("const char*") BytePointer label, FloatPointer v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat3Ex(String label, FloatBuffer v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat3Ex(@Cast("const char*") BytePointer label, float[] v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat3Ex(String label, FloatPointer v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat3Ex(@Cast("const char*") BytePointer label, FloatBuffer v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat3Ex(String label, float[] v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat4(@Cast("const char*") BytePointer label, FloatPointer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat4(String label, FloatBuffer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat4(@Cast("const char*") BytePointer label, float[] v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat4(String label, FloatPointer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat4(@Cast("const char*") BytePointer label, FloatBuffer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_SliderFloat4(String label, float[] v, float v_min, float v_max);                                                                                    // Implied format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_SliderFloat4Ex(@Cast("const char*") BytePointer label, FloatPointer v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat4Ex(String label, FloatBuffer v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat4Ex(@Cast("const char*") BytePointer label, float[] v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat4Ex(String label, FloatPointer v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat4Ex(@Cast("const char*") BytePointer label, FloatBuffer v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderFloat4Ex(String label, float[] v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderAngle(@Cast("const char*") BytePointer label, FloatPointer v_rad);
public static native @Cast("bool") boolean ImGui_SliderAngle(String label, FloatBuffer v_rad);
public static native @Cast("bool") boolean ImGui_SliderAngle(@Cast("const char*") BytePointer label, float[] v_rad);
public static native @Cast("bool") boolean ImGui_SliderAngle(String label, FloatPointer v_rad);
public static native @Cast("bool") boolean ImGui_SliderAngle(@Cast("const char*") BytePointer label, FloatBuffer v_rad);
public static native @Cast("bool") boolean ImGui_SliderAngle(String label, float[] v_rad);                                                                                                             // Implied v_degrees_min = -360.0f, v_degrees_max = +360.0f, format = "%.0f deg", flags = 0
public static native @Cast("bool") boolean ImGui_SliderAngleEx(@Cast("const char*") BytePointer label, FloatPointer v_rad, float v_degrees_min, float v_degrees_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderAngleEx(String label, FloatBuffer v_rad, float v_degrees_min, float v_degrees_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderAngleEx(@Cast("const char*") BytePointer label, float[] v_rad, float v_degrees_min, float v_degrees_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderAngleEx(String label, FloatPointer v_rad, float v_degrees_min, float v_degrees_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderAngleEx(@Cast("const char*") BytePointer label, FloatBuffer v_rad, float v_degrees_min, float v_degrees_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderAngleEx(String label, float[] v_rad, float v_degrees_min, float v_degrees_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt(@Cast("const char*") BytePointer label, IntPointer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt(String label, IntBuffer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt(@Cast("const char*") BytePointer label, int[] v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt(String label, IntPointer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt(@Cast("const char*") BytePointer label, IntBuffer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt(String label, int[] v, int v_min, int v_max);                                                                                               // Implied format = "%d", flags = 0
public static native @Cast("bool") boolean ImGui_SliderIntEx(@Cast("const char*") BytePointer label, IntPointer v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderIntEx(String label, IntBuffer v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderIntEx(@Cast("const char*") BytePointer label, int[] v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderIntEx(String label, IntPointer v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderIntEx(@Cast("const char*") BytePointer label, IntBuffer v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderIntEx(String label, int[] v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt2(@Cast("const char*") BytePointer label, IntPointer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt2(String label, IntBuffer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt2(@Cast("const char*") BytePointer label, int[] v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt2(String label, IntPointer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt2(@Cast("const char*") BytePointer label, IntBuffer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt2(String label, int[] v, int v_min, int v_max);                                                                                            // Implied format = "%d", flags = 0
public static native @Cast("bool") boolean ImGui_SliderInt2Ex(@Cast("const char*") BytePointer label, IntPointer v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt2Ex(String label, IntBuffer v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt2Ex(@Cast("const char*") BytePointer label, int[] v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt2Ex(String label, IntPointer v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt2Ex(@Cast("const char*") BytePointer label, IntBuffer v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt2Ex(String label, int[] v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt3(@Cast("const char*") BytePointer label, IntPointer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt3(String label, IntBuffer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt3(@Cast("const char*") BytePointer label, int[] v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt3(String label, IntPointer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt3(@Cast("const char*") BytePointer label, IntBuffer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt3(String label, int[] v, int v_min, int v_max);                                                                                            // Implied format = "%d", flags = 0
public static native @Cast("bool") boolean ImGui_SliderInt3Ex(@Cast("const char*") BytePointer label, IntPointer v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt3Ex(String label, IntBuffer v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt3Ex(@Cast("const char*") BytePointer label, int[] v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt3Ex(String label, IntPointer v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt3Ex(@Cast("const char*") BytePointer label, IntBuffer v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt3Ex(String label, int[] v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt4(@Cast("const char*") BytePointer label, IntPointer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt4(String label, IntBuffer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt4(@Cast("const char*") BytePointer label, int[] v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt4(String label, IntPointer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt4(@Cast("const char*") BytePointer label, IntBuffer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_SliderInt4(String label, int[] v, int v_min, int v_max);                                                                                            // Implied format = "%d", flags = 0
public static native @Cast("bool") boolean ImGui_SliderInt4Ex(@Cast("const char*") BytePointer label, IntPointer v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt4Ex(String label, IntBuffer v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt4Ex(@Cast("const char*") BytePointer label, int[] v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt4Ex(String label, IntPointer v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt4Ex(@Cast("const char*") BytePointer label, IntBuffer v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderInt4Ex(String label, int[] v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderScalar(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data, @Const Pointer p_min, @Const Pointer p_max);
public static native @Cast("bool") boolean ImGui_SliderScalar(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data, @Const Pointer p_min, @Const Pointer p_max);                                             // Implied format = NULL, flags = 0
public static native @Cast("bool") boolean ImGui_SliderScalarEx(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data, @Const Pointer p_min, @Const Pointer p_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderScalarEx(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data, @Const Pointer p_min, @Const Pointer p_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderScalarN(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components, @Const Pointer p_min, @Const Pointer p_max);
public static native @Cast("bool") boolean ImGui_SliderScalarN(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components, @Const Pointer p_min, @Const Pointer p_max);                            // Implied format = NULL, flags = 0
public static native @Cast("bool") boolean ImGui_SliderScalarNEx(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components, @Const Pointer p_min, @Const Pointer p_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_SliderScalarNEx(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components, @Const Pointer p_min, @Const Pointer p_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderFloat(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, FloatPointer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_VSliderFloat(String label, @ByVal ImVec2 size, FloatBuffer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_VSliderFloat(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, float[] v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_VSliderFloat(String label, @ByVal ImVec2 size, FloatPointer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_VSliderFloat(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, FloatBuffer v, float v_min, float v_max);
public static native @Cast("bool") boolean ImGui_VSliderFloat(String label, @ByVal ImVec2 size, float[] v, float v_min, float v_max);                                                                         // Implied format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_VSliderFloatEx(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, FloatPointer v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderFloatEx(String label, @ByVal ImVec2 size, FloatBuffer v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderFloatEx(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, float[] v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderFloatEx(String label, @ByVal ImVec2 size, FloatPointer v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderFloatEx(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, FloatBuffer v, float v_min, float v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderFloatEx(String label, @ByVal ImVec2 size, float[] v, float v_min, float v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderInt(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, IntPointer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_VSliderInt(String label, @ByVal ImVec2 size, IntBuffer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_VSliderInt(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, int[] v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_VSliderInt(String label, @ByVal ImVec2 size, IntPointer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_VSliderInt(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, IntBuffer v, int v_min, int v_max);
public static native @Cast("bool") boolean ImGui_VSliderInt(String label, @ByVal ImVec2 size, int[] v, int v_min, int v_max);                                                                                 // Implied format = "%d", flags = 0
public static native @Cast("bool") boolean ImGui_VSliderIntEx(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, IntPointer v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderIntEx(String label, @ByVal ImVec2 size, IntBuffer v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderIntEx(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, int[] v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderIntEx(String label, @ByVal ImVec2 size, IntPointer v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderIntEx(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, IntBuffer v, int v_min, int v_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderIntEx(String label, @ByVal ImVec2 size, int[] v, int v_min, int v_max, String format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderScalar(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, @Cast("ImGuiDataType") int data_type, Pointer p_data, @Const Pointer p_min, @Const Pointer p_max);
public static native @Cast("bool") boolean ImGui_VSliderScalar(String label, @ByVal ImVec2 size, @Cast("ImGuiDataType") int data_type, Pointer p_data, @Const Pointer p_min, @Const Pointer p_max);                               // Implied format = NULL, flags = 0
public static native @Cast("bool") boolean ImGui_VSliderScalarEx(@Cast("const char*") BytePointer label, @ByVal ImVec2 size, @Cast("ImGuiDataType") int data_type, Pointer p_data, @Const Pointer p_min, @Const Pointer p_max, @Cast("const char*") BytePointer format, @Cast("ImGuiSliderFlags") int flags);
public static native @Cast("bool") boolean ImGui_VSliderScalarEx(String label, @ByVal ImVec2 size, @Cast("ImGuiDataType") int data_type, Pointer p_data, @Const Pointer p_min, @Const Pointer p_max, String format, @Cast("ImGuiSliderFlags") int flags);

// Widgets: Input with Keyboard
// - If you want to use InputText() with std::string or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.
// - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.
public static native @Cast("bool") boolean ImGui_InputText(@Cast("const char*") BytePointer label, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputText(String label, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputText(@Cast("const char*") BytePointer label, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputText(String label, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputText(@Cast("const char*") BytePointer label, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputText(String label, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);                              // Implied callback = NULL, user_data = NULL
public static native @Cast("bool") boolean ImGui_InputTextEx(@Cast("const char*") BytePointer label, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextEx(String label, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextEx(@Cast("const char*") BytePointer label, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextEx(String label, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextEx(@Cast("const char*") BytePointer label, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextEx(String label, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextMultiline(@Cast("const char*") BytePointer label, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size);
public static native @Cast("bool") boolean ImGui_InputTextMultiline(String label, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size);
public static native @Cast("bool") boolean ImGui_InputTextMultiline(@Cast("const char*") BytePointer label, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size);
public static native @Cast("bool") boolean ImGui_InputTextMultiline(String label, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size);
public static native @Cast("bool") boolean ImGui_InputTextMultiline(@Cast("const char*") BytePointer label, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size);
public static native @Cast("bool") boolean ImGui_InputTextMultiline(String label, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size);                                                          // Implied size = ImVec2(0, 0), flags = 0, callback = NULL, user_data = NULL
public static native @Cast("bool") boolean ImGui_InputTextMultilineEx(@Cast("const char*") BytePointer label, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size, @ByVal ImVec2 size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextMultilineEx(String label, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size, @ByVal ImVec2 size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextMultilineEx(@Cast("const char*") BytePointer label, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size, @ByVal ImVec2 size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextMultilineEx(String label, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size, @ByVal ImVec2 size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextMultilineEx(@Cast("const char*") BytePointer label, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size, @ByVal ImVec2 size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextMultilineEx(String label, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size, @ByVal ImVec2 size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextWithHint(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer hint, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputTextWithHint(String label, String hint, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputTextWithHint(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer hint, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputTextWithHint(String label, String hint, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputTextWithHint(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer hint, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputTextWithHint(String label, String hint, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags);    // Implied callback = NULL, user_data = NULL
public static native @Cast("bool") boolean ImGui_InputTextWithHintEx(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer hint, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextWithHintEx(String label, String hint, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextWithHintEx(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer hint, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextWithHintEx(String label, String hint, @Cast("char*") BytePointer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextWithHintEx(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer hint, @Cast("char*") ByteBuffer buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputTextWithHintEx(String label, String hint, @Cast("char*") byte[] buf, @Cast("size_t") long buf_size, @Cast("ImGuiInputTextFlags") int flags, ImGuiInputTextCallback callback, Pointer user_data);
public static native @Cast("bool") boolean ImGui_InputFloat(@Cast("const char*") BytePointer label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_InputFloat(String label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_InputFloat(@Cast("const char*") BytePointer label, float[] v);
public static native @Cast("bool") boolean ImGui_InputFloat(String label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_InputFloat(@Cast("const char*") BytePointer label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_InputFloat(String label, float[] v);                                                                                    // Implied step = 0.0f, step_fast = 0.0f, format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_InputFloatEx(@Cast("const char*") BytePointer label, FloatPointer v, float step, float step_fast, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloatEx(String label, FloatBuffer v, float step, float step_fast, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloatEx(@Cast("const char*") BytePointer label, float[] v, float step, float step_fast, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloatEx(String label, FloatPointer v, float step, float step_fast, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloatEx(@Cast("const char*") BytePointer label, FloatBuffer v, float step, float step_fast, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloatEx(String label, float[] v, float step, float step_fast, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat2(@Cast("const char*") BytePointer label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_InputFloat2(String label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_InputFloat2(@Cast("const char*") BytePointer label, float[] v);
public static native @Cast("bool") boolean ImGui_InputFloat2(String label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_InputFloat2(@Cast("const char*") BytePointer label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_InputFloat2(String label, float[] v);                                                                                 // Implied format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_InputFloat2Ex(@Cast("const char*") BytePointer label, FloatPointer v, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat2Ex(String label, FloatBuffer v, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat2Ex(@Cast("const char*") BytePointer label, float[] v, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat2Ex(String label, FloatPointer v, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat2Ex(@Cast("const char*") BytePointer label, FloatBuffer v, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat2Ex(String label, float[] v, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat3(@Cast("const char*") BytePointer label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_InputFloat3(String label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_InputFloat3(@Cast("const char*") BytePointer label, float[] v);
public static native @Cast("bool") boolean ImGui_InputFloat3(String label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_InputFloat3(@Cast("const char*") BytePointer label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_InputFloat3(String label, float[] v);                                                                                 // Implied format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_InputFloat3Ex(@Cast("const char*") BytePointer label, FloatPointer v, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat3Ex(String label, FloatBuffer v, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat3Ex(@Cast("const char*") BytePointer label, float[] v, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat3Ex(String label, FloatPointer v, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat3Ex(@Cast("const char*") BytePointer label, FloatBuffer v, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat3Ex(String label, float[] v, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat4(@Cast("const char*") BytePointer label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_InputFloat4(String label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_InputFloat4(@Cast("const char*") BytePointer label, float[] v);
public static native @Cast("bool") boolean ImGui_InputFloat4(String label, FloatPointer v);
public static native @Cast("bool") boolean ImGui_InputFloat4(@Cast("const char*") BytePointer label, FloatBuffer v);
public static native @Cast("bool") boolean ImGui_InputFloat4(String label, float[] v);                                                                                 // Implied format = "%.3f", flags = 0
public static native @Cast("bool") boolean ImGui_InputFloat4Ex(@Cast("const char*") BytePointer label, FloatPointer v, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat4Ex(String label, FloatBuffer v, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat4Ex(@Cast("const char*") BytePointer label, float[] v, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat4Ex(String label, FloatPointer v, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat4Ex(@Cast("const char*") BytePointer label, FloatBuffer v, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputFloat4Ex(String label, float[] v, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt(@Cast("const char*") BytePointer label, IntPointer v);
public static native @Cast("bool") boolean ImGui_InputInt(String label, IntBuffer v);
public static native @Cast("bool") boolean ImGui_InputInt(@Cast("const char*") BytePointer label, int[] v);
public static native @Cast("bool") boolean ImGui_InputInt(String label, IntPointer v);
public static native @Cast("bool") boolean ImGui_InputInt(@Cast("const char*") BytePointer label, IntBuffer v);
public static native @Cast("bool") boolean ImGui_InputInt(String label, int[] v);                                                                                        // Implied step = 1, step_fast = 100, flags = 0
public static native @Cast("bool") boolean ImGui_InputIntEx(@Cast("const char*") BytePointer label, IntPointer v, int step, int step_fast, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputIntEx(String label, IntBuffer v, int step, int step_fast, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputIntEx(@Cast("const char*") BytePointer label, int[] v, int step, int step_fast, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputIntEx(String label, IntPointer v, int step, int step_fast, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputIntEx(@Cast("const char*") BytePointer label, IntBuffer v, int step, int step_fast, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputIntEx(String label, int[] v, int step, int step_fast, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt2(@Cast("const char*") BytePointer label, IntPointer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt2(String label, IntBuffer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt2(@Cast("const char*") BytePointer label, int[] v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt2(String label, IntPointer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt2(@Cast("const char*") BytePointer label, IntBuffer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt2(String label, int[] v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt3(@Cast("const char*") BytePointer label, IntPointer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt3(String label, IntBuffer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt3(@Cast("const char*") BytePointer label, int[] v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt3(String label, IntPointer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt3(@Cast("const char*") BytePointer label, IntBuffer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt3(String label, int[] v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt4(@Cast("const char*") BytePointer label, IntPointer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt4(String label, IntBuffer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt4(@Cast("const char*") BytePointer label, int[] v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt4(String label, IntPointer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt4(@Cast("const char*") BytePointer label, IntBuffer v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputInt4(String label, int[] v, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputDouble(@Cast("const char*") BytePointer label, DoublePointer v);
public static native @Cast("bool") boolean ImGui_InputDouble(String label, DoubleBuffer v);
public static native @Cast("bool") boolean ImGui_InputDouble(@Cast("const char*") BytePointer label, double[] v);
public static native @Cast("bool") boolean ImGui_InputDouble(String label, DoublePointer v);
public static native @Cast("bool") boolean ImGui_InputDouble(@Cast("const char*") BytePointer label, DoubleBuffer v);
public static native @Cast("bool") boolean ImGui_InputDouble(String label, double[] v);                                                                                  // Implied step = 0.0, step_fast = 0.0, format = "%.6f", flags = 0
public static native @Cast("bool") boolean ImGui_InputDoubleEx(@Cast("const char*") BytePointer label, DoublePointer v, double step, double step_fast, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputDoubleEx(String label, DoubleBuffer v, double step, double step_fast, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputDoubleEx(@Cast("const char*") BytePointer label, double[] v, double step, double step_fast, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputDoubleEx(String label, DoublePointer v, double step, double step_fast, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputDoubleEx(@Cast("const char*") BytePointer label, DoubleBuffer v, double step, double step_fast, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputDoubleEx(String label, double[] v, double step, double step_fast, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputScalar(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data);
public static native @Cast("bool") boolean ImGui_InputScalar(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data);                                                      // Implied p_step = NULL, p_step_fast = NULL, format = NULL, flags = 0
public static native @Cast("bool") boolean ImGui_InputScalarEx(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data, @Const Pointer p_step, @Const Pointer p_step_fast, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputScalarEx(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data, @Const Pointer p_step, @Const Pointer p_step_fast, String format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputScalarN(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components);
public static native @Cast("bool") boolean ImGui_InputScalarN(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components);                                     // Implied p_step = NULL, p_step_fast = NULL, format = NULL, flags = 0
public static native @Cast("bool") boolean ImGui_InputScalarNEx(@Cast("const char*") BytePointer label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components, @Const Pointer p_step, @Const Pointer p_step_fast, @Cast("const char*") BytePointer format, @Cast("ImGuiInputTextFlags") int flags);
public static native @Cast("bool") boolean ImGui_InputScalarNEx(String label, @Cast("ImGuiDataType") int data_type, Pointer p_data, int components, @Const Pointer p_step, @Const Pointer p_step_fast, String format, @Cast("ImGuiInputTextFlags") int flags);

// Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)
// - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.
// - You can pass the address of a first float element out of a contiguous structure, e.g. &myvector.x
public static native @Cast("bool") boolean ImGui_ColorEdit3(@Cast("const char*") BytePointer label, FloatPointer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorEdit3(String label, FloatBuffer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorEdit3(@Cast("const char*") BytePointer label, float[] col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorEdit3(String label, FloatPointer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorEdit3(@Cast("const char*") BytePointer label, FloatBuffer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorEdit3(String label, float[] col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorEdit4(@Cast("const char*") BytePointer label, FloatPointer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorEdit4(String label, FloatBuffer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorEdit4(@Cast("const char*") BytePointer label, float[] col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorEdit4(String label, FloatPointer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorEdit4(@Cast("const char*") BytePointer label, FloatBuffer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorEdit4(String label, float[] col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorPicker3(@Cast("const char*") BytePointer label, FloatPointer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorPicker3(String label, FloatBuffer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorPicker3(@Cast("const char*") BytePointer label, float[] col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorPicker3(String label, FloatPointer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorPicker3(@Cast("const char*") BytePointer label, FloatBuffer col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorPicker3(String label, float[] col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorPicker4(@Cast("const char*") BytePointer label, FloatPointer col, @Cast("ImGuiColorEditFlags") int flags, @Const FloatPointer ref_col);
public static native @Cast("bool") boolean ImGui_ColorPicker4(String label, FloatBuffer col, @Cast("ImGuiColorEditFlags") int flags, @Const FloatBuffer ref_col);
public static native @Cast("bool") boolean ImGui_ColorPicker4(@Cast("const char*") BytePointer label, float[] col, @Cast("ImGuiColorEditFlags") int flags, @Const float[] ref_col);
public static native @Cast("bool") boolean ImGui_ColorPicker4(String label, FloatPointer col, @Cast("ImGuiColorEditFlags") int flags, @Const FloatPointer ref_col);
public static native @Cast("bool") boolean ImGui_ColorPicker4(@Cast("const char*") BytePointer label, FloatBuffer col, @Cast("ImGuiColorEditFlags") int flags, @Const FloatBuffer ref_col);
public static native @Cast("bool") boolean ImGui_ColorPicker4(String label, float[] col, @Cast("ImGuiColorEditFlags") int flags, @Const float[] ref_col);
public static native @Cast("bool") boolean ImGui_ColorButton(@Cast("const char*") BytePointer desc_id, @ByVal ImVec4 col, @Cast("ImGuiColorEditFlags") int flags);
public static native @Cast("bool") boolean ImGui_ColorButton(String desc_id, @ByVal ImVec4 col, @Cast("ImGuiColorEditFlags") int flags);                                      // Implied size = ImVec2(0, 0)
public static native @Cast("bool") boolean ImGui_ColorButtonEx(@Cast("const char*") BytePointer desc_id, @ByVal ImVec4 col, @Cast("ImGuiColorEditFlags") int flags, @ByVal ImVec2 size);
public static native @Cast("bool") boolean ImGui_ColorButtonEx(String desc_id, @ByVal ImVec4 col, @Cast("ImGuiColorEditFlags") int flags, @ByVal ImVec2 size);  // display a color square/button, hover for details, return true when pressed.
public static native void ImGui_SetColorEditOptions(@Cast("ImGuiColorEditFlags") int flags);                                                                         // initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.

// Widgets: Trees
// - TreeNode functions return true when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents.
public static native @Cast("bool") boolean ImGui_TreeNode(@Cast("const char*") BytePointer label);
public static native @Cast("bool") boolean ImGui_TreeNode(String label);
public static native @Cast("bool") boolean ImGui_TreeNodeStr(@Cast("const char*") BytePointer str_id, @Cast("const char*") BytePointer fmt);
public static native @Cast("bool") boolean ImGui_TreeNodeStr(String str_id, String fmt);                                        // helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().
public static native @Cast("bool") boolean ImGui_TreeNodePtr(@Const Pointer ptr_id, @Cast("const char*") BytePointer fmt);
public static native @Cast("bool") boolean ImGui_TreeNodePtr(@Const Pointer ptr_id, String fmt);                                        // "
public static native @Cast("bool") boolean ImGui_TreeNodeV(@Cast("const char*") BytePointer str_id, @Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native @Cast("bool") boolean ImGui_TreeNodeV(String str_id, String fmt, @ByVal @Cast("va_list*") Pointer args);
public static native @Cast("bool") boolean ImGui_TreeNodeVPtr(@Const Pointer ptr_id, @Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native @Cast("bool") boolean ImGui_TreeNodeVPtr(@Const Pointer ptr_id, String fmt, @ByVal @Cast("va_list*") Pointer args);
public static native @Cast("bool") boolean ImGui_TreeNodeEx(@Cast("const char*") BytePointer label, @Cast("ImGuiTreeNodeFlags") int flags);
public static native @Cast("bool") boolean ImGui_TreeNodeEx(String label, @Cast("ImGuiTreeNodeFlags") int flags);
public static native @Cast("bool") boolean ImGui_TreeNodeExStr(@Cast("const char*") BytePointer str_id, @Cast("ImGuiTreeNodeFlags") int flags, @Cast("const char*") BytePointer fmt);
public static native @Cast("bool") boolean ImGui_TreeNodeExStr(String str_id, @Cast("ImGuiTreeNodeFlags") int flags, String fmt);
public static native @Cast("bool") boolean ImGui_TreeNodeExPtr(@Const Pointer ptr_id, @Cast("ImGuiTreeNodeFlags") int flags, @Cast("const char*") BytePointer fmt);
public static native @Cast("bool") boolean ImGui_TreeNodeExPtr(@Const Pointer ptr_id, @Cast("ImGuiTreeNodeFlags") int flags, String fmt);
public static native @Cast("bool") boolean ImGui_TreeNodeExV(@Cast("const char*") BytePointer str_id, @Cast("ImGuiTreeNodeFlags") int flags, @Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native @Cast("bool") boolean ImGui_TreeNodeExV(String str_id, @Cast("ImGuiTreeNodeFlags") int flags, String fmt, @ByVal @Cast("va_list*") Pointer args);
public static native @Cast("bool") boolean ImGui_TreeNodeExVPtr(@Const Pointer ptr_id, @Cast("ImGuiTreeNodeFlags") int flags, @Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native @Cast("bool") boolean ImGui_TreeNodeExVPtr(@Const Pointer ptr_id, @Cast("ImGuiTreeNodeFlags") int flags, String fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_TreePush(@Cast("const char*") BytePointer str_id);
public static native void ImGui_TreePush(String str_id);                                                                               // ~ Indent()+PushID(). Already called by TreeNode() when returning true, but you can call TreePush/TreePop yourself if desired.
public static native void ImGui_TreePushPtr(@Const Pointer ptr_id);                                                                            // "
public static native void ImGui_TreePop();                                                                                              // ~ Unindent()+PopID()
public static native float ImGui_GetTreeNodeToLabelSpacing();                                                                            // horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode
public static native @Cast("bool") boolean ImGui_CollapsingHeader(@Cast("const char*") BytePointer label, @Cast("ImGuiTreeNodeFlags") int flags);
public static native @Cast("bool") boolean ImGui_CollapsingHeader(String label, @Cast("ImGuiTreeNodeFlags") int flags);                                    // if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().
public static native @Cast("bool") boolean ImGui_CollapsingHeaderBoolPtr(@Cast("const char*") BytePointer label, @Cast("bool*") BoolPointer p_visible, @Cast("ImGuiTreeNodeFlags") int flags);
public static native @Cast("bool") boolean ImGui_CollapsingHeaderBoolPtr(String label, @Cast("bool*") boolean[] p_visible, @Cast("ImGuiTreeNodeFlags") int flags);            // when 'p_visible != NULL': if '*p_visible==true' display an additional small close button on upper right of the header which will set the bool to false when clicked, if '*p_visible==false' don't display the header.
public static native void ImGui_SetNextItemOpen(@Cast("bool") boolean is_open, @Cast("ImGuiCond") int cond);                                                    // set next TreeNode/CollapsingHeader open state.
public static native void ImGui_SetNextItemStorageID(@Cast("ImGuiID") int storage_id);                                                                   // set id to use for open/close storage (default to same as item id).

// Widgets: Selectables
// - A selectable highlights when hovered, and can display another color when selected.
// - Neighbors selectable extend their highlight bounds in order to leave no gap between them. This is so a series of selected Selectable appear contiguous.
public static native @Cast("bool") boolean ImGui_Selectable(@Cast("const char*") BytePointer label);
public static native @Cast("bool") boolean ImGui_Selectable(String label);                                                                                                         // Implied selected = false, flags = 0, size = ImVec2(0, 0)
public static native @Cast("bool") boolean ImGui_SelectableEx(@Cast("const char*") BytePointer label, @Cast("bool") boolean selected, @Cast("ImGuiSelectableFlags") int flags, @ByVal ImVec2 size);
public static native @Cast("bool") boolean ImGui_SelectableEx(String label, @Cast("bool") boolean selected, @Cast("ImGuiSelectableFlags") int flags, @ByVal ImVec2 size);  // "bool selected" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height
public static native @Cast("bool") boolean ImGui_SelectableBoolPtr(@Cast("const char*") BytePointer label, @Cast("bool*") BoolPointer p_selected, @Cast("ImGuiSelectableFlags") int flags);
public static native @Cast("bool") boolean ImGui_SelectableBoolPtr(String label, @Cast("bool*") boolean[] p_selected, @Cast("ImGuiSelectableFlags") int flags);                                          // Implied size = ImVec2(0, 0)
public static native @Cast("bool") boolean ImGui_SelectableBoolPtrEx(@Cast("const char*") BytePointer label, @Cast("bool*") BoolPointer p_selected, @Cast("ImGuiSelectableFlags") int flags, @ByVal ImVec2 size);
public static native @Cast("bool") boolean ImGui_SelectableBoolPtrEx(String label, @Cast("bool*") boolean[] p_selected, @Cast("ImGuiSelectableFlags") int flags, @ByVal ImVec2 size);      // "bool* p_selected" point to the selection state (read-write), as a convenient helper.

// Multi-selection system for Selectable(), Checkbox(), TreeNode() functions [BETA]
// - This enables standard multi-selection/range-selection idioms (CTRL+Mouse/Keyboard, SHIFT+Mouse/Keyboard, etc.) in a way that also allow a clipper to be used.
// - ImGuiSelectionUserData is often used to store your item index within the current view (but may store something else).
// - Read comments near ImGuiMultiSelectIO for instructions/details and see 'Demo->Widgets->Selection State & Multi-Select' for demo.
// - TreeNode() is technically supported but... using this correctly is more complicated. You need some sort of linear/random access to your tree,
//   which is suited to advanced trees setups already implementing filters and clipper. We will work simplifying the current demo.
// - 'selection_size' and 'items_count' parameters are optional and used by a few features. If they are costly for you to compute, you may avoid them.
public static native ImGuiMultiSelectIO ImGui_BeginMultiSelect(@Cast("ImGuiMultiSelectFlags") int flags);                             // Implied selection_size = -1, items_count = -1
public static native ImGuiMultiSelectIO ImGui_BeginMultiSelectEx(@Cast("ImGuiMultiSelectFlags") int flags, int selection_size, int items_count);
public static native ImGuiMultiSelectIO ImGui_EndMultiSelect();
public static native void ImGui_SetNextItemSelectionUserData(@Cast("ImGuiSelectionUserData") long selection_user_data);
public static native @Cast("bool") boolean ImGui_IsItemToggledSelection();                                              // Was the last item selection state toggled? Useful if you need the per-item information _before_ reaching EndMultiSelect(). We only returns toggle _event_ in order to handle clipping correctly.

// Widgets: List Boxes
// - This is essentially a thin wrapper to using BeginChild/EndChild with the ImGuiChildFlags_FrameStyle flag for stylistic changes + displaying a label.
// - You can submit contents and manage your selection state however you want it, by creating e.g. Selectable() or any other items.
// - The simplified/old ListBox() api are helpers over BeginListBox()/EndListBox() which are kept available for convenience purpose. This is analoguous to how Combos are created.
// - Choose frame width:   size.x > 0.0f: custom  /  size.x < 0.0f or -FLT_MIN: right-align   /  size.x = 0.0f (default): use current ItemWidth
// - Choose frame height:  size.y > 0.0f: custom  /  size.y < 0.0f or -FLT_MIN: bottom-align  /  size.y = 0.0f (default): arbitrary default height which can fit ~7 items
public static native @Cast("bool") boolean ImGui_BeginListBox(@Cast("const char*") BytePointer label, @ByVal ImVec2 size);
public static native @Cast("bool") boolean ImGui_BeginListBox(String label, @ByVal ImVec2 size);                                                                         // open a framed scrolling region
public static native void ImGui_EndListBox();                                                                                                                          // only call EndListBox() if BeginListBox() returned true!
public static native @Cast("bool") boolean ImGui_ListBox(@Cast("const char*") BytePointer label, IntPointer current_item, @Cast("const char*const*") PointerPointer items, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBox(@Cast("const char*") BytePointer label, IntPointer current_item, @Cast("const char*const*") @ByPtrPtr BytePointer items, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBox(String label, IntBuffer current_item, @Cast("const char*const*") @ByPtrPtr ByteBuffer items, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBox(@Cast("const char*") BytePointer label, int[] current_item, @Cast("const char*const*") @ByPtrPtr byte[] items, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBox(String label, IntPointer current_item, @Cast("const char*const*") @ByPtrPtr BytePointer items, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBox(@Cast("const char*") BytePointer label, IntBuffer current_item, @Cast("const char*const*") @ByPtrPtr ByteBuffer items, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBox(String label, int[] current_item, @Cast("const char*const*") @ByPtrPtr byte[] items, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxCallback(@Cast("const char*") BytePointer label, IntPointer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ListBoxCallback(String label, IntBuffer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ListBoxCallback(@Cast("const char*") BytePointer label, int[] current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ListBoxCallback(String label, IntPointer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ListBoxCallback(@Cast("const char*") BytePointer label, IntBuffer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ListBoxCallback(String label, int[] current_item, Getter_Pointer_int getter, Pointer user_data, int items_count);  // Implied height_in_items = -1
public static native @Cast("bool") boolean ImGui_ListBoxCallbackEx(@Cast("const char*") BytePointer label, IntPointer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxCallbackEx(String label, IntBuffer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxCallbackEx(@Cast("const char*") BytePointer label, int[] current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxCallbackEx(String label, IntPointer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxCallbackEx(@Cast("const char*") BytePointer label, IntBuffer current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxCallbackEx(String label, int[] current_item, Getter_Pointer_int getter, Pointer user_data, int items_count, int height_in_items);

// Widgets: Data Plotting
// - Consider using ImPlot (https://github.com/epezent/implot) which is much better!
public static native void ImGui_PlotLines(@Cast("const char*") BytePointer label, @Const FloatPointer values, int values_count);
public static native void ImGui_PlotLines(String label, @Const FloatBuffer values, int values_count);
public static native void ImGui_PlotLines(@Cast("const char*") BytePointer label, @Const float[] values, int values_count);
public static native void ImGui_PlotLines(String label, @Const FloatPointer values, int values_count);
public static native void ImGui_PlotLines(@Cast("const char*") BytePointer label, @Const FloatBuffer values, int values_count);
public static native void ImGui_PlotLines(String label, @Const float[] values, int values_count);                                                  // Implied values_offset = 0, overlay_text = NULL, scale_min = FLT_MAX, scale_max = FLT_MAX, graph_size = ImVec2(0, 0), stride = sizeof(float)
public static native void ImGui_PlotLinesEx(@Cast("const char*") BytePointer label, @Const FloatPointer values, int values_count, int values_offset, @Cast("const char*") BytePointer overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
public static native void ImGui_PlotLinesEx(String label, @Const FloatBuffer values, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
public static native void ImGui_PlotLinesEx(@Cast("const char*") BytePointer label, @Const float[] values, int values_count, int values_offset, @Cast("const char*") BytePointer overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
public static native void ImGui_PlotLinesEx(String label, @Const FloatPointer values, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
public static native void ImGui_PlotLinesEx(@Cast("const char*") BytePointer label, @Const FloatBuffer values, int values_count, int values_offset, @Cast("const char*") BytePointer overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
public static native void ImGui_PlotLinesEx(String label, @Const float[] values, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
// Targeting imgui\Values_getter_Pointer_int.java


public static native void ImGui_PlotLinesCallback(@Cast("const char*") BytePointer label, Values_getter_Pointer_int values_getter, Pointer data, int values_count);
public static native void ImGui_PlotLinesCallback(String label, Values_getter_Pointer_int values_getter, Pointer data, int values_count);      // Implied values_offset = 0, overlay_text = NULL, scale_min = FLT_MAX, scale_max = FLT_MAX, graph_size = ImVec2(0, 0)
public static native void ImGui_PlotLinesCallbackEx(@Cast("const char*") BytePointer label, Values_getter_Pointer_int values_getter, Pointer data, int values_count, int values_offset, @Cast("const char*") BytePointer overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size);
public static native void ImGui_PlotLinesCallbackEx(String label, Values_getter_Pointer_int values_getter, Pointer data, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size);
public static native void ImGui_PlotHistogram(@Cast("const char*") BytePointer label, @Const FloatPointer values, int values_count);
public static native void ImGui_PlotHistogram(String label, @Const FloatBuffer values, int values_count);
public static native void ImGui_PlotHistogram(@Cast("const char*") BytePointer label, @Const float[] values, int values_count);
public static native void ImGui_PlotHistogram(String label, @Const FloatPointer values, int values_count);
public static native void ImGui_PlotHistogram(@Cast("const char*") BytePointer label, @Const FloatBuffer values, int values_count);
public static native void ImGui_PlotHistogram(String label, @Const float[] values, int values_count);                                              // Implied values_offset = 0, overlay_text = NULL, scale_min = FLT_MAX, scale_max = FLT_MAX, graph_size = ImVec2(0, 0), stride = sizeof(float)
public static native void ImGui_PlotHistogramEx(@Cast("const char*") BytePointer label, @Const FloatPointer values, int values_count, int values_offset, @Cast("const char*") BytePointer overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
public static native void ImGui_PlotHistogramEx(String label, @Const FloatBuffer values, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
public static native void ImGui_PlotHistogramEx(@Cast("const char*") BytePointer label, @Const float[] values, int values_count, int values_offset, @Cast("const char*") BytePointer overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
public static native void ImGui_PlotHistogramEx(String label, @Const FloatPointer values, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
public static native void ImGui_PlotHistogramEx(@Cast("const char*") BytePointer label, @Const FloatBuffer values, int values_count, int values_offset, @Cast("const char*") BytePointer overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
public static native void ImGui_PlotHistogramEx(String label, @Const float[] values, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size, int stride);
public static native void ImGui_PlotHistogramCallback(@Cast("const char*") BytePointer label, Values_getter_Pointer_int values_getter, Pointer data, int values_count);
public static native void ImGui_PlotHistogramCallback(String label, Values_getter_Pointer_int values_getter, Pointer data, int values_count);  // Implied values_offset = 0, overlay_text = NULL, scale_min = FLT_MAX, scale_max = FLT_MAX, graph_size = ImVec2(0, 0)
public static native void ImGui_PlotHistogramCallbackEx(@Cast("const char*") BytePointer label, Values_getter_Pointer_int values_getter, Pointer data, int values_count, int values_offset, @Cast("const char*") BytePointer overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size);
public static native void ImGui_PlotHistogramCallbackEx(String label, Values_getter_Pointer_int values_getter, Pointer data, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, @ByVal ImVec2 graph_size);

// Widgets: Menus
// - Use BeginMenuBar() on a window ImGuiWindowFlags_MenuBar to append to its menu bar.
// - Use BeginMainMenuBar() to create a menu bar at the top of the screen and append to it.
// - Use BeginMenu() to create a menu. You can call BeginMenu() multiple time with the same identifier to append more items to it.
// - Not that MenuItem() keyboardshortcuts are displayed as a convenience but _not processed_ by Dear ImGui at the moment.
public static native @Cast("bool") boolean ImGui_BeginMenuBar();                                         // append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).
public static native void ImGui_EndMenuBar();                                           // only call EndMenuBar() if BeginMenuBar() returns true!
public static native @Cast("bool") boolean ImGui_BeginMainMenuBar();                                     // create and append to a full screen menu-bar.
public static native void ImGui_EndMainMenuBar();                                       // only call EndMainMenuBar() if BeginMainMenuBar() returns true!
public static native @Cast("bool") boolean ImGui_BeginMenu(@Cast("const char*") BytePointer label);
public static native @Cast("bool") boolean ImGui_BeginMenu(String label);                               // Implied enabled = true
public static native @Cast("bool") boolean ImGui_BeginMenuEx(@Cast("const char*") BytePointer label, @Cast("bool") boolean enabled);
public static native @Cast("bool") boolean ImGui_BeginMenuEx(String label, @Cast("bool") boolean enabled);  // create a sub-menu entry. only call EndMenu() if this returns true!
public static native void ImGui_EndMenu();                                              // only call EndMenu() if BeginMenu() returns true!
public static native @Cast("bool") boolean ImGui_MenuItem(@Cast("const char*") BytePointer label);
public static native @Cast("bool") boolean ImGui_MenuItem(String label);                                // Implied shortcut = NULL, selected = false, enabled = true
public static native @Cast("bool") boolean ImGui_MenuItemEx(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer shortcut, @Cast("bool") boolean selected, @Cast("bool") boolean enabled);
public static native @Cast("bool") boolean ImGui_MenuItemEx(String label, String shortcut, @Cast("bool") boolean selected, @Cast("bool") boolean enabled); // return true when activated.
public static native @Cast("bool") boolean ImGui_MenuItemBoolPtr(@Cast("const char*") BytePointer label, @Cast("const char*") BytePointer shortcut, @Cast("bool*") BoolPointer p_selected, @Cast("bool") boolean enabled);
public static native @Cast("bool") boolean ImGui_MenuItemBoolPtr(String label, String shortcut, @Cast("bool*") boolean[] p_selected, @Cast("bool") boolean enabled); // return true when activated + toggle (*p_selected) if p_selected != NULL

// Tooltips
// - Tooltips are windows following the mouse. They do not take focus away.
// - A tooltip window can contain items of any types.
// - SetTooltip() is more or less a shortcut for the 'if (BeginTooltip()) { Text(...); EndTooltip(); }' idiom (with a subtlety that it discard any previously submitted tooltip)
public static native @Cast("bool") boolean ImGui_BeginTooltip();                                        // begin/append a tooltip window.
public static native void ImGui_EndTooltip();                                          // only call EndTooltip() if BeginTooltip()/BeginItemTooltip() returns true!
public static native void ImGui_SetTooltip(@Cast("const char*") BytePointer fmt);
public static native void ImGui_SetTooltip(String fmt);            // set a text-only tooltip. Often used after a ImGui::IsItemHovered() check. Override any previous call to SetTooltip().
public static native void ImGui_SetTooltipV(@Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_SetTooltipV(String fmt, @ByVal @Cast("va_list*") Pointer args);

// Tooltips: helpers for showing a tooltip when hovering an item
// - BeginItemTooltip() is a shortcut for the 'if (IsItemHovered(ImGuiHoveredFlags_ForTooltip) && BeginTooltip())' idiom.
// - SetItemTooltip() is a shortcut for the 'if (IsItemHovered(ImGuiHoveredFlags_ForTooltip)) { SetTooltip(...); }' idiom.
// - Where 'ImGuiHoveredFlags_ForTooltip' itself is a shortcut to use 'style.HoverFlagsForTooltipMouse' or 'style.HoverFlagsForTooltipNav' depending on active input type. For mouse it defaults to 'ImGuiHoveredFlags_Stationary | ImGuiHoveredFlags_DelayShort'.
public static native @Cast("bool") boolean ImGui_BeginItemTooltip();                                        // begin/append a tooltip window if preceding item was hovered.
public static native void ImGui_SetItemTooltip(@Cast("const char*") BytePointer fmt);
public static native void ImGui_SetItemTooltip(String fmt);            // set a text-only tooltip if preceding item was hovered. override any previous call to SetTooltip().
public static native void ImGui_SetItemTooltipV(@Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_SetItemTooltipV(String fmt, @ByVal @Cast("va_list*") Pointer args);

// Popups, Modals
//  - They block normal mouse hovering detection (and therefore most mouse interactions) behind them.
//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
//  - Their visibility state (~bool) is held internally instead of being held by the programmer as we are used to with regular Begin*() calls.
//  - The 3 properties above are related: we need to retain popup visibility state in the library because popups may be closed as any time.
//  - You can bypass the hovering restriction by using ImGuiHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered() or IsWindowHovered().
//  - IMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup and BeginPopup generally needs to be at the same level of the stack.
//    This is sometimes leading to confusing mistakes. May rework this in the future.
//  - BeginPopup(): query popup state, if open start appending into the window. Call EndPopup() afterwards if returned true. ImGuiWindowFlags are forwarded to the window.
//  - BeginPopupModal(): block every interaction behind the window, cannot be closed by user, add a dimming background, has a title bar.
public static native @Cast("bool") boolean ImGui_BeginPopup(@Cast("const char*") BytePointer str_id, @Cast("ImGuiWindowFlags") int flags);
public static native @Cast("bool") boolean ImGui_BeginPopup(String str_id, @Cast("ImGuiWindowFlags") int flags);                                // return true if the popup is open, and you can start outputting to it.
public static native @Cast("bool") boolean ImGui_BeginPopupModal(@Cast("const char*") BytePointer name, @Cast("bool*") BoolPointer p_open, @Cast("ImGuiWindowFlags") int flags);
public static native @Cast("bool") boolean ImGui_BeginPopupModal(String name, @Cast("bool*") boolean[] p_open, @Cast("ImGuiWindowFlags") int flags);  // return true if the modal is open, and you can start outputting to it.
public static native void ImGui_EndPopup();                                                                                  // only call EndPopup() if BeginPopupXXX() returns true!

// Popups: open/close functions
//  - OpenPopup(): set popup state to open. ImGuiPopupFlags are available for opening options.
//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
//  - CloseCurrentPopup(): use inside the BeginPopup()/EndPopup() scope to close manually.
//  - CloseCurrentPopup() is called by default by Selectable()/MenuItem() when activated (FIXME: need some options).
//  - Use ImGuiPopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's already one at the same level. This is equivalent to e.g. testing for !IsAnyPopupOpen() prior to OpenPopup().
//  - Use IsWindowAppearing() after BeginPopup() to tell if a window just opened.
//  - IMPORTANT: Notice that for OpenPopupOnItemClick() we exceptionally default flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter
public static native void ImGui_OpenPopup(@Cast("const char*") BytePointer str_id, @Cast("ImGuiPopupFlags") int popup_flags);
public static native void ImGui_OpenPopup(String str_id, @Cast("ImGuiPopupFlags") int popup_flags);                          // call to mark popup as open (don't call every frame!).
public static native void ImGui_OpenPopupID(@Cast("ImGuiID") int id, @Cast("ImGuiPopupFlags") int popup_flags);                                // id overload to facilitate calling from nested stacks
public static native void ImGui_OpenPopupOnItemClick(@Cast("const char*") BytePointer str_id, @Cast("ImGuiPopupFlags") int popup_flags);
public static native void ImGui_OpenPopupOnItemClick(String str_id, @Cast("ImGuiPopupFlags") int popup_flags);  // helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)
public static native void ImGui_CloseCurrentPopup();                                                                       // manually close the popup we have begin-ed into.

// Popups: open+begin combined functions helpers
//  - Helpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g. hovering an item and right-clicking.
//  - They are convenient to easily create context menus, hence the name.
//  - IMPORTANT: Notice that BeginPopupContextXXX takes ImGuiPopupFlags just like OpenPopup() and unlike BeginPopup(). For full consistency, we may add ImGuiWindowFlags to the BeginPopupContextXXX functions in the future.
//  - IMPORTANT: Notice that we exceptionally default their flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter, so if you add other flags remember to re-add the ImGuiPopupFlags_MouseButtonRight.
public static native @Cast("bool") boolean ImGui_BeginPopupContextItem();                                                                        // Implied str_id = NULL, popup_flags = 1
public static native @Cast("bool") boolean ImGui_BeginPopupContextItemEx(@Cast("const char*") BytePointer str_id, @Cast("ImGuiPopupFlags") int popup_flags);
public static native @Cast("bool") boolean ImGui_BeginPopupContextItemEx(String str_id, @Cast("ImGuiPopupFlags") int popup_flags);    // open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!
public static native @Cast("bool") boolean ImGui_BeginPopupContextWindow();                                                                      // Implied str_id = NULL, popup_flags = 1
public static native @Cast("bool") boolean ImGui_BeginPopupContextWindowEx(@Cast("const char*") BytePointer str_id, @Cast("ImGuiPopupFlags") int popup_flags);
public static native @Cast("bool") boolean ImGui_BeginPopupContextWindowEx(String str_id, @Cast("ImGuiPopupFlags") int popup_flags);  // open+begin popup when clicked on current window.
public static native @Cast("bool") boolean ImGui_BeginPopupContextVoid();                                                                        // Implied str_id = NULL, popup_flags = 1
public static native @Cast("bool") boolean ImGui_BeginPopupContextVoidEx(@Cast("const char*") BytePointer str_id, @Cast("ImGuiPopupFlags") int popup_flags);
public static native @Cast("bool") boolean ImGui_BeginPopupContextVoidEx(String str_id, @Cast("ImGuiPopupFlags") int popup_flags);    // open+begin popup when clicked in void (where there are no windows).

// Popups: query functions
//  - IsPopupOpen(): return true if the popup is open at the current BeginPopup() level of the popup stack.
//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId: return true if any popup is open at the current BeginPopup() level of the popup stack.
//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId + ImGuiPopupFlags_AnyPopupLevel: return true if any popup is open.
public static native @Cast("bool") boolean ImGui_IsPopupOpen(@Cast("const char*") BytePointer str_id, @Cast("ImGuiPopupFlags") int flags);
public static native @Cast("bool") boolean ImGui_IsPopupOpen(String str_id, @Cast("ImGuiPopupFlags") int flags);  // return true if the popup is open.

// Tables
// - Full-featured replacement for old Columns API.
// - See Demo->Tables for demo code. See top of imgui_tables.cpp for general commentary.
// - See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.
// The typical call flow is:
// - 1. Call BeginTable(), early out if returning false.
// - 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.
// - 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.
// - 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.
// - 5. Populate contents:
//    - In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.
//    - If you are using tables as a sort of grid, where every column is holding the same type of contents,
//      you may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().
//      TableNextColumn() will automatically wrap-around into the next row if needed.
//    - IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!
//    - Summary of possible call flow:
//        - TableNextRow() -> TableSetColumnIndex(0) -> Text("Hello 0") -> TableSetColumnIndex(1) -> Text("Hello 1")  // OK
//        - TableNextRow() -> TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK
//        -                   TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK: TableNextColumn() automatically gets to next row!
//        - TableNextRow()                           -> Text("Hello 0")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!
// - 5. Call EndTable()
public static native @Cast("bool") boolean ImGui_BeginTable(@Cast("const char*") BytePointer str_id, int columns, @Cast("ImGuiTableFlags") int flags);
public static native @Cast("bool") boolean ImGui_BeginTable(String str_id, int columns, @Cast("ImGuiTableFlags") int flags);               // Implied outer_size = ImVec2(0.0f, 0.0f), inner_width = 0.0f
public static native @Cast("bool") boolean ImGui_BeginTableEx(@Cast("const char*") BytePointer str_id, int columns, @Cast("ImGuiTableFlags") int flags, @ByVal ImVec2 outer_size, float inner_width);
public static native @Cast("bool") boolean ImGui_BeginTableEx(String str_id, int columns, @Cast("ImGuiTableFlags") int flags, @ByVal ImVec2 outer_size, float inner_width);
public static native void ImGui_EndTable();                                                                             // only call EndTable() if BeginTable() returns true!
public static native void ImGui_TableNextRow();                                                                         // Implied row_flags = 0, min_row_height = 0.0f
public static native void ImGui_TableNextRowEx(@Cast("ImGuiTableRowFlags") int row_flags, float min_row_height);  // append into the first cell of a new row.
public static native @Cast("bool") boolean ImGui_TableNextColumn();                                                                      // append into the next column (or first column of next row if currently in last column). Return true when column is visible.
public static native @Cast("bool") boolean ImGui_TableSetColumnIndex(int column_n);                                                          // append into the specified column. Return true when column is visible.

// Tables: Headers & Columns declaration
// - Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.
// - Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.
//   Headers are required to perform: reordering, sorting, and opening the context menu.
//   The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.
// - You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in
//   some advanced use cases (e.g. adding custom widgets in header row).
// - Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled.
public static native void ImGui_TableSetupColumn(@Cast("const char*") BytePointer label, @Cast("ImGuiTableColumnFlags") int flags);
public static native void ImGui_TableSetupColumn(String label, @Cast("ImGuiTableColumnFlags") int flags);  // Implied init_width_or_weight = 0.0f, user_id = 0
public static native void ImGui_TableSetupColumnEx(@Cast("const char*") BytePointer label, @Cast("ImGuiTableColumnFlags") int flags, float init_width_or_weight, @Cast("ImGuiID") int user_id);
public static native void ImGui_TableSetupColumnEx(String label, @Cast("ImGuiTableColumnFlags") int flags, float init_width_or_weight, @Cast("ImGuiID") int user_id);
public static native void ImGui_TableSetupScrollFreeze(int cols, int rows);                                  // lock columns/rows so they stay visible when scrolled.
public static native void ImGui_TableHeader(@Cast("const char*") BytePointer label);
public static native void ImGui_TableHeader(String label);                                              // submit one header cell manually (rarely used)
public static native void ImGui_TableHeadersRow();                                                       // submit a row with headers cells based on data provided to TableSetupColumn() + submit context menu
public static native void ImGui_TableAngledHeadersRow();                                                 // submit a row with angled headers for every column with the ImGuiTableColumnFlags_AngledHeader flag. MUST BE FIRST ROW.

// Tables: Sorting & Miscellaneous functions
// - Sorting: call TableGetSortSpecs() to retrieve latest sort specs for the table. NULL when not sorting.
//   When 'sort_specs->SpecsDirty == true' you should sort your data. It will be true when sorting specs have
//   changed since last call, or the first time. Make sure to set 'SpecsDirty = false' after sorting,
//   else you may wastefully sort your data every frame!
// - Functions args 'int column_n' treat the default value of -1 as the same as passing the current column index.
public static native ImGuiTableSortSpecs ImGui_TableGetSortSpecs();                       // get latest sort specs for the table (NULL if not sorting).  Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().
public static native int ImGui_TableGetColumnCount();                     // return number of columns (value passed to BeginTable)
public static native int ImGui_TableGetColumnIndex();                     // return current column index.
public static native int ImGui_TableGetRowIndex();                        // return current row index.
public static native @Cast("const char*") BytePointer ImGui_TableGetColumnName(int column_n);   // return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.
public static native @Cast("ImGuiTableColumnFlags") int ImGui_TableGetColumnFlags(int column_n);  // return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.
public static native void ImGui_TableSetColumnEnabled(int column_n, @Cast("bool") boolean v);   // change user accessible enabled/disabled state of a column. Set to false to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)
public static native int ImGui_TableGetHoveredColumn();                   // return hovered column. return -1 when table is not hovered. return columns_count if the unused space at the right of visible columns is hovered. Can also use (TableGetColumnFlags() & ImGuiTableColumnFlags_IsHovered) instead.
public static native void ImGui_TableSetBgColor(@Cast("ImGuiTableBgTarget") int target, @Cast("ImU32") int color, int column_n); // change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.

// Legacy Columns API (prefer using Tables!)
// - You can also use SameLine(pos_x) to mimic simplified columns.
public static native void ImGui_Columns();                                      // Implied count = 1, id = NULL, borders = true
public static native void ImGui_ColumnsEx(int count, @Cast("const char*") BytePointer id, @Cast("bool") boolean borders);
public static native void ImGui_ColumnsEx(int count, String id, @Cast("bool") boolean borders);
public static native void ImGui_NextColumn();                                   // next column, defaults to current row or next row if the current row is finished
public static native int ImGui_GetColumnIndex();                               // get current column index
public static native float ImGui_GetColumnWidth(int column_index);        // get column width (in pixels). pass -1 to use current column
public static native void ImGui_SetColumnWidth(int column_index, float width);      // set column width (in pixels). pass -1 to use current column
public static native float ImGui_GetColumnOffset(int column_index);       // get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f
public static native void ImGui_SetColumnOffset(int column_index, float offset_x);  // set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column
public static native int ImGui_GetColumnsCount();

// Tab Bars, Tabs
// - Note: Tabs are automatically created by the docking system (when in 'docking' branch). Use this to create tab bars/tabs yourself.
public static native @Cast("bool") boolean ImGui_BeginTabBar(@Cast("const char*") BytePointer str_id, @Cast("ImGuiTabBarFlags") int flags);
public static native @Cast("bool") boolean ImGui_BeginTabBar(String str_id, @Cast("ImGuiTabBarFlags") int flags);    // create and append into a TabBar
public static native void ImGui_EndTabBar();                                                      // only call EndTabBar() if BeginTabBar() returns true!
public static native @Cast("bool") boolean ImGui_BeginTabItem(@Cast("const char*") BytePointer label, @Cast("bool*") BoolPointer p_open, @Cast("ImGuiTabItemFlags") int flags);
public static native @Cast("bool") boolean ImGui_BeginTabItem(String label, @Cast("bool*") boolean[] p_open, @Cast("ImGuiTabItemFlags") int flags); // create a Tab. Returns true if the Tab is selected.
public static native void ImGui_EndTabItem();                                                     // only call EndTabItem() if BeginTabItem() returns true!
public static native @Cast("bool") boolean ImGui_TabItemButton(@Cast("const char*") BytePointer label, @Cast("ImGuiTabItemFlags") int flags);
public static native @Cast("bool") boolean ImGui_TabItemButton(String label, @Cast("ImGuiTabItemFlags") int flags);  // create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.
public static native void ImGui_SetTabItemClosed(@Cast("const char*") BytePointer tab_or_docked_window_label);
public static native void ImGui_SetTabItemClosed(String tab_or_docked_window_label);             // notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.

// Docking
// [BETA API] Enable with io.ConfigFlags |= ImGuiConfigFlags_DockingEnable.
// Note: You can use most Docking facilities without calling any API. You DO NOT need to call DockSpace() to use Docking!
// - Drag from window title bar or their tab to dock/undock. Hold SHIFT to disable docking.
// - Drag from window menu button (upper-left button) to undock an entire node (all windows).
// - When io.ConfigDockingWithShift == true, you instead need to hold SHIFT to enable docking.
// About dockspaces:
// - Use DockSpaceOverViewport() to create a window covering the screen or a specific viewport + a dockspace inside it.
//   This is often used with ImGuiDockNodeFlags_PassthruCentralNode to make it transparent.
// - Use DockSpace() to create an explicit dock node _within_ an existing window. See Docking demo for details.
// - Important: Dockspaces need to be submitted _before_ any window they can host. Submit it early in your frame!
// - Important: Dockspaces need to be kept alive if hidden, otherwise windows docked into it will be undocked.
//   e.g. if you have multiple tabs with a dockspace inside each tab: submit the non-visible dockspaces with ImGuiDockNodeFlags_KeepAliveOnly.
public static native @Cast("ImGuiID") int ImGui_DockSpace(@Cast("ImGuiID") int dockspace_id);                                 // Implied size = ImVec2(0, 0), flags = 0, window_class = NULL
public static native @Cast("ImGuiID") int ImGui_DockSpaceEx(@Cast("ImGuiID") int dockspace_id, @ByVal ImVec2 size, @Cast("ImGuiDockNodeFlags") int flags, @Const ImGuiWindowClass window_class);
public static native @Cast("ImGuiID") int ImGui_DockSpaceOverViewport();                                     // Implied dockspace_id = 0, viewport = NULL, flags = 0, window_class = NULL
public static native @Cast("ImGuiID") int ImGui_DockSpaceOverViewportEx(@Cast("ImGuiID") int dockspace_id, @Const ImGuiViewport viewport, @Cast("ImGuiDockNodeFlags") int flags, @Const ImGuiWindowClass window_class);
public static native void ImGui_SetNextWindowDockID(@Cast("ImGuiID") int dock_id, @Cast("ImGuiCond") int cond);  // set next window dock id
public static native void ImGui_SetNextWindowClass(@Const ImGuiWindowClass window_class);        // set next window class (control docking compatibility + provide hints to platform backend via custom viewport flags and platform parent/child relationship)
public static native @Cast("ImGuiID") int ImGui_GetWindowDockID();
public static native @Cast("bool") boolean ImGui_IsWindowDocked();                                            // is current window docked into another window?

// Logging/Capture
// - All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging.
public static native void ImGui_LogToTTY(int auto_open_depth);                                      // start logging to tty (stdout)
public static native void ImGui_LogToFile(int auto_open_depth, @Cast("const char*") BytePointer filename);
public static native void ImGui_LogToFile(int auto_open_depth, String filename);  // start logging to file
public static native void ImGui_LogToClipboard(int auto_open_depth);                                // start logging to OS clipboard
public static native void ImGui_LogFinish();                                                               // stop logging (close file, etc.)
public static native void ImGui_LogButtons();                                                              // helper to display buttons for logging to tty/file/clipboard
public static native void ImGui_LogText(@Cast("const char*") BytePointer fmt);
public static native void ImGui_LogText(String fmt);                                   // pass text data straight to log (without being displayed)
public static native void ImGui_LogTextV(@Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_LogTextV(String fmt, @ByVal @Cast("va_list*") Pointer args);

// Drag and Drop
// - On source items, call BeginDragDropSource(), if it returns true also call SetDragDropPayload() + EndDragDropSource().
// - On target candidates, call BeginDragDropTarget(), if it returns true also call AcceptDragDropPayload() + EndDragDropTarget().
// - If you stop calling BeginDragDropSource() the payload is preserved however it won't have a preview tooltip (we currently display a fallback "..." tooltip, see #1725)
// - An item can be both drag source and drop target.
public static native @Cast("bool") boolean ImGui_BeginDragDropSource(@Cast("ImGuiDragDropFlags") int flags);                      // call after submitting an item which may be dragged. when this return true, you can call SetDragDropPayload() + EndDragDropSource()
public static native @Cast("bool") boolean ImGui_SetDragDropPayload(@Cast("const char*") BytePointer type, @Const Pointer data, @Cast("size_t") long sz, @Cast("ImGuiCond") int cond);
public static native @Cast("bool") boolean ImGui_SetDragDropPayload(String type, @Const Pointer data, @Cast("size_t") long sz, @Cast("ImGuiCond") int cond); // type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui. Return true when payload has been accepted.
public static native void ImGui_EndDragDropSource();                                                      // only call EndDragDropSource() if BeginDragDropSource() returns true!
public static native @Cast("bool") boolean ImGui_BeginDragDropTarget();                                                    // call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()
public static native @Const ImGuiPayload ImGui_AcceptDragDropPayload(@Cast("const char*") BytePointer type, @Cast("ImGuiDragDropFlags") int flags);
public static native @Const ImGuiPayload ImGui_AcceptDragDropPayload(String type, @Cast("ImGuiDragDropFlags") int flags);  // accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.
public static native void ImGui_EndDragDropTarget();                                                      // only call EndDragDropTarget() if BeginDragDropTarget() returns true!
public static native @Const ImGuiPayload ImGui_GetDragDropPayload();                                                     // peek directly into the current payload from anywhere. returns NULL when drag and drop is finished or inactive. use ImGuiPayload::IsDataType() to test for the payload type.

// Disabling [BETA API]
// - Disable all user interactions and dim items visuals (applying style.DisabledAlpha over current colors)
// - Those can be nested but it cannot be used to enable an already disabled section (a single BeginDisabled(true) in the stack is enough to keep everything disabled)
// - Tooltips windows by exception are opted out of disabling.
// - BeginDisabled(false) essentially does nothing useful but is provided to facilitate use of boolean expressions. If you can avoid calling BeginDisabled(False)/EndDisabled() best to avoid it.
public static native void ImGui_BeginDisabled(@Cast("bool") boolean disabled);
public static native void ImGui_EndDisabled();

// Clipping
// - Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only.
public static native void ImGui_PushClipRect(@ByVal ImVec2 clip_rect_min, @ByVal ImVec2 clip_rect_max, @Cast("bool") boolean intersect_with_current_clip_rect);
public static native void ImGui_PopClipRect();

// Focus, Activation
// - Prefer using "SetItemDefaultFocus()" over "if (IsWindowAppearing()) SetScrollHereY()" when applicable to signify "this is the default item"
public static native void ImGui_SetItemDefaultFocus();                     // make last item the default focused item of a window.
public static native void ImGui_SetKeyboardFocusHere();                    // Implied offset = 0
public static native void ImGui_SetKeyboardFocusHereEx(int offset);  // focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.

// Overlapping mode
public static native void ImGui_SetNextItemAllowOverlap();  // allow next item to be overlapped by a subsequent item. Useful with invisible buttons, selectable, treenode covering an area where subsequent items may need to be added. Note that both Selectable() and TreeNode() have dedicated flags doing this.

// Item/Widgets Utilities and Query Functions
// - Most of the functions are referring to the previous Item that has been submitted.
// - See Demo Window under "Widgets->Querying Status" for an interactive visualization of most of those functions.
public static native @Cast("bool") boolean ImGui_IsItemHovered(@Cast("ImGuiHoveredFlags") int flags);          // is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.
public static native @Cast("bool") boolean ImGui_IsItemActive();                                        // is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)
public static native @Cast("bool") boolean ImGui_IsItemFocused();                                       // is the last item focused for keyboard/gamepad navigation?
public static native @Cast("bool") boolean ImGui_IsItemClicked();                                       // Implied mouse_button = 0
public static native @Cast("bool") boolean ImGui_IsItemClickedEx(@Cast("ImGuiMouseButton") int mouse_button);  // is the last item hovered and mouse clicked on? (**)  == IsMouseClicked(mouse_button) && IsItemHovered()Important. (**) this is NOT equivalent to the behavior of e.g. Button(). Read comments in function definition.
public static native @Cast("bool") boolean ImGui_IsItemVisible();                                       // is the last item visible? (items may be out of sight because of clipping/scrolling)
public static native @Cast("bool") boolean ImGui_IsItemEdited();                                        // did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets.
public static native @Cast("bool") boolean ImGui_IsItemActivated();                                     // was the last item just made active (item was previously inactive).
public static native @Cast("bool") boolean ImGui_IsItemDeactivated();                                   // was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that require continuous editing.
public static native @Cast("bool") boolean ImGui_IsItemDeactivatedAfterEdit();                          // was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that require continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).
public static native @Cast("bool") boolean ImGui_IsItemToggledOpen();                                   // was the last item open state toggled? set by TreeNode().
public static native @Cast("bool") boolean ImGui_IsAnyItemHovered();                                    // is any item hovered?
public static native @Cast("bool") boolean ImGui_IsAnyItemActive();                                     // is any item active?
public static native @Cast("bool") boolean ImGui_IsAnyItemFocused();                                    // is any item focused?
public static native @Cast("ImGuiID") int ImGui_GetItemID();                                           // get ID of last item (~~ often same ImGui::GetID(label) beforehand)
public static native @ByVal ImVec2 ImGui_GetItemRectMin();                                      // get upper-left bounding rectangle of the last item (screen space)
public static native @ByVal ImVec2 ImGui_GetItemRectMax();                                      // get lower-right bounding rectangle of the last item (screen space)
public static native @ByVal ImVec2 ImGui_GetItemRectSize();                                     // get size of last item

// Viewports
// - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.
// - In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports.
// - In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.
public static native ImGuiViewport ImGui_GetMainViewport();  // return primary/default viewport. This can never be NULL.

// Background/Foreground Draw Lists
public static native ImDrawList ImGui_GetBackgroundDrawList();                                    // Implied viewport = NULL
public static native ImDrawList ImGui_GetBackgroundDrawListEx(ImGuiViewport viewport);  // get background draw list for the given viewport or viewport associated to the current window. this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear imgui contents.
public static native ImDrawList ImGui_GetForegroundDrawList();                                    // Implied viewport = NULL
public static native ImDrawList ImGui_GetForegroundDrawListEx(ImGuiViewport viewport);  // get foreground draw list for the given viewport or viewport associated to the current window. this draw list will be the top-most rendered one. Useful to quickly draw shapes/text over dear imgui contents.

// Miscellaneous Utilities
public static native @Cast("bool") boolean ImGui_IsRectVisibleBySize(@ByVal ImVec2 size);                 // test if rectangle (of given size, starting from cursor position) is visible / not clipped.
public static native @Cast("bool") boolean ImGui_IsRectVisible(@ByVal ImVec2 rect_min, @ByVal ImVec2 rect_max);  // test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.
public static native double ImGui_GetTime();                                    // get global imgui time. incremented by io.DeltaTime every frame.
public static native int ImGui_GetFrameCount();                              // get global imgui frame count. incremented by 1 every frame.
public static native ImDrawListSharedData ImGui_GetDrawListSharedData();                      // you may use this when creating your own ImDrawList instances.
public static native @Cast("const char*") BytePointer ImGui_GetStyleColorName(@Cast("ImGuiCol") int idx);                  // get a string corresponding to the enum value (for display, saving, etc.).
public static native void ImGui_SetStateStorage(ImGuiStorage storage);           // replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)
public static native ImGuiStorage ImGui_GetStateStorage();

// Text Utilities
public static native @ByVal ImVec2 ImGui_CalcTextSize(@Cast("const char*") BytePointer text);
public static native @ByVal ImVec2 ImGui_CalcTextSize(String text);  // Implied text_end = NULL, hide_text_after_double_hash = false, wrap_width = -1.0f
public static native @ByVal ImVec2 ImGui_CalcTextSizeEx(@Cast("const char*") BytePointer text, @Cast("const char*") BytePointer text_end, @Cast("bool") boolean hide_text_after_double_hash, float wrap_width);
public static native @ByVal ImVec2 ImGui_CalcTextSizeEx(String text, String text_end, @Cast("bool") boolean hide_text_after_double_hash, float wrap_width);

// Color Utilities
public static native @ByVal ImVec4 ImGui_ColorConvertU32ToFloat4(@Cast("ImU32") int in);
public static native @Cast("ImU32") int ImGui_ColorConvertFloat4ToU32(@ByVal ImVec4 in);
public static native void ImGui_ColorConvertRGBtoHSV(float r, float g, float b, FloatPointer out_h, FloatPointer out_s, FloatPointer out_v);
public static native void ImGui_ColorConvertRGBtoHSV(float r, float g, float b, FloatBuffer out_h, FloatBuffer out_s, FloatBuffer out_v);
public static native void ImGui_ColorConvertRGBtoHSV(float r, float g, float b, float[] out_h, float[] out_s, float[] out_v);
public static native void ImGui_ColorConvertHSVtoRGB(float h, float s, float v, FloatPointer out_r, FloatPointer out_g, FloatPointer out_b);
public static native void ImGui_ColorConvertHSVtoRGB(float h, float s, float v, FloatBuffer out_r, FloatBuffer out_g, FloatBuffer out_b);
public static native void ImGui_ColorConvertHSVtoRGB(float h, float s, float v, float[] out_r, float[] out_g, float[] out_b);

// Inputs Utilities: Keyboard/Mouse/Gamepad
// - the ImGuiKey enum contains all possible keyboard, mouse and gamepad inputs (e.g. ImGuiKey_A, ImGuiKey_MouseLeft, ImGuiKey_GamepadDpadUp...).
// - before v1.87, we used ImGuiKey to carry native/user indices as defined by each backends. About use of those legacy ImGuiKey values:
//  - without IMGUI_DISABLE_OBSOLETE_KEYIO (legacy support): you can still use your legacy native/user indices (< 512) according to how your backend/engine stored them in io.KeysDown[], but need to cast them to ImGuiKey.
//  - with    IMGUI_DISABLE_OBSOLETE_KEYIO (this is the way forward): any use of ImGuiKey will assert with key < 512. GetKeyIndex() is pass-through and therefore deprecated (gone if IMGUI_DISABLE_OBSOLETE_KEYIO is defined).
public static native @Cast("bool") boolean ImGui_IsKeyDown(@Cast("ImGuiKey") int key);                                            // is key being held.
public static native @Cast("bool") boolean ImGui_IsKeyPressed(@Cast("ImGuiKey") int key);                                         // Implied repeat = true
public static native @Cast("bool") boolean ImGui_IsKeyPressedEx(@Cast("ImGuiKey") int key, @Cast("bool") boolean repeat);             // was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
public static native @Cast("bool") boolean ImGui_IsKeyReleased(@Cast("ImGuiKey") int key);                                        // was key released (went from Down to !Down)?
public static native @Cast("bool") boolean ImGui_IsKeyChordPressed(@Cast("ImGuiKeyChord") int key_chord);                         // was key chord (mods + key) pressed, e.g. you can pass 'ImGuiMod_Ctrl | ImGuiKey_S' as a key-chord. This doesn't do any routing or focus check, please consider using Shortcut() function instead.
public static native int ImGui_GetKeyPressedAmount(@Cast("ImGuiKey") int key, float repeat_delay, float rate);  // uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate
public static native @Cast("const char*") BytePointer ImGui_GetKeyName(@Cast("ImGuiKey") int key);                                           // [DEBUG] returns English name of the key. Those names a provided for debugging purpose and are not meant to be saved persistently not compared.
public static native void ImGui_SetNextFrameWantCaptureKeyboard(@Cast("bool") boolean want_capture_keyboard);        // Override io.WantCaptureKeyboard flag next frame (said flag is left for your application to handle, typically when true it instructs your app to ignore inputs). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard"; after the next NewFrame() call.

// Inputs Utilities: Shortcut Testing & Routing [BETA]
// - ImGuiKeyChord = a ImGuiKey + optional ImGuiMod_Alt/ImGuiMod_Ctrl/ImGuiMod_Shift/ImGuiMod_Super.
//       ImGuiKey_C                          // Accepted by functions taking ImGuiKey or ImGuiKeyChord arguments)
//       ImGuiMod_Ctrl | ImGuiKey_C          // Accepted by functions taking ImGuiKeyChord arguments)
//   only ImGuiMod_XXX values are legal to combine with an ImGuiKey. You CANNOT combine two ImGuiKey values.
// - The general idea is that several callers may register interest in a shortcut, and only one owner gets it.
//      Parent   -> call Shortcut(Ctrl+S)    // When Parent is focused, Parent gets the shortcut.
//        Child1 -> call Shortcut(Ctrl+S)    // When Child1 is focused, Child1 gets the shortcut (Child1 overrides Parent shortcuts)
//        Child2 -> no call                  // When Child2 is focused, Parent gets the shortcut.
//   The whole system is order independent, so if Child1 makes its calls before Parent, results will be identical.
//   This is an important property as it facilitate working with foreign code or larger codebase.
// - To understand the difference:
//   - IsKeyChordPressed() compares mods and call IsKeyPressed() -> function has no side-effect.
//   - Shortcut() submits a route, routes are resolved, if it currently can be routed it calls IsKeyChordPressed() -> function has (desirable) side-effects as it can prevents another call from getting the route.
// - Visualize registered routes in 'Metrics/Debugger->Inputs'.
public static native @Cast("bool") boolean ImGui_Shortcut(@Cast("ImGuiKeyChord") int key_chord, @Cast("ImGuiInputFlags") int flags);
public static native void ImGui_SetNextItemShortcut(@Cast("ImGuiKeyChord") int key_chord, @Cast("ImGuiInputFlags") int flags);

// Inputs Utilities: Key/Input Ownership [BETA]
// - One common use case would be to allow your items to disable standard inputs behaviors such
//   as Tab or Alt key handling, Mouse Wheel scrolling, etc.
//   e.g. Button(...); SetItemKeyOwner(ImGuiKey_MouseWheelY); to make hovering/activating a button disable wheel for scrolling.
// - Reminder ImGuiKey enum include access to mouse buttons and gamepad, so key ownership can apply to them.
// - Many related features are still in imgui_internal.h. For instance, most IsKeyXXX()/IsMouseXXX() functions have an owner-id-aware version.
public static native void ImGui_SetItemKeyOwner(@Cast("ImGuiKey") int key);  // Set key owner to last item ID if it is hovered or active. Equivalent to 'if (IsItemHovered() || IsItemActive()) { SetKeyOwner(key, GetItemID());'.

// Inputs Utilities: Mouse specific
// - To refer to a mouse button, you may use named enums in your code e.g. ImGuiMouseButton_Left, ImGuiMouseButton_Right.
// - You can also use regular integer: it is forever guaranteed that 0=Left, 1=Right, 2=Middle.
// - Dragging operations are only reported after mouse has moved a certain distance away from the initial clicking position (see 'lock_threshold' and 'io.MouseDraggingThreshold')
public static native @Cast("bool") boolean ImGui_IsMouseDown(@Cast("ImGuiMouseButton") int button);                                          // is mouse button held?
public static native @Cast("bool") boolean ImGui_IsMouseClicked(@Cast("ImGuiMouseButton") int button);                                       // Implied repeat = false
public static native @Cast("bool") boolean ImGui_IsMouseClickedEx(@Cast("ImGuiMouseButton") int button, @Cast("bool") boolean repeat);          // did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1.
public static native @Cast("bool") boolean ImGui_IsMouseReleased(@Cast("ImGuiMouseButton") int button);                                      // did mouse button released? (went from Down to !Down)
public static native @Cast("bool") boolean ImGui_IsMouseDoubleClicked(@Cast("ImGuiMouseButton") int button);                                 // did mouse button double-clicked? Same as GetMouseClickedCount() == 2. (note that a double-click will also report IsMouseClicked() == true)
public static native int ImGui_GetMouseClickedCount(@Cast("ImGuiMouseButton") int button);                                 // return the number of successive mouse-clicks at the time where a click happen (otherwise 0).
public static native @Cast("bool") boolean ImGui_IsMouseHoveringRect(@ByVal ImVec2 r_min, @ByVal ImVec2 r_max);                               // Implied clip = true
public static native @Cast("bool") boolean ImGui_IsMouseHoveringRectEx(@ByVal ImVec2 r_min, @ByVal ImVec2 r_max, @Cast("bool") boolean clip);     // is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.
public static native @Cast("bool") boolean ImGui_IsMousePosValid(@Const ImVec2 mouse_pos);                         // by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available
public static native @Cast("bool") boolean ImGui_IsAnyMouseDown();                                                          // [WILL OBSOLETE] is any mouse button held? This was designed for backends, but prefer having backend maintain a mask of held mouse buttons, because upcoming input queue system will make this invalid.
public static native @ByVal ImVec2 ImGui_GetMousePos();                                                             // shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls
public static native @ByVal ImVec2 ImGui_GetMousePosOnOpeningCurrentPopup();                                        // retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)
public static native @Cast("bool") boolean ImGui_IsMouseDragging(@Cast("ImGuiMouseButton") int button, float lock_threshold);  // is mouse dragging? (uses io.MouseDraggingThreshold if lock_threshold < 0.0f)
public static native @ByVal ImVec2 ImGui_GetMouseDragDelta(@Cast("ImGuiMouseButton") int button, float lock_threshold); // return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (uses io.MouseDraggingThreshold if lock_threshold < 0.0f)
public static native void ImGui_ResetMouseDragDelta();                                                     // Implied button = 0
public static native void ImGui_ResetMouseDragDeltaEx(@Cast("ImGuiMouseButton") int button);                      //
public static native @Cast("ImGuiMouseCursor") int ImGui_GetMouseCursor();                                                          // get desired mouse cursor shape. Important: reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you
public static native void ImGui_SetMouseCursor(@Cast("ImGuiMouseCursor") int cursor_type);                                  // set desired mouse cursor shape
public static native void ImGui_SetNextFrameWantCaptureMouse(@Cast("bool") boolean want_capture_mouse);                         // Override io.WantCaptureMouse flag next frame (said flag is left for your application to handle, typical when true it instucts your app to ignore inputs). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse;" after the next NewFrame() call.

// Clipboard Utilities
// - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard.
public static native @Cast("const char*") BytePointer ImGui_GetClipboardText();
public static native void ImGui_SetClipboardText(@Cast("const char*") BytePointer text);
public static native void ImGui_SetClipboardText(String text);

// Settings/.Ini Utilities
// - The disk functions are automatically called if io.IniFilename != NULL (default is "imgui.ini").
// - Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually.
// - Important: default value "imgui.ini" is relative to current working dir! Most apps will want to lock this to an absolute path (e.g. same path as executables).
public static native void ImGui_LoadIniSettingsFromDisk(@Cast("const char*") BytePointer ini_filename);
public static native void ImGui_LoadIniSettingsFromDisk(String ini_filename);                           // call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).
public static native void ImGui_LoadIniSettingsFromMemory(@Cast("const char*") BytePointer ini_data, @Cast("size_t") long ini_size);
public static native void ImGui_LoadIniSettingsFromMemory(String ini_data, @Cast("size_t") long ini_size);  // call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.
public static native void ImGui_SaveIniSettingsToDisk(@Cast("const char*") BytePointer ini_filename);
public static native void ImGui_SaveIniSettingsToDisk(String ini_filename);                             // this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).
public static native @Cast("const char*") BytePointer ImGui_SaveIniSettingsToMemory(@Cast("size_t*") SizeTPointer out_ini_size);                  // return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.

// Debug Utilities
// - Your main debugging friend is the ShowMetricsWindow() function, which is also accessible from Demo->Tools->Metrics Debugger
public static native void ImGui_DebugTextEncoding(@Cast("const char*") BytePointer text);
public static native void ImGui_DebugTextEncoding(String text);
public static native void ImGui_DebugFlashStyleColor(@Cast("ImGuiCol") int idx);
public static native void ImGui_DebugStartItemPicker();
public static native @Cast("bool") boolean ImGui_DebugCheckVersionAndDataLayout(@Cast("const char*") BytePointer version_str, @Cast("size_t") long sz_io, @Cast("size_t") long sz_style, @Cast("size_t") long sz_vec2, @Cast("size_t") long sz_vec4, @Cast("size_t") long sz_drawvert, @Cast("size_t") long sz_drawidx);
public static native @Cast("bool") boolean ImGui_DebugCheckVersionAndDataLayout(String version_str, @Cast("size_t") long sz_io, @Cast("size_t") long sz_style, @Cast("size_t") long sz_vec2, @Cast("size_t") long sz_vec4, @Cast("size_t") long sz_drawvert, @Cast("size_t") long sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.
// #ifndef IMGUI_DISABLE_DEBUG_TOOLS
public static native void ImGui_DebugLog(@Cast("const char*") BytePointer fmt);
public static native void ImGui_DebugLog(String fmt);            // Call via IMGUI_DEBUG_LOG() for maximum stripping in caller code!
public static native void ImGui_DebugLogV(@Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGui_DebugLogV(String fmt, @ByVal @Cast("va_list*") Pointer args);
// #endif // #ifndef IMGUI_DISABLE_DEBUG_TOOLS
// Memory Allocators
// - Those functions are not reliant on the current context.
// - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()
//   for each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for more details.
public static native void ImGui_SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, Pointer user_data);
public static native void ImGui_GetAllocatorFunctions(@ByPtrPtr ImGuiMemAllocFunc p_alloc_func, @ByPtrPtr ImGuiMemFreeFunc p_free_func, @Cast("void**") PointerPointer p_user_data);
public static native void ImGui_GetAllocatorFunctions(@ByPtrPtr ImGuiMemAllocFunc p_alloc_func, @ByPtrPtr ImGuiMemFreeFunc p_free_func, @Cast("void**") @ByPtrPtr Pointer p_user_data);
public static native Pointer ImGui_MemAlloc(@Cast("size_t") long size);
public static native void ImGui_MemFree(Pointer ptr);

// (Optional) Platform/OS interface for multi-viewport support
// Read comments around the ImGuiPlatformIO structure for more details.
// Note: You may use GetWindowViewport() to get the current viewport of the current window.
public static native void ImGui_UpdatePlatformWindows();                          // call in main loop. will call CreateWindow/ResizeWindow/etc. platform functions for each secondary viewport, and DestroyWindow for each inactive viewport.
public static native void ImGui_RenderPlatformWindowsDefault();                   // Implied platform_render_arg = NULL, renderer_render_arg = NULL
public static native void ImGui_RenderPlatformWindowsDefaultEx(Pointer platform_render_arg, Pointer renderer_render_arg); // call in main loop. will call RenderWindow/SwapBuffers platform functions for each secondary viewport which doesn't have the ImGuiViewportFlags_Minimized flag set. May be reimplemented by user for custom rendering needs.
public static native void ImGui_DestroyPlatformWindows();                         // call DestroyWindow platform functions for all viewports. call from backend Shutdown() if you need to close platform windows before imgui shutdown. otherwise will be called by DestroyContext().
public static native ImGuiViewport ImGui_FindViewportByID(@Cast("ImGuiID") int id);                         // this is a helper for backends.
public static native ImGuiViewport ImGui_FindViewportByPlatformHandle(Pointer platform_handle);  // this is a helper for backends. the type platform_handle is decided by the backend (e.g. HWND, MyWindow*, GLFWwindow* etc.)

//-----------------------------------------------------------------------------
// [SECTION] Flags & Enumerations
//-----------------------------------------------------------------------------

// Flags for ImGui::Begin()
// (Those are per-window flags. There are shared flags in ImGuiIO: io.ConfigWindowsResizeFromEdges and io.ConfigWindowsMoveFromTitleBarOnly)
/** enum ImGuiWindowFlags_ */
public static final int
    ImGuiWindowFlags_None                      = 0,
    ImGuiWindowFlags_NoTitleBar                = 1<<0,   // Disable title-bar
    ImGuiWindowFlags_NoResize                  = 1<<1,   // Disable user resizing with the lower-right grip
    ImGuiWindowFlags_NoMove                    = 1<<2,   // Disable user moving the window
    ImGuiWindowFlags_NoScrollbar               = 1<<3,   // Disable scrollbars (window can still scroll with mouse or programmatically)
    ImGuiWindowFlags_NoScrollWithMouse         = 1<<4,   // Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.
    ImGuiWindowFlags_NoCollapse                = 1<<5,   // Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).
    ImGuiWindowFlags_AlwaysAutoResize          = 1<<6,   // Resize every window to its content every frame
    ImGuiWindowFlags_NoBackground              = 1<<7,   // Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).
    ImGuiWindowFlags_NoSavedSettings           = 1<<8,   // Never load/save settings in .ini file
    ImGuiWindowFlags_NoMouseInputs             = 1<<9,   // Disable catching mouse, hovering test with pass through.
    ImGuiWindowFlags_MenuBar                   = 1<<10,  // Has a menu-bar
    ImGuiWindowFlags_HorizontalScrollbar       = 1<<11,  // Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.
    ImGuiWindowFlags_NoFocusOnAppearing        = 1<<12,  // Disable taking focus when transitioning from hidden to visible state
    ImGuiWindowFlags_NoBringToFrontOnFocus     = 1<<13,  // Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)
    ImGuiWindowFlags_AlwaysVerticalScrollbar   = 1<<14,  // Always show vertical scrollbar (even if ContentSize.y < Size.y)
    ImGuiWindowFlags_AlwaysHorizontalScrollbar = 1<<15,  // Always show horizontal scrollbar (even if ContentSize.x < Size.x)
    ImGuiWindowFlags_NoNavInputs               = 1<<16,  // No gamepad/keyboard navigation within the window
    ImGuiWindowFlags_NoNavFocus                = 1<<17,  // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)
    ImGuiWindowFlags_UnsavedDocument           = 1<<18,  // Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
    ImGuiWindowFlags_NoDocking                 = 1<<19,  // Disable docking of this window
    ImGuiWindowFlags_NoNav                     = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
    ImGuiWindowFlags_NoDecoration              = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,
    ImGuiWindowFlags_NoInputs                  = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,

    // [Internal]
    ImGuiWindowFlags_ChildWindow               = 1<<24,  // Don't use! For internal use by BeginChild()
    ImGuiWindowFlags_Tooltip                   = 1<<25,  // Don't use! For internal use by BeginTooltip()
    ImGuiWindowFlags_Popup                     = 1<<26,  // Don't use! For internal use by BeginPopup()
    ImGuiWindowFlags_Modal                     = 1<<27,  // Don't use! For internal use by BeginPopupModal()
    ImGuiWindowFlags_ChildMenu                 = 1<<28,  // Don't use! For internal use by BeginMenu()
    ImGuiWindowFlags_DockNodeHost              = 1<<29,  // Don't use! For internal use by Begin()/NewFrame()

    // Obsolete names
// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    ImGuiWindowFlags_AlwaysUseWindowPadding    = 1<<30,  // Obsoleted in 1.90.0: Use ImGuiChildFlags_AlwaysUseWindowPadding in BeginChild() call.
    ImGuiWindowFlags_NavFlattened              = 1<<31;  // Obsoleted in 1.90.9: Use ImGuiChildFlags_NavFlattened in BeginChild() call.
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

// Flags for ImGui::BeginChild()
// (Legacy: bit 0 must always correspond to ImGuiChildFlags_Borders to be backward compatible with old API using 'bool border = false'.
// About using AutoResizeX/AutoResizeY flags:
// - May be combined with SetNextWindowSizeConstraints() to set a min/max size for each axis (see "Demo->Child->Auto-resize with Constraints").
// - Size measurement for a given axis is only performed when the child window is within visible boundaries, or is just appearing.
//   - This allows BeginChild() to return false when not within boundaries (e.g. when scrolling), which is more optimal. BUT it won't update its auto-size while clipped.
//     While not perfect, it is a better default behavior as the always-on performance gain is more valuable than the occasional "resizing after becoming visible again" glitch.
//   - You may also use ImGuiChildFlags_AlwaysAutoResize to force an update even when child window is not in view.
//     HOWEVER PLEASE UNDERSTAND THAT DOING SO WILL PREVENT BeginChild() FROM EVER RETURNING FALSE, disabling benefits of coarse clipping.
/** enum ImGuiChildFlags_ */
public static final int
    ImGuiChildFlags_None                   = 0,
    ImGuiChildFlags_Borders                = 1<<0,                     // Show an outer border and enable WindowPadding. (IMPORTANT: this is always == 1 == true for legacy reason)
    ImGuiChildFlags_AlwaysUseWindowPadding = 1<<1,                     // Pad with style.WindowPadding even if no border are drawn (no padding by default for non-bordered child windows because it makes more sense)
    ImGuiChildFlags_ResizeX                = 1<<2,                     // Allow resize from right border (layout direction). Enable .ini saving (unless ImGuiWindowFlags_NoSavedSettings passed to window flags)
    ImGuiChildFlags_ResizeY                = 1<<3,                     // Allow resize from bottom border (layout direction). "
    ImGuiChildFlags_AutoResizeX            = 1<<4,                     // Enable auto-resizing width. Read "IMPORTANT: Size measurement" details above.
    ImGuiChildFlags_AutoResizeY            = 1<<5,                     // Enable auto-resizing height. Read "IMPORTANT: Size measurement" details above.
    ImGuiChildFlags_AlwaysAutoResize       = 1<<6,                     // Combined with AutoResizeX/AutoResizeY. Always measure size even when child is hidden, always return true, always disable clipping optimization! NOT RECOMMENDED.
    ImGuiChildFlags_FrameStyle             = 1<<7,                     // Style the child window like a framed item: use FrameBg, FrameRounding, FrameBorderSize, FramePadding instead of ChildBg, ChildRounding, ChildBorderSize, WindowPadding.
    ImGuiChildFlags_NavFlattened           = 1<<8,                     // [BETA] Share focus scope, allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows.

    // Obsolete names
// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    ImGuiChildFlags_Border                 = ImGuiChildFlags_Borders;  // Renamed in 1.91.1 (August 2024) for consistency.
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

// Flags for ImGui::PushItemFlag()
// (Those are shared by all items)
/** enum ImGuiItemFlags_ */
public static final int
    ImGuiItemFlags_None              = 0,     // (Default)
    ImGuiItemFlags_NoTabStop         = 1<<0,  // false    // Disable keyboard tabbing. This is a "lighter" version of ImGuiItemFlags_NoNav.
    ImGuiItemFlags_NoNav             = 1<<1,  // false    // Disable any form of focusing (keyboard/gamepad directional navigation and SetKeyboardFocusHere() calls).
    ImGuiItemFlags_NoNavDefaultFocus = 1<<2,  // false    // Disable item being a candidate for default focus (e.g. used by title bar items).
    ImGuiItemFlags_ButtonRepeat      = 1<<3,  // false    // Any button-like behavior will have repeat mode enabled (based on io.KeyRepeatDelay and io.KeyRepeatRate values). Note that you can also call IsItemActive() after any button to tell if it is being held.
    ImGuiItemFlags_AutoClosePopups   = 1<<4;  // true     // MenuItem()/Selectable() automatically close their parent popup window.

// Flags for ImGui::InputText()
// (Those are per-item flags. There are shared flags in ImGuiIO: io.ConfigInputTextCursorBlink and io.ConfigInputTextEnterKeepActive)
/** enum ImGuiInputTextFlags_ */
public static final int
    // Basic filters (also see ImGuiInputTextFlags_CallbackCharFilter)
    ImGuiInputTextFlags_None                = 0,
    ImGuiInputTextFlags_CharsDecimal        = 1<<0,   // Allow 0123456789.+-*/
    ImGuiInputTextFlags_CharsHexadecimal    = 1<<1,   // Allow 0123456789ABCDEFabcdef
    ImGuiInputTextFlags_CharsScientific     = 1<<2,   // Allow 0123456789.+-*/eE (Scientific notation input)
    ImGuiInputTextFlags_CharsUppercase      = 1<<3,   // Turn a..z into A..Z
    ImGuiInputTextFlags_CharsNoBlank        = 1<<4,   // Filter out spaces, tabs

    // Inputs
    ImGuiInputTextFlags_AllowTabInput       = 1<<5,   // Pressing TAB input a '\t' character into the text field
    ImGuiInputTextFlags_EnterReturnsTrue    = 1<<6,   // Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.
    ImGuiInputTextFlags_EscapeClearsAll     = 1<<7,   // Escape key clears content if not empty, and deactivate otherwise (contrast to default behavior of Escape to revert)
    ImGuiInputTextFlags_CtrlEnterForNewLine = 1<<8,   // In multi-line mode, validate with Enter, add new line with Ctrl+Enter (default is opposite: validate with Ctrl+Enter, add line with Enter).

    // Other options
    ImGuiInputTextFlags_ReadOnly            = 1<<9,   // Read-only mode
    ImGuiInputTextFlags_Password            = 1<<10,  // Password mode, display all characters as '*', disable copy
    ImGuiInputTextFlags_AlwaysOverwrite     = 1<<11,  // Overwrite mode
    ImGuiInputTextFlags_AutoSelectAll       = 1<<12,  // Select entire text when first taking mouse focus
    ImGuiInputTextFlags_ParseEmptyRefVal    = 1<<13,  // InputFloat(), InputInt(), InputScalar() etc. only: parse empty string as zero value.
    ImGuiInputTextFlags_DisplayEmptyRefVal  = 1<<14,  // InputFloat(), InputInt(), InputScalar() etc. only: when value is zero, do not display it. Generally used with ImGuiInputTextFlags_ParseEmptyRefVal.
    ImGuiInputTextFlags_NoHorizontalScroll  = 1<<15,  // Disable following the cursor horizontally
    ImGuiInputTextFlags_NoUndoRedo          = 1<<16,  // Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().

    // Callback features
    ImGuiInputTextFlags_CallbackCompletion  = 1<<17,  // Callback on pressing TAB (for completion handling)
    ImGuiInputTextFlags_CallbackHistory     = 1<<18,  // Callback on pressing Up/Down arrows (for history handling)
    ImGuiInputTextFlags_CallbackAlways      = 1<<19,  // Callback on each iteration. User code may query cursor position, modify text buffer.
    ImGuiInputTextFlags_CallbackCharFilter  = 1<<20,  // Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.
    ImGuiInputTextFlags_CallbackResize      = 1<<21,  // Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)
    ImGuiInputTextFlags_CallbackEdit        = 1<<22;  // Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)

    // Obsolete names
    //ImGuiInputTextFlags_AlwaysInsertMode  = ImGuiInputTextFlags_AlwaysOverwrite   // [renamed in 1.82] name was not matching behavior

// Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()
/** enum ImGuiTreeNodeFlags_ */
public static final int
    ImGuiTreeNodeFlags_None                 = 0,
    ImGuiTreeNodeFlags_Selected             = 1<<0,                             // Draw as selected
    ImGuiTreeNodeFlags_Framed               = 1<<1,                             // Draw frame with background (e.g. for CollapsingHeader)
    ImGuiTreeNodeFlags_AllowOverlap         = 1<<2,                             // Hit testing to allow subsequent widgets to overlap this one
    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1<<3,                             // Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack
    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1<<4,                             // Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)
    ImGuiTreeNodeFlags_DefaultOpen          = 1<<5,                             // Default node to be open
    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1<<6,                             // Open on double-click instead of simple click (default for multi-select unless any _OpenOnXXX behavior is set explicitly). Both behaviors may be combined.
    ImGuiTreeNodeFlags_OpenOnArrow          = 1<<7,                             // Open when clicking on the arrow part (default for multi-select unless any _OpenOnXXX behavior is set explicitly). Both behaviors may be combined.
    ImGuiTreeNodeFlags_Leaf                 = 1<<8,                             // No collapsing, no arrow (use as a convenience for leaf nodes).
    ImGuiTreeNodeFlags_Bullet               = 1<<9,                             // Display a bullet instead of arrow. IMPORTANT: node can still be marked open/close if you don't set the _Leaf flag!
    ImGuiTreeNodeFlags_FramePadding         = 1<<10,                            // Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding() before the node.
    ImGuiTreeNodeFlags_SpanAvailWidth       = 1<<11,                            // Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line without using AllowOverlap mode.
    ImGuiTreeNodeFlags_SpanFullWidth        = 1<<12,                            // Extend hit box to the left-most and right-most edges (cover the indent area).
    ImGuiTreeNodeFlags_SpanTextWidth        = 1<<13,                            // Narrow hit box + narrow hovering highlight, will only cover the label text.
    ImGuiTreeNodeFlags_SpanAllColumns       = 1<<14,                            // Frame will span all columns of its container table (text will still fit in current column)
    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1<<15,                            // (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)
    //ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 16,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible
    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog,

// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    ImGuiTreeNodeFlags_AllowItemOverlap     = ImGuiTreeNodeFlags_AllowOverlap;  // Renamed in 1.89.7
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

// Flags for OpenPopup*(), BeginPopupContext*(), IsPopupOpen() functions.
// - To be backward compatible with older API which took an 'int mouse_button = 1' argument instead of 'ImGuiPopupFlags flags',
//   we need to treat small flags values as a mouse button index, so we encode the mouse button in the first few bits of the flags.
//   It is therefore guaranteed to be legal to pass a mouse button index in ImGuiPopupFlags.
// - For the same reason, we exceptionally default the ImGuiPopupFlags argument of BeginPopupContextXXX functions to 1 instead of 0.
//   IMPORTANT: because the default parameter is 1 (==ImGuiPopupFlags_MouseButtonRight), if you rely on the default parameter
//   and want to use another flag, you need to pass in the ImGuiPopupFlags_MouseButtonRight flag explicitly.
// - Multiple buttons currently cannot be combined/or-ed in those functions (we could allow it later).
/** enum ImGuiPopupFlags_ */
public static final int
    ImGuiPopupFlags_None                    = 0,
    ImGuiPopupFlags_MouseButtonLeft         = 0,      // For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)
    ImGuiPopupFlags_MouseButtonRight        = 1,      // For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)
    ImGuiPopupFlags_MouseButtonMiddle       = 2,      // For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)
    ImGuiPopupFlags_MouseButtonMask_        = 0x1F,
    ImGuiPopupFlags_MouseButtonDefault_     = 1,
    ImGuiPopupFlags_NoReopen                = 1<<5,   // For OpenPopup*(), BeginPopupContext*(): don't reopen same popup if already open (won't reposition, won't reinitialize navigation)
    //ImGuiPopupFlags_NoReopenAlwaysNavInit = 1 << 6,   // For OpenPopup*(), BeginPopupContext*(): focus and initialize navigation even when not reopening.
    ImGuiPopupFlags_NoOpenOverExistingPopup = 1<<7,   // For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack
    ImGuiPopupFlags_NoOpenOverItems         = 1<<8,   // For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space
    ImGuiPopupFlags_AnyPopupId              = 1<<10,  // For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.
    ImGuiPopupFlags_AnyPopupLevel           = 1<<11,  // For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)
    ImGuiPopupFlags_AnyPopup                = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel;

// Flags for ImGui::Selectable()
/** enum ImGuiSelectableFlags_ */
public static final int
    ImGuiSelectableFlags_None              = 0,
    ImGuiSelectableFlags_NoAutoClosePopups = 1<<0,                                    // Clicking this doesn't close parent popup window (overrides ImGuiItemFlags_AutoClosePopups)
    ImGuiSelectableFlags_SpanAllColumns    = 1<<1,                                    // Frame will span all columns of its container table (text will still fit in current column)
    ImGuiSelectableFlags_AllowDoubleClick  = 1<<2,                                    // Generate press events on double clicks too
    ImGuiSelectableFlags_Disabled          = 1<<3,                                    // Cannot be selected, display grayed out text
    ImGuiSelectableFlags_AllowOverlap      = 1<<4,                                    // (WIP) Hit testing to allow subsequent widgets to overlap this one
    ImGuiSelectableFlags_Highlight         = 1<<5,                                    // Make the item be displayed as if it is hovered

// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    ImGuiSelectableFlags_DontClosePopups   = ImGuiSelectableFlags_NoAutoClosePopups,  // Renamed in 1.91.0
    ImGuiSelectableFlags_AllowItemOverlap  = ImGuiSelectableFlags_AllowOverlap;       // Renamed in 1.89.7
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

// Flags for ImGui::BeginCombo()
/** enum ImGuiComboFlags_ */
public static final int
    ImGuiComboFlags_None            = 0,
    ImGuiComboFlags_PopupAlignLeft  = 1<<0,  // Align the popup toward the left by default
    ImGuiComboFlags_HeightSmall     = 1<<1,  // Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()
    ImGuiComboFlags_HeightRegular   = 1<<2,  // Max ~8 items visible (default)
    ImGuiComboFlags_HeightLarge     = 1<<3,  // Max ~20 items visible
    ImGuiComboFlags_HeightLargest   = 1<<4,  // As many fitting items as possible
    ImGuiComboFlags_NoArrowButton   = 1<<5,  // Display on the preview box without the square arrow button
    ImGuiComboFlags_NoPreview       = 1<<6,  // Display only a square arrow button
    ImGuiComboFlags_WidthFitPreview = 1<<7,  // Width dynamically calculated from preview contents
    ImGuiComboFlags_HeightMask_     = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest;

// Flags for ImGui::BeginTabBar()
/** enum ImGuiTabBarFlags_ */
public static final int
    ImGuiTabBarFlags_None                         = 0,
    ImGuiTabBarFlags_Reorderable                  = 1<<0,  // Allow manually dragging tabs to re-order them + New tabs are appended at the end of list
    ImGuiTabBarFlags_AutoSelectNewTabs            = 1<<1,  // Automatically select new tabs when they appear
    ImGuiTabBarFlags_TabListPopupButton           = 1<<2,  // Disable buttons to open the tab list popup
    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = 1<<3,  // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You may handle this behavior manually on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.
    ImGuiTabBarFlags_NoTabListScrollingButtons    = 1<<4,  // Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)
    ImGuiTabBarFlags_NoTooltip                    = 1<<5,  // Disable tooltips when hovering a tab
    ImGuiTabBarFlags_DrawSelectedOverline         = 1<<6,  // Draw selected overline markers over selected tab
    ImGuiTabBarFlags_FittingPolicyResizeDown      = 1<<7,  // Resize tabs when they don't fit
    ImGuiTabBarFlags_FittingPolicyScroll          = 1<<8,  // Add scroll buttons when tabs don't fit
    ImGuiTabBarFlags_FittingPolicyMask_           = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,
    ImGuiTabBarFlags_FittingPolicyDefault_        = ImGuiTabBarFlags_FittingPolicyResizeDown;

// Flags for ImGui::BeginTabItem()
/** enum ImGuiTabItemFlags_ */
public static final int
    ImGuiTabItemFlags_None                         = 0,
    ImGuiTabItemFlags_UnsavedDocument              = 1<<0,  // Display a dot next to the title + set ImGuiTabItemFlags_NoAssumedClosure.
    ImGuiTabItemFlags_SetSelected                  = 1<<1,  // Trigger flag to programmatically make the tab selected when calling BeginTabItem()
    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 1<<2,  // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You may handle this behavior manually on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.
    ImGuiTabItemFlags_NoPushId                     = 1<<3,  // Don't call PushID()/PopID() on BeginTabItem()/EndTabItem()
    ImGuiTabItemFlags_NoTooltip                    = 1<<4,  // Disable tooltip for the given tab
    ImGuiTabItemFlags_NoReorder                    = 1<<5,  // Disable reordering this tab or having another tab cross over this tab
    ImGuiTabItemFlags_Leading                      = 1<<6,  // Enforce the tab position to the left of the tab bar (after the tab list popup button)
    ImGuiTabItemFlags_Trailing                     = 1<<7,  // Enforce the tab position to the right of the tab bar (before the scrolling buttons)
    ImGuiTabItemFlags_NoAssumedClosure             = 1<<8;  // Tab is selected when trying to close + closure is not immediately assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.

// Flags for ImGui::IsWindowFocused()
/** enum ImGuiFocusedFlags_ */
public static final int
    ImGuiFocusedFlags_None                = 0,
    ImGuiFocusedFlags_ChildWindows        = 1<<0,  // Return true if any children of the window is focused
    ImGuiFocusedFlags_RootWindow          = 1<<1,  // Test from root window (top most parent of the current hierarchy)
    ImGuiFocusedFlags_AnyWindow           = 1<<2,  // Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!
    ImGuiFocusedFlags_NoPopupHierarchy    = 1<<3,  // Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
    ImGuiFocusedFlags_DockHierarchy       = 1<<4,  // Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
    ImGuiFocusedFlags_RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows;

// Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()
// Note: if you are trying to check whether your mouse should be dispatched to Dear ImGui or to your app, you should use 'io.WantCaptureMouse' instead! Please read the FAQ!
// Note: windows with the ImGuiWindowFlags_NoInputs flag are ignored by IsWindowHovered() calls.
/** enum ImGuiHoveredFlags_ */
public static final int
    ImGuiHoveredFlags_None                         = 0,      // Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.
    ImGuiHoveredFlags_ChildWindows                 = 1<<0,   // IsWindowHovered() only: Return true if any children of the window is hovered
    ImGuiHoveredFlags_RootWindow                   = 1<<1,   // IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)
    ImGuiHoveredFlags_AnyWindow                    = 1<<2,   // IsWindowHovered() only: Return true if any window is hovered
    ImGuiHoveredFlags_NoPopupHierarchy             = 1<<3,   // IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
    ImGuiHoveredFlags_DockHierarchy                = 1<<4,   // IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
    ImGuiHoveredFlags_AllowWhenBlockedByPopup      = 1<<5,   // Return true even if a popup window is normally blocking access to this item/window
    //ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 << 6,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.
    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 1<<7,   // Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.
    ImGuiHoveredFlags_AllowWhenOverlappedByItem    = 1<<8,   // IsItemHovered() only: Return true even if the item uses AllowOverlap mode and is overlapped by another hoverable item.
    ImGuiHoveredFlags_AllowWhenOverlappedByWindow  = 1<<9,   // IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window.
    ImGuiHoveredFlags_AllowWhenDisabled            = 1<<10,  // IsItemHovered() only: Return true even if the item is disabled
    ImGuiHoveredFlags_NoNavOverride                = 1<<11,  // IsItemHovered() only: Disable using gamepad/keyboard navigation state when active, always query mouse
    ImGuiHoveredFlags_AllowWhenOverlapped          = ImGuiHoveredFlags_AllowWhenOverlappedByItem | ImGuiHoveredFlags_AllowWhenOverlappedByWindow,
    ImGuiHoveredFlags_RectOnly                     = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
    ImGuiHoveredFlags_RootAndChildWindows          = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows,

    // Tooltips mode
    // - typically used in IsItemHovered() + SetTooltip() sequence.
    // - this is a shortcut to pull flags from 'style.HoverFlagsForTooltipMouse' or 'style.HoverFlagsForTooltipNav' where you can reconfigure desired behavior.
    //   e.g. 'TooltipHoveredFlagsForMouse' defaults to 'ImGuiHoveredFlags_Stationary | ImGuiHoveredFlags_DelayShort'.
    // - for frequently actioned or hovered items providing a tooltip, you want may to use ImGuiHoveredFlags_ForTooltip (stationary + delay) so the tooltip doesn't show too often.
    // - for items which main purpose is to be hovered, or items with low affordance, or in less consistent apps, prefer no delay or shorter delay.
    ImGuiHoveredFlags_ForTooltip                   = 1<<12,  // Shortcut for standard flags when using IsItemHovered() + SetTooltip() sequence.

    // (Advanced) Mouse Hovering delays.
    // - generally you can use ImGuiHoveredFlags_ForTooltip to use application-standardized flags.
    // - use those if you need specific overrides.
    ImGuiHoveredFlags_Stationary                   = 1<<13,  // Require mouse to be stationary for style.HoverStationaryDelay (~0.15 sec) _at least one time_. After this, can move on same item/window. Using the stationary test tends to reduces the need for a long delay.
    ImGuiHoveredFlags_DelayNone                    = 1<<14,  // IsItemHovered() only: Return true immediately (default). As this is the default you generally ignore this.
    ImGuiHoveredFlags_DelayShort                   = 1<<15,  // IsItemHovered() only: Return true after style.HoverDelayShort elapsed (~0.15 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).
    ImGuiHoveredFlags_DelayNormal                  = 1<<16,  // IsItemHovered() only: Return true after style.HoverDelayNormal elapsed (~0.40 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).
    ImGuiHoveredFlags_NoSharedDelay                = 1<<17;  // IsItemHovered() only: Disable shared delay system where moving from one item to the next keeps the previous timer for a short time (standard for tooltips with long delays)

// Flags for ImGui::DockSpace(), shared/inherited by child nodes.
// (Some flags can be applied to individual nodes directly)
// FIXME-DOCK: Also see ImGuiDockNodeFlagsPrivate_ which may involve using the WIP and internal DockBuilder api.
/** enum ImGuiDockNodeFlags_ */
public static final int
    ImGuiDockNodeFlags_None                     = 0,
    ImGuiDockNodeFlags_KeepAliveOnly            = 1<<0,                                         //       // Don't display the dockspace node but keep it alive. Windows docked into this dockspace node won't be undocked.
    //ImGuiDockNodeFlags_NoCentralNode              = 1 << 1,   //       // Disable Central Node (the node which can stay empty)
    ImGuiDockNodeFlags_NoDockingOverCentralNode = 1<<2,                                         //       // Disable docking over the Central Node, which will be always kept empty.
    ImGuiDockNodeFlags_PassthruCentralNode      = 1<<3,                                         //       // Enable passthru dockspace: 1) DockSpace() will render a ImGuiCol_WindowBg background covering everything excepted the Central Node when empty. Meaning the host window should probably use SetNextWindowBgAlpha(0.0f) prior to Begin() when using this. 2) When Central Node is empty: let inputs pass-through + won't display a DockingEmptyBg background. See demo for details.
    ImGuiDockNodeFlags_NoDockingSplit           = 1<<4,                                         //       // Disable other windows/nodes from splitting this node.
    ImGuiDockNodeFlags_NoResize                 = 1<<5,                                         // Saved // Disable resizing node using the splitter/separators. Useful with programmatically setup dockspaces.
    ImGuiDockNodeFlags_AutoHideTabBar           = 1<<6,                                         //       // Tab bar will automatically hide when there is a single window in the dock node.
    ImGuiDockNodeFlags_NoUndocking              = 1<<7,                                         //       // Disable undocking this node.

// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    ImGuiDockNodeFlags_NoSplit                  = ImGuiDockNodeFlags_NoDockingSplit,            // Renamed in 1.90
    ImGuiDockNodeFlags_NoDockingInCentralNode   = ImGuiDockNodeFlags_NoDockingOverCentralNode;  // Renamed in 1.90
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

// Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()
/** enum ImGuiDragDropFlags_ */
public static final int
    ImGuiDragDropFlags_None                     = 0,
    // BeginDragDropSource() flags
    ImGuiDragDropFlags_SourceNoPreviewTooltip   = 1<<0,                                  // Disable preview tooltip. By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disables this behavior.
    ImGuiDragDropFlags_SourceNoDisableHover     = 1<<1,                                  // By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disables this behavior so you can still call IsItemHovered() on the source item.
    ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 1<<2,                                  // Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.
    ImGuiDragDropFlags_SourceAllowNullID        = 1<<3,                                  // Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.
    ImGuiDragDropFlags_SourceExtern             = 1<<4,                                  // External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously.
    ImGuiDragDropFlags_PayloadAutoExpire        = 1<<5,                                  // Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)
    ImGuiDragDropFlags_PayloadNoCrossContext    = 1<<6,                                  // Hint to specify that the payload may not be copied outside current dear imgui context.
    ImGuiDragDropFlags_PayloadNoCrossProcess    = 1<<7,                                  // Hint to specify that the payload may not be copied outside current process.
    // AcceptDragDropPayload() flags
    ImGuiDragDropFlags_AcceptBeforeDelivery     = 1<<10,                                 // AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.
    ImGuiDragDropFlags_AcceptNoDrawDefaultRect  = 1<<11,                                 // Do not draw the default highlight rectangle when hovering over target.
    ImGuiDragDropFlags_AcceptNoPreviewTooltip   = 1<<12,                                 // Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.
    ImGuiDragDropFlags_AcceptPeekOnly           = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect, // For peeking ahead and inspecting the payload before delivery.

// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    ImGuiDragDropFlags_SourceAutoExpirePayload  = ImGuiDragDropFlags_PayloadAutoExpire;  // Renamed in 1.90.9
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

// Standard Drag and Drop payload types. You can define you own payload types using short strings. Types starting with '_' are defined by Dear ImGui.
public static final String IMGUI_PAYLOAD_TYPE_COLOR_3F =     "_COL3F";     // float[3]: Standard type for colors, without alpha. User code may use this type.
public static final String IMGUI_PAYLOAD_TYPE_COLOR_4F =     "_COL4F";     // float[4]: Standard type for colors. User code may use this type.

// A primary data type
/** enum ImGuiDataType_ */
public static final int
    ImGuiDataType_S8 = 0,      // signed char / char (with sensible compilers)
    ImGuiDataType_U8 = 1,      // unsigned char
    ImGuiDataType_S16 = 2,     // short
    ImGuiDataType_U16 = 3,     // unsigned short
    ImGuiDataType_S32 = 4,     // int
    ImGuiDataType_U32 = 5,     // unsigned int
    ImGuiDataType_S64 = 6,     // long long / __int64
    ImGuiDataType_U64 = 7,     // unsigned long long / unsigned __int64
    ImGuiDataType_Float = 8,   // float
    ImGuiDataType_Double = 9,  // double
    ImGuiDataType_Bool = 10,    // bool (provided for user convenience, not supported by scalar widgets)
    ImGuiDataType_COUNT = 11;

// A cardinal direction
/** enum  */
public static final int
    ImGuiDir_None  = -1,
    ImGuiDir_Left  = 0,
    ImGuiDir_Right = 1,
    ImGuiDir_Up    = 2,
    ImGuiDir_Down  = 3,
    ImGuiDir_COUNT = 4;

// A sorting direction
/** enum  */
public static final int
    ImGuiSortDirection_None       = 0,
    ImGuiSortDirection_Ascending  = 1,                                      // Ascending = 0->9, A->Z etc.
    ImGuiSortDirection_Descending = 2;                                      // Descending = 9->0, Z->A etc.

// Since 1.90, defining IMGUI_DISABLE_OBSOLETE_FUNCTIONS automatically defines IMGUI_DISABLE_OBSOLETE_KEYIO as well.
// #if defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS)&&!defined(IMGUI_DISABLE_OBSOLETE_KEYIO)
// #define IMGUI_DISABLE_OBSOLETE_KEYIO
// #endif // #if defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS)&&!defined(IMGUI_DISABLE_OBSOLETE_KEYIO)
// A key identifier (ImGuiKey_XXX or ImGuiMod_XXX value): can represent Keyboard, Mouse and Gamepad values.
// All our named keys are >= 512. Keys value 0 to 511 are left unused as legacy native/opaque key values (< 1.87).
// Since >= 1.89 we increased typing (went from int to enum), some legacy code may need a cast to ImGuiKey.
// Read details about the 1.87 and 1.89 transition : https://github.com/ocornut/imgui/issues/4921
// Note that "Keys" related to physical keys and are not the same concept as input "Characters", the later are submitted via io.AddInputCharacter().
// The keyboard key enum values are named after the keys on a standard US keyboard, and on other keyboard types the keys reported may not match the keycaps.
/** enum  */
public static final int
    // Keyboard
    ImGuiKey_None                = 0,
    ImGuiKey_Tab                 = 512,                      // == ImGuiKey_NamedKey_BEGIN
    ImGuiKey_LeftArrow = 513,
    ImGuiKey_RightArrow = 514,
    ImGuiKey_UpArrow = 515,
    ImGuiKey_DownArrow = 516,
    ImGuiKey_PageUp = 517,
    ImGuiKey_PageDown = 518,
    ImGuiKey_Home = 519,
    ImGuiKey_End = 520,
    ImGuiKey_Insert = 521,
    ImGuiKey_Delete = 522,
    ImGuiKey_Backspace = 523,
    ImGuiKey_Space = 524,
    ImGuiKey_Enter = 525,
    ImGuiKey_Escape = 526,
    ImGuiKey_LeftCtrl = 527,
    ImGuiKey_LeftShift = 528,
    ImGuiKey_LeftAlt = 529,
    ImGuiKey_LeftSuper = 530,
    ImGuiKey_RightCtrl = 531,
    ImGuiKey_RightShift = 532,
    ImGuiKey_RightAlt = 533,
    ImGuiKey_RightSuper = 534,
    ImGuiKey_Menu = 535,
    ImGuiKey_0 = 536,
    ImGuiKey_1 = 537,
    ImGuiKey_2 = 538,
    ImGuiKey_3 = 539,
    ImGuiKey_4 = 540,
    ImGuiKey_5 = 541,
    ImGuiKey_6 = 542,
    ImGuiKey_7 = 543,
    ImGuiKey_8 = 544,
    ImGuiKey_9 = 545,
    ImGuiKey_A = 546,
    ImGuiKey_B = 547,
    ImGuiKey_C = 548,
    ImGuiKey_D = 549,
    ImGuiKey_E = 550,
    ImGuiKey_F = 551,
    ImGuiKey_G = 552,
    ImGuiKey_H = 553,
    ImGuiKey_I = 554,
    ImGuiKey_J = 555,
    ImGuiKey_K = 556,
    ImGuiKey_L = 557,
    ImGuiKey_M = 558,
    ImGuiKey_N = 559,
    ImGuiKey_O = 560,
    ImGuiKey_P = 561,
    ImGuiKey_Q = 562,
    ImGuiKey_R = 563,
    ImGuiKey_S = 564,
    ImGuiKey_T = 565,
    ImGuiKey_U = 566,
    ImGuiKey_V = 567,
    ImGuiKey_W = 568,
    ImGuiKey_X = 569,
    ImGuiKey_Y = 570,
    ImGuiKey_Z = 571,
    ImGuiKey_F1 = 572,
    ImGuiKey_F2 = 573,
    ImGuiKey_F3 = 574,
    ImGuiKey_F4 = 575,
    ImGuiKey_F5 = 576,
    ImGuiKey_F6 = 577,
    ImGuiKey_F7 = 578,
    ImGuiKey_F8 = 579,
    ImGuiKey_F9 = 580,
    ImGuiKey_F10 = 581,
    ImGuiKey_F11 = 582,
    ImGuiKey_F12 = 583,
    ImGuiKey_F13 = 584,
    ImGuiKey_F14 = 585,
    ImGuiKey_F15 = 586,
    ImGuiKey_F16 = 587,
    ImGuiKey_F17 = 588,
    ImGuiKey_F18 = 589,
    ImGuiKey_F19 = 590,
    ImGuiKey_F20 = 591,
    ImGuiKey_F21 = 592,
    ImGuiKey_F22 = 593,
    ImGuiKey_F23 = 594,
    ImGuiKey_F24 = 595,
    ImGuiKey_Apostrophe = 596,                                     // '
    ImGuiKey_Comma = 597,                                          // ,
    ImGuiKey_Minus = 598,                                          // -
    ImGuiKey_Period = 599,                                         // .
    ImGuiKey_Slash = 600,                                          // /
    ImGuiKey_Semicolon = 601,                                      // ;
    ImGuiKey_Equal = 602,                                          // =
    ImGuiKey_LeftBracket = 603,                                    // [
    ImGuiKey_Backslash = 604,                                      // \ (this text inhibit multiline comment caused by backslash)
    ImGuiKey_RightBracket = 605,                                   // ]
    ImGuiKey_GraveAccent = 606,                                    // `
    ImGuiKey_CapsLock = 607,
    ImGuiKey_ScrollLock = 608,
    ImGuiKey_NumLock = 609,
    ImGuiKey_PrintScreen = 610,
    ImGuiKey_Pause = 611,
    ImGuiKey_Keypad0 = 612,
    ImGuiKey_Keypad1 = 613,
    ImGuiKey_Keypad2 = 614,
    ImGuiKey_Keypad3 = 615,
    ImGuiKey_Keypad4 = 616,
    ImGuiKey_Keypad5 = 617,
    ImGuiKey_Keypad6 = 618,
    ImGuiKey_Keypad7 = 619,
    ImGuiKey_Keypad8 = 620,
    ImGuiKey_Keypad9 = 621,
    ImGuiKey_KeypadDecimal = 622,
    ImGuiKey_KeypadDivide = 623,
    ImGuiKey_KeypadMultiply = 624,
    ImGuiKey_KeypadSubtract = 625,
    ImGuiKey_KeypadAdd = 626,
    ImGuiKey_KeypadEnter = 627,
    ImGuiKey_KeypadEqual = 628,
    ImGuiKey_AppBack = 629,                                        // Available on some keyboard/mouses. Often referred as "Browser Back"
    ImGuiKey_AppForward = 630,

    // Gamepad (some of those are analog values, 0.0f to 1.0f)                          // NAVIGATION ACTION
    // (download controller mapping PNG/PSD at http://dearimgui.com/controls_sheets)
    ImGuiKey_GamepadStart = 631,                                   // Menu (Xbox)      + (Switch)   Start/Options (PS)
    ImGuiKey_GamepadBack = 632,                                    // View (Xbox)      - (Switch)   Share (PS)
    ImGuiKey_GamepadFaceLeft = 633,                                // X (Xbox)         Y (Switch)   Square (PS)        // Tap: Toggle Menu. Hold: Windowing mode (Focus/Move/Resize windows)
    ImGuiKey_GamepadFaceRight = 634,                               // B (Xbox)         A (Switch)   Circle (PS)        // Cancel / Close / Exit
    ImGuiKey_GamepadFaceUp = 635,                                  // Y (Xbox)         X (Switch)   Triangle (PS)      // Text Input / On-screen Keyboard
    ImGuiKey_GamepadFaceDown = 636,                                // A (Xbox)         B (Switch)   Cross (PS)         // Activate / Open / Toggle / Tweak
    ImGuiKey_GamepadDpadLeft = 637,                                // D-pad Left                                       // Move / Tweak / Resize Window (in Windowing mode)
    ImGuiKey_GamepadDpadRight = 638,                               // D-pad Right                                      // Move / Tweak / Resize Window (in Windowing mode)
    ImGuiKey_GamepadDpadUp = 639,                                  // D-pad Up                                         // Move / Tweak / Resize Window (in Windowing mode)
    ImGuiKey_GamepadDpadDown = 640,                                // D-pad Down                                       // Move / Tweak / Resize Window (in Windowing mode)
    ImGuiKey_GamepadL1 = 641,                                      // L Bumper (Xbox)  L (Switch)   L1 (PS)            // Tweak Slower / Focus Previous (in Windowing mode)
    ImGuiKey_GamepadR1 = 642,                                      // R Bumper (Xbox)  R (Switch)   R1 (PS)            // Tweak Faster / Focus Next (in Windowing mode)
    ImGuiKey_GamepadL2 = 643,                                      // L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]
    ImGuiKey_GamepadR2 = 644,                                      // R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]
    ImGuiKey_GamepadL3 = 645,                                      // L Stick (Xbox)   L3 (Switch)  L3 (PS)
    ImGuiKey_GamepadR3 = 646,                                      // R Stick (Xbox)   R3 (Switch)  R3 (PS)
    ImGuiKey_GamepadLStickLeft = 647,                              // [Analog]                                         // Move Window (in Windowing mode)
    ImGuiKey_GamepadLStickRight = 648,                             // [Analog]                                         // Move Window (in Windowing mode)
    ImGuiKey_GamepadLStickUp = 649,                                // [Analog]                                         // Move Window (in Windowing mode)
    ImGuiKey_GamepadLStickDown = 650,                              // [Analog]                                         // Move Window (in Windowing mode)
    ImGuiKey_GamepadRStickLeft = 651,                              // [Analog]
    ImGuiKey_GamepadRStickRight = 652,                             // [Analog]
    ImGuiKey_GamepadRStickUp = 653,                                // [Analog]
    ImGuiKey_GamepadRStickDown = 654,                              // [Analog]

    // Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls)
    // - This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.
    ImGuiKey_MouseLeft = 655,
    ImGuiKey_MouseRight = 656,
    ImGuiKey_MouseMiddle = 657,
    ImGuiKey_MouseX1 = 658,
    ImGuiKey_MouseX2 = 659,
    ImGuiKey_MouseWheelX = 660,
    ImGuiKey_MouseWheelY = 661,

    // [Internal] Reserved for mod storage
    ImGuiKey_ReservedForModCtrl = 662,
    ImGuiKey_ReservedForModShift = 663,
    ImGuiKey_ReservedForModAlt = 664,
    ImGuiKey_ReservedForModSuper = 665,
    ImGuiKey_COUNT = 666,

    // Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls)
    // - This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing
    //   them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc.
    // - Code polling every key (e.g. an interface to detect a key press for input mapping) might want to ignore those
    //   and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiMod_Ctrl).
    // - In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys.
    //   In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and
    //   backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...
    // - On macOS, we swap Cmd(Super) and Ctrl keys at the time of the io.AddKeyEvent() call.
    ImGuiMod_None                = 0,
    ImGuiMod_Ctrl                = 1<<12,                    // Ctrl (non-macOS), Cmd (macOS)
    ImGuiMod_Shift               = 1<<13,                    // Shift
    ImGuiMod_Alt                 = 1<<14,                    // Option/Menu
    ImGuiMod_Super               = 1<<15,                    // Windows/Super (non-macOS), Ctrl (macOS)
    ImGuiMod_Mask_               = 0xF000,                   // 4-bits

    // [Internal] Prior to 1.87 we required user to fill io.KeysDown[512] using their own native index + the io.KeyMap[] array.
    // We are ditching this method but keeping a legacy path for user code doing e.g. IsKeyPressed(MY_NATIVE_KEY_CODE)
    // If you need to iterate all keys (for e.g. an input mapper) you may use ImGuiKey_NamedKey_BEGIN..ImGuiKey_NamedKey_END.
    ImGuiKey_NamedKey_BEGIN      = 512,
    ImGuiKey_NamedKey_END        = ImGuiKey_COUNT,
    ImGuiKey_NamedKey_COUNT      = ImGuiKey_NamedKey_END-ImGuiKey_NamedKey_BEGIN,
// #ifdef IMGUI_DISABLE_OBSOLETE_KEYIO
// #else
    ImGuiKey_KeysData_SIZE       = ImGuiKey_COUNT,           // Size of KeysData[]: hold legacy 0..512 keycodes + named keys
    ImGuiKey_KeysData_OFFSET     = 0,                        // Accesses to io.KeysData[] must use (key - ImGuiKey_KeysData_OFFSET) index.
// #endif // #ifdef IMGUI_DISABLE_OBSOLETE_KEYIO
// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    ImGuiMod_Shortcut            = ImGuiMod_Ctrl,            // Removed in 1.90.7, you can now simply use ImGuiMod_Ctrl
    ImGuiKey_ModCtrl             = ImGuiMod_Ctrl,
    ImGuiKey_ModShift            = ImGuiMod_Shift,
    ImGuiKey_ModAlt              = ImGuiMod_Alt,
    ImGuiKey_ModSuper            = ImGuiMod_Super;           // Renamed in 1.89
    //ImGuiKey_KeyPadEnter = ImGuiKey_KeypadEnter,              // Renamed in 1.87
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

// Flags for Shortcut(), SetNextItemShortcut(),
// (and for upcoming extended versions of IsKeyPressed(), IsMouseClicked(), Shortcut(), SetKeyOwner(), SetItemKeyOwner() that are still in imgui_internal.h)
// Don't mistake with ImGuiInputTextFlags! (which is for ImGui::InputText() function)
/** enum ImGuiInputFlags_ */
public static final int
    ImGuiInputFlags_None                 = 0,
    ImGuiInputFlags_Repeat               = 1<<0,   // Enable repeat. Return true on successive repeats. Default for legacy IsKeyPressed(). NOT Default for legacy IsMouseClicked(). MUST BE == 1.

    // Flags for Shortcut(), SetNextItemShortcut()
    // - Routing policies: RouteGlobal+OverActive >> RouteActive or RouteFocused (if owner is active item) >> RouteGlobal+OverFocused >> RouteFocused (if in focused window stack) >> RouteGlobal.
    // - Default policy is RouteFocused. Can select only 1 policy among all available.
    ImGuiInputFlags_RouteActive          = 1<<10,  // Route to active item only.
    ImGuiInputFlags_RouteFocused         = 1<<11,  // Route to windows in the focus stack (DEFAULT). Deep-most focused window takes inputs. Active item takes inputs over deep-most focused window.
    ImGuiInputFlags_RouteGlobal          = 1<<12,  // Global route (unless a focused window or active item registered the route).
    ImGuiInputFlags_RouteAlways          = 1<<13,  // Do not register route, poll keys directly.
    // - Routing options
    ImGuiInputFlags_RouteOverFocused     = 1<<14,  // Option: global route: higher priority than focused route (unless active item in focused route).
    ImGuiInputFlags_RouteOverActive      = 1<<15,  // Option: global route: higher priority than active item. Unlikely you need to use that: will interfere with every active items, e.g. CTRL+A registered by InputText will be overridden by this. May not be fully honored as user/internal code is likely to always assume they can access keys when active.
    ImGuiInputFlags_RouteUnlessBgFocused = 1<<16,  // Option: global route: will not be applied if underlying background/void is focused (== no Dear ImGui windows are focused). Useful for overlay applications.
    ImGuiInputFlags_RouteFromRootWindow  = 1<<17,  // Option: route evaluated from the point of view of root window rather than current window.

    // Flags for SetNextItemShortcut()
    ImGuiInputFlags_Tooltip              = 1<<18;  // Automatically display a tooltip when hovering item [BETA] Unsure of right api (opt-in/opt-out)

// #ifndef IMGUI_DISABLE_OBSOLETE_KEYIO
// OBSOLETED in 1.88 (from July 2022): ImGuiNavInput and io.NavInputs[].
// Official backends between 1.60 and 1.86: will keep working and feed gamepad inputs as long as IMGUI_DISABLE_OBSOLETE_KEYIO is not set.
// Custom backends: feed gamepad inputs via io.AddKeyEvent() and ImGuiKey_GamepadXXX enums.
/** enum ImGuiNavInput */
public static final int
    ImGuiNavInput_Activate = 0,
    ImGuiNavInput_Cancel = 1,
    ImGuiNavInput_Input = 2,
    ImGuiNavInput_Menu = 3,
    ImGuiNavInput_DpadLeft = 4,
    ImGuiNavInput_DpadRight = 5,
    ImGuiNavInput_DpadUp = 6,
    ImGuiNavInput_DpadDown = 7,
    ImGuiNavInput_LStickLeft = 8,
    ImGuiNavInput_LStickRight = 9,
    ImGuiNavInput_LStickUp = 10,
    ImGuiNavInput_LStickDown = 11,
    ImGuiNavInput_FocusPrev = 12,
    ImGuiNavInput_FocusNext = 13,
    ImGuiNavInput_TweakSlow = 14,
    ImGuiNavInput_TweakFast = 15,
    ImGuiNavInput_COUNT = 16;
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_KEYIO
// Configuration flags stored in io.ConfigFlags. Set by user/application.
/** enum ImGuiConfigFlags_ */
public static final int
    ImGuiConfigFlags_None                    = 0,
    ImGuiConfigFlags_NavEnableKeyboard       = 1<<0,   // Master keyboard navigation enable flag. Enable full Tabbing + directional arrows + space/enter to activate.
    ImGuiConfigFlags_NavEnableGamepad        = 1<<1,   // Master gamepad navigation enable flag. Backend also needs to set ImGuiBackendFlags_HasGamepad.
    ImGuiConfigFlags_NavEnableSetMousePos    = 1<<2,   // Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your backend, otherwise ImGui will react as if the mouse is jumping around back and forth.
    ImGuiConfigFlags_NavNoCaptureKeyboard    = 1<<3,   // Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.
    ImGuiConfigFlags_NoMouse                 = 1<<4,   // Instruct dear imgui to disable mouse inputs and interactions.
    ImGuiConfigFlags_NoMouseCursorChange     = 1<<5,   // Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.
    ImGuiConfigFlags_NoKeyboard              = 1<<6,   // Instruct dear imgui to disable keyboard inputs and interactions. This is done by ignoring keyboard events and clearing existing states.

    // [BETA] Docking
    ImGuiConfigFlags_DockingEnable           = 1<<7,   // Docking enable flags.

    // [BETA] Viewports
    // When using viewports it is recommended that your default value for ImGuiCol_WindowBg is opaque (Alpha=1.0) so transition to a viewport won't be noticeable.
    ImGuiConfigFlags_ViewportsEnable         = 1<<10,  // Viewport enable flags (require both ImGuiBackendFlags_PlatformHasViewports + ImGuiBackendFlags_RendererHasViewports set by the respective backends)
    ImGuiConfigFlags_DpiEnableScaleViewports = 1<<14,  // [BETA: Don't use] FIXME-DPI: Reposition and resize imgui windows when the DpiScale of a viewport changed (mostly useful for the main viewport hosting other window). Note that resizing the main window itself is up to your application.
    ImGuiConfigFlags_DpiEnableScaleFonts     = 1<<15,  // [BETA: Don't use] FIXME-DPI: Request bitmap-scaled fonts to match DpiScale. This is a very low-quality workaround. The correct way to handle DPI is _currently_ to replace the atlas and/or fonts in the Platform_OnChangedViewport callback, but this is all early work in progress.

    // User storage (to allow your backend/engine to communicate to code that may be shared between multiple projects. Those flags are NOT used by core Dear ImGui)
    ImGuiConfigFlags_IsSRGB                  = 1<<20,  // Application is SRGB-aware.
    ImGuiConfigFlags_IsTouchScreen           = 1<<21;  // Application is using a touch screen instead of a mouse.

// Backend capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom backend.
/** enum ImGuiBackendFlags_ */
public static final int
    ImGuiBackendFlags_None                    = 0,
    ImGuiBackendFlags_HasGamepad              = 1<<0,   // Backend Platform supports gamepad and currently has one connected.
    ImGuiBackendFlags_HasMouseCursors         = 1<<1,   // Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.
    ImGuiBackendFlags_HasSetMousePos          = 1<<2,   // Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).
    ImGuiBackendFlags_RendererHasVtxOffset    = 1<<3,   // Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.

    // [BETA] Viewports
    ImGuiBackendFlags_PlatformHasViewports    = 1<<10,  // Backend Platform supports multiple viewports.
    ImGuiBackendFlags_HasMouseHoveredViewport = 1<<11,  // Backend Platform supports calling io.AddMouseViewportEvent() with the viewport under the mouse. IF POSSIBLE, ignore viewports with the ImGuiViewportFlags_NoInputs flag (Win32 backend, GLFW 3.30+ backend can do this, SDL backend cannot). If this cannot be done, Dear ImGui needs to use a flawed heuristic to find the viewport under.
    ImGuiBackendFlags_RendererHasViewports    = 1<<12;  // Backend Renderer supports multiple viewports.

// Enumeration for PushStyleColor() / PopStyleColor()
/** enum ImGuiCol_ */
public static final int
    ImGuiCol_Text = 0,
    ImGuiCol_TextDisabled = 1,
    ImGuiCol_WindowBg = 2,                                                // Background of normal windows
    ImGuiCol_ChildBg = 3,                                                 // Background of child windows
    ImGuiCol_PopupBg = 4,                                                 // Background of popups, menus, tooltips windows
    ImGuiCol_Border = 5,
    ImGuiCol_BorderShadow = 6,
    ImGuiCol_FrameBg = 7,                                                 // Background of checkbox, radio button, plot, slider, text input
    ImGuiCol_FrameBgHovered = 8,
    ImGuiCol_FrameBgActive = 9,
    ImGuiCol_TitleBg = 10,                                                 // Title bar
    ImGuiCol_TitleBgActive = 11,                                           // Title bar when focused
    ImGuiCol_TitleBgCollapsed = 12,                                        // Title bar when collapsed
    ImGuiCol_MenuBarBg = 13,
    ImGuiCol_ScrollbarBg = 14,
    ImGuiCol_ScrollbarGrab = 15,
    ImGuiCol_ScrollbarGrabHovered = 16,
    ImGuiCol_ScrollbarGrabActive = 17,
    ImGuiCol_CheckMark = 18,                                               // Checkbox tick and RadioButton circle
    ImGuiCol_SliderGrab = 19,
    ImGuiCol_SliderGrabActive = 20,
    ImGuiCol_Button = 21,
    ImGuiCol_ButtonHovered = 22,
    ImGuiCol_ButtonActive = 23,
    ImGuiCol_Header = 24,                                                  // Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem
    ImGuiCol_HeaderHovered = 25,
    ImGuiCol_HeaderActive = 26,
    ImGuiCol_Separator = 27,
    ImGuiCol_SeparatorHovered = 28,
    ImGuiCol_SeparatorActive = 29,
    ImGuiCol_ResizeGrip = 30,                                              // Resize grip in lower-right and lower-left corners of windows.
    ImGuiCol_ResizeGripHovered = 31,
    ImGuiCol_ResizeGripActive = 32,
    ImGuiCol_TabHovered = 33,                                              // Tab background, when hovered
    ImGuiCol_Tab = 34,                                                     // Tab background, when tab-bar is focused & tab is unselected
    ImGuiCol_TabSelected = 35,                                             // Tab background, when tab-bar is focused & tab is selected
    ImGuiCol_TabSelectedOverline = 36,                                     // Tab horizontal overline, when tab-bar is focused & tab is selected
    ImGuiCol_TabDimmed = 37,                                               // Tab background, when tab-bar is unfocused & tab is unselected
    ImGuiCol_TabDimmedSelected = 38,                                       // Tab background, when tab-bar is unfocused & tab is selected
    ImGuiCol_TabDimmedSelectedOverline = 39,                               //..horizontal overline, when tab-bar is unfocused & tab is selected
    ImGuiCol_DockingPreview = 40,                                          // Preview overlay color when about to docking something
    ImGuiCol_DockingEmptyBg = 41,                                          // Background color for empty node (e.g. CentralNode with no window docked into it)
    ImGuiCol_PlotLines = 42,
    ImGuiCol_PlotLinesHovered = 43,
    ImGuiCol_PlotHistogram = 44,
    ImGuiCol_PlotHistogramHovered = 45,
    ImGuiCol_TableHeaderBg = 46,                                           // Table header background
    ImGuiCol_TableBorderStrong = 47,                                       // Table outer and header borders (prefer using Alpha=1.0 here)
    ImGuiCol_TableBorderLight = 48,                                        // Table inner borders (prefer using Alpha=1.0 here)
    ImGuiCol_TableRowBg = 49,                                              // Table row background (even rows)
    ImGuiCol_TableRowBgAlt = 50,                                           // Table row background (odd rows)
    ImGuiCol_TextLink = 51,                                                // Hyperlink color
    ImGuiCol_TextSelectedBg = 52,
    ImGuiCol_DragDropTarget = 53,                                          // Rectangle highlighting a drop target
    ImGuiCol_NavHighlight = 54,                                            // Gamepad/keyboard: current highlighted item
    ImGuiCol_NavWindowingHighlight = 55,                                   // Highlight window when using CTRL+TAB
    ImGuiCol_NavWindowingDimBg = 56,                                       // Darken/colorize entire screen behind the CTRL+TAB window list, when active
    ImGuiCol_ModalWindowDimBg = 57,                                        // Darken/colorize entire screen behind a modal window, when one is active
    ImGuiCol_COUNT = 58,

// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    ImGuiCol_TabActive                 = ImGuiCol_TabSelected,        // [renamed in 1.90.9]
    ImGuiCol_TabUnfocused              = ImGuiCol_TabDimmed,          // [renamed in 1.90.9]
    ImGuiCol_TabUnfocusedActive        = ImGuiCol_TabDimmedSelected;  // [renamed in 1.90.9]
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

// Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.
// - The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code.
//   During initialization or between frames, feel free to just poke into ImGuiStyle directly.
// - Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description.
//   - In Visual Studio: CTRL+comma ("Edit.GoToAll") can follow symbols inside comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
//   - In Visual Studio w/ Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols inside comments.
//   - In VS Code, CLion, etc.: CTRL+click can follow symbols inside comments.
// - When changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.
/** enum ImGuiStyleVar_ */
public static final int
    // Enum name -------------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)
    ImGuiStyleVar_Alpha = 0,                        // float     Alpha
    ImGuiStyleVar_DisabledAlpha = 1,                // float     DisabledAlpha
    ImGuiStyleVar_WindowPadding = 2,                // ImVec2    WindowPadding
    ImGuiStyleVar_WindowRounding = 3,               // float     WindowRounding
    ImGuiStyleVar_WindowBorderSize = 4,             // float     WindowBorderSize
    ImGuiStyleVar_WindowMinSize = 5,                // ImVec2    WindowMinSize
    ImGuiStyleVar_WindowTitleAlign = 6,             // ImVec2    WindowTitleAlign
    ImGuiStyleVar_ChildRounding = 7,                // float     ChildRounding
    ImGuiStyleVar_ChildBorderSize = 8,              // float     ChildBorderSize
    ImGuiStyleVar_PopupRounding = 9,                // float     PopupRounding
    ImGuiStyleVar_PopupBorderSize = 10,              // float     PopupBorderSize
    ImGuiStyleVar_FramePadding = 11,                 // ImVec2    FramePadding
    ImGuiStyleVar_FrameRounding = 12,                // float     FrameRounding
    ImGuiStyleVar_FrameBorderSize = 13,              // float     FrameBorderSize
    ImGuiStyleVar_ItemSpacing = 14,                  // ImVec2    ItemSpacing
    ImGuiStyleVar_ItemInnerSpacing = 15,             // ImVec2    ItemInnerSpacing
    ImGuiStyleVar_IndentSpacing = 16,                // float     IndentSpacing
    ImGuiStyleVar_CellPadding = 17,                  // ImVec2    CellPadding
    ImGuiStyleVar_ScrollbarSize = 18,                // float     ScrollbarSize
    ImGuiStyleVar_ScrollbarRounding = 19,            // float     ScrollbarRounding
    ImGuiStyleVar_GrabMinSize = 20,                  // float     GrabMinSize
    ImGuiStyleVar_GrabRounding = 21,                 // float     GrabRounding
    ImGuiStyleVar_TabRounding = 22,                  // float     TabRounding
    ImGuiStyleVar_TabBorderSize = 23,                // float     TabBorderSize
    ImGuiStyleVar_TabBarBorderSize = 24,             // float     TabBarBorderSize
    ImGuiStyleVar_TabBarOverlineSize = 25,           // float     TabBarOverlineSize
    ImGuiStyleVar_TableAngledHeadersAngle = 26,      // float     TableAngledHeadersAngle
    ImGuiStyleVar_TableAngledHeadersTextAlign = 27,  // ImVec2  TableAngledHeadersTextAlign
    ImGuiStyleVar_ButtonTextAlign = 28,              // ImVec2    ButtonTextAlign
    ImGuiStyleVar_SelectableTextAlign = 29,          // ImVec2    SelectableTextAlign
    ImGuiStyleVar_SeparatorTextBorderSize = 30,      // float     SeparatorTextBorderSize
    ImGuiStyleVar_SeparatorTextAlign = 31,           // ImVec2    SeparatorTextAlign
    ImGuiStyleVar_SeparatorTextPadding = 32,         // ImVec2    SeparatorTextPadding
    ImGuiStyleVar_DockingSeparatorSize = 33,         // float     DockingSeparatorSize
    ImGuiStyleVar_COUNT = 34;

// Flags for InvisibleButton() [extended in imgui_internal.h]
/** enum ImGuiButtonFlags_ */
public static final int
    ImGuiButtonFlags_None              = 0,
    ImGuiButtonFlags_MouseButtonLeft   = 1<<0,  // React on left mouse button (default)
    ImGuiButtonFlags_MouseButtonRight  = 1<<1,  // React on right mouse button
    ImGuiButtonFlags_MouseButtonMiddle = 1<<2,  // React on center mouse button
    ImGuiButtonFlags_MouseButtonMask_  = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight | ImGuiButtonFlags_MouseButtonMiddle; // [Internal]
    //ImGuiButtonFlags_MouseButtonDefault_  = ImGuiButtonFlags_MouseButtonLeft,

// Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()
/** enum ImGuiColorEditFlags_ */
public static final int
    ImGuiColorEditFlags_None             = 0,
    ImGuiColorEditFlags_NoAlpha          = 1<<1,   //              // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).
    ImGuiColorEditFlags_NoPicker         = 1<<2,   //              // ColorEdit: disable picker when clicking on color square.
    ImGuiColorEditFlags_NoOptions        = 1<<3,   //              // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.
    ImGuiColorEditFlags_NoSmallPreview   = 1<<4,   //              // ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)
    ImGuiColorEditFlags_NoInputs         = 1<<5,   //              // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).
    ImGuiColorEditFlags_NoTooltip        = 1<<6,   //              // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.
    ImGuiColorEditFlags_NoLabel          = 1<<7,   //              // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).
    ImGuiColorEditFlags_NoSidePreview    = 1<<8,   //              // ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.
    ImGuiColorEditFlags_NoDragDrop       = 1<<9,   //              // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.
    ImGuiColorEditFlags_NoBorder         = 1<<10,  //              // ColorButton: disable border (which is enforced by default)

    // User Options (right-click on widget to change some of them).
    ImGuiColorEditFlags_AlphaBar         = 1<<16,  //              // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.
    ImGuiColorEditFlags_AlphaPreview     = 1<<17,  //              // ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.
    ImGuiColorEditFlags_AlphaPreviewHalf = 1<<18,  //              // ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.
    ImGuiColorEditFlags_HDR              = 1<<19,  //              // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).
    ImGuiColorEditFlags_DisplayRGB       = 1<<20,  // [Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.
    ImGuiColorEditFlags_DisplayHSV       = 1<<21,  // [Display]    // "
    ImGuiColorEditFlags_DisplayHex       = 1<<22,  // [Display]    // "
    ImGuiColorEditFlags_Uint8            = 1<<23,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.
    ImGuiColorEditFlags_Float            = 1<<24,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.
    ImGuiColorEditFlags_PickerHueBar     = 1<<25,  // [Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.
    ImGuiColorEditFlags_PickerHueWheel   = 1<<26,  // [Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.
    ImGuiColorEditFlags_InputRGB         = 1<<27,  // [Input]      // ColorEdit, ColorPicker: input and output data in RGB format.
    ImGuiColorEditFlags_InputHSV         = 1<<28,  // [Input]      // ColorEdit, ColorPicker: input and output data in HSV format.

    // Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to
    // override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.
    ImGuiColorEditFlags_DefaultOptions_  = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar,

    // [Internal] Masks
    ImGuiColorEditFlags_DisplayMask_     = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex,
    ImGuiColorEditFlags_DataTypeMask_    = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,
    ImGuiColorEditFlags_PickerMask_      = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar,
    ImGuiColorEditFlags_InputMask_       = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV;

    // Obsolete names
    //ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiColorEditFlags_DisplayHSV, ImGuiColorEditFlags_HEX = ImGuiColorEditFlags_DisplayHex  // [renamed in 1.69]

// Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.
// We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.
// (Those are per-item flags. There are shared flags in ImGuiIO: io.ConfigDragClickToInputText)
/** enum ImGuiSliderFlags_ */
public static final int
    ImGuiSliderFlags_None            = 0,
    ImGuiSliderFlags_AlwaysClamp     = 1<<4,        // Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.
    ImGuiSliderFlags_Logarithmic     = 1<<5,        // Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.
    ImGuiSliderFlags_NoRoundToFormat = 1<<6,        // Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits).
    ImGuiSliderFlags_NoInput         = 1<<7,        // Disable CTRL+Click or Enter key allowing to input text directly into the widget.
    ImGuiSliderFlags_WrapAround      = 1<<8,        // Enable wrapping around from max to min and from min to max (only supported by DragXXX() functions for now.
    ImGuiSliderFlags_InvalidMask_    = 0x7000000F;  // [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.

    // Obsolete names
    //ImGuiSliderFlags_ClampOnInput = ImGuiSliderFlags_AlwaysClamp, // [renamed in 1.79]

// Identify a mouse button.
// Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.
/** enum ImGuiMouseButton_ */
public static final int
    ImGuiMouseButton_Left   = 0,
    ImGuiMouseButton_Right  = 1,
    ImGuiMouseButton_Middle = 2,
    ImGuiMouseButton_COUNT  = 5;

// Enumeration for GetMouseCursor()
// User code may request backend to display given cursor by calling SetMouseCursor(), which is why we have some cursors that are marked unused here
/** enum ImGuiMouseCursor_ */
public static final int
    ImGuiMouseCursor_None       = -1,
    ImGuiMouseCursor_Arrow      = 0,
    ImGuiMouseCursor_TextInput = 1,   // When hovering over InputText, etc.
    ImGuiMouseCursor_ResizeAll = 2,   // (Unused by Dear ImGui functions)
    ImGuiMouseCursor_ResizeNS = 3,    // When hovering over a horizontal border
    ImGuiMouseCursor_ResizeEW = 4,    // When hovering over a vertical border or a column
    ImGuiMouseCursor_ResizeNESW = 5,  // When hovering over the bottom-left corner of a window
    ImGuiMouseCursor_ResizeNWSE = 6,  // When hovering over the bottom-right corner of a window
    ImGuiMouseCursor_Hand = 7,        // (Unused by Dear ImGui functions. Use for e.g. hyperlinks)
    ImGuiMouseCursor_NotAllowed = 8,  // When hovering something with disallowed interaction. Usually a crossed circle.
    ImGuiMouseCursor_COUNT = 9;

// Enumeration for AddMouseSourceEvent() actual source of Mouse Input data.
// Historically we use "Mouse" terminology everywhere to indicate pointer data, e.g. MousePos, IsMousePressed(), io.AddMousePosEvent()
// But that "Mouse" data can come from different source which occasionally may be useful for application to know about.
// You can submit a change of pointer type using io.AddMouseSourceEvent().
/** enum  */
public static final int
    ImGuiMouseSource_Mouse       = 0,  // Input is coming from an actual mouse.
    ImGuiMouseSource_TouchScreen = 1,      // Input is coming from a touch screen (no hovering prior to initial press, less precise initial press aiming, dual-axis wheeling possible).
    ImGuiMouseSource_Pen = 2,              // Input is coming from a pressure/magnetic pen (often used in conjunction with high-sampling rates).
    ImGuiMouseSource_COUNT = 3;

// Enumeration for ImGui::SetNextWindow***(), SetWindow***(), SetNextItem***() functions
// Represent a condition.
// Important: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always.
/** enum ImGuiCond_ */
public static final int
    ImGuiCond_None         = 0,     // No condition (always set the variable), same as _Always
    ImGuiCond_Always       = 1<<0,  // No condition (always set the variable), same as _None
    ImGuiCond_Once         = 1<<1,  // Set the variable once per runtime session (only the first call will succeed)
    ImGuiCond_FirstUseEver = 1<<2,  // Set the variable if the object/window has no persistently saved data (no entry in .ini file)
    ImGuiCond_Appearing    = 1<<3;  // Set the variable if the object/window is appearing after being hidden/inactive (or the first time)

//-----------------------------------------------------------------------------
// [SECTION] Tables API flags and structures (ImGuiTableFlags, ImGuiTableColumnFlags, ImGuiTableRowFlags, ImGuiTableBgTarget, ImGuiTableSortSpecs, ImGuiTableColumnSortSpecs)
//-----------------------------------------------------------------------------

// Flags for ImGui::BeginTable()
// - Important! Sizing policies have complex and subtle side effects, much more so than you would expect.
//   Read comments/demos carefully + experiment with live demos to get acquainted with them.
// - The DEFAULT sizing policies are:
//    - Default to ImGuiTableFlags_SizingFixedFit    if ScrollX is on, or if host window has ImGuiWindowFlags_AlwaysAutoResize.
//    - Default to ImGuiTableFlags_SizingStretchSame if ScrollX is off.
// - When ScrollX is off:
//    - Table defaults to ImGuiTableFlags_SizingStretchSame -> all Columns defaults to ImGuiTableColumnFlags_WidthStretch with same weight.
//    - Columns sizing policy allowed: Stretch (default), Fixed/Auto.
//    - Fixed Columns (if any) will generally obtain their requested width (unless the table cannot fit them all).
//    - Stretch Columns will share the remaining width according to their respective weight.
//    - Mixed Fixed/Stretch columns is possible but has various side-effects on resizing behaviors.
//      The typical use of mixing sizing policies is: any number of LEADING Fixed columns, followed by one or two TRAILING Stretch columns.
//      (this is because the visible order of columns have subtle but necessary effects on how they react to manual resizing).
// - When ScrollX is on:
//    - Table defaults to ImGuiTableFlags_SizingFixedFit -> all Columns defaults to ImGuiTableColumnFlags_WidthFixed
//    - Columns sizing policy allowed: Fixed/Auto mostly.
//    - Fixed Columns can be enlarged as needed. Table will show a horizontal scrollbar if needed.
//    - When using auto-resizing (non-resizable) fixed columns, querying the content width to use item right-alignment e.g. SetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.
//    - Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on, UNLESS you have specified a value for 'inner_width' in BeginTable().
//      If you specify a value for 'inner_width' then effectively the scrolling space is known and Stretch or mixed Fixed/Stretch columns become meaningful again.
// - Read on documentation at the top of imgui_tables.cpp for details.
/** enum ImGuiTableFlags_ */
public static final int
    // Features
    ImGuiTableFlags_None                       = 0,
    ImGuiTableFlags_Resizable                  = 1<<0,   // Enable resizing columns.
    ImGuiTableFlags_Reorderable                = 1<<1,   // Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)
    ImGuiTableFlags_Hideable                   = 1<<2,   // Enable hiding/disabling columns in context menu.
    ImGuiTableFlags_Sortable                   = 1<<3,   // Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.
    ImGuiTableFlags_NoSavedSettings            = 1<<4,   // Disable persisting columns order, width and sort settings in the .ini file.
    ImGuiTableFlags_ContextMenuInBody          = 1<<5,   // Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().
    // Decorations
    ImGuiTableFlags_RowBg                      = 1<<6,   // Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)
    ImGuiTableFlags_BordersInnerH              = 1<<7,   // Draw horizontal borders between rows.
    ImGuiTableFlags_BordersOuterH              = 1<<8,   // Draw horizontal borders at the top and bottom.
    ImGuiTableFlags_BordersInnerV              = 1<<9,   // Draw vertical borders between columns.
    ImGuiTableFlags_BordersOuterV              = 1<<10,  // Draw vertical borders on the left and right sides.
    ImGuiTableFlags_BordersH                   = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersOuterH, // Draw horizontal borders.
    ImGuiTableFlags_BordersV                   = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersOuterV, // Draw vertical borders.
    ImGuiTableFlags_BordersInner               = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInnerH, // Draw inner borders.
    ImGuiTableFlags_BordersOuter               = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags_BordersOuterH, // Draw outer borders.
    ImGuiTableFlags_Borders                    = ImGuiTableFlags_BordersInner | ImGuiTableFlags_BordersOuter, // Draw all borders.
    ImGuiTableFlags_NoBordersInBody            = 1<<11,  // [ALPHA] Disable vertical borders in columns Body (borders will always appear in Headers). -> May move to style
    ImGuiTableFlags_NoBordersInBodyUntilResize = 1<<12,  // [ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers). -> May move to style
    // Sizing Policy (read above for defaults)
    ImGuiTableFlags_SizingFixedFit             = 1<<13,  // Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.
    ImGuiTableFlags_SizingFixedSame            = 2<<13,  // Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.
    ImGuiTableFlags_SizingStretchProp          = 3<<13,  // Columns default to _WidthStretch with default weights proportional to each columns contents widths.
    ImGuiTableFlags_SizingStretchSame          = 4<<13,  // Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().
    // Sizing Extra Options
    ImGuiTableFlags_NoHostExtendX              = 1<<16,  // Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.
    ImGuiTableFlags_NoHostExtendY              = 1<<17,  // Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.
    ImGuiTableFlags_NoKeepColumnsVisible       = 1<<18,  // Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.
    ImGuiTableFlags_PreciseWidths              = 1<<19,  // Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.
    // Clipping
    ImGuiTableFlags_NoClip                     = 1<<20,  // Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().
    // Padding
    ImGuiTableFlags_PadOuterX                  = 1<<21,  // Default if BordersOuterV is on. Enable outermost padding. Generally desirable if you have headers.
    ImGuiTableFlags_NoPadOuterX                = 1<<22,  // Default if BordersOuterV is off. Disable outermost padding.
    ImGuiTableFlags_NoPadInnerX                = 1<<23,  // Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).
    // Scrolling
    ImGuiTableFlags_ScrollX                    = 1<<24,  // Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this creates a child window, ScrollY is currently generally recommended when using ScrollX.
    ImGuiTableFlags_ScrollY                    = 1<<25,  // Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.
    // Sorting
    ImGuiTableFlags_SortMulti                  = 1<<26,  // Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).
    ImGuiTableFlags_SortTristate               = 1<<27,  // Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).
    // Miscellaneous
    ImGuiTableFlags_HighlightHoveredColumn     = 1<<28,  // Highlight column headers when hovered (may evolve into a fuller highlight)

    // [Internal] Combinations and masks
    ImGuiTableFlags_SizingMask_                = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_SizingFixedSame | ImGuiTableFlags_SizingStretchProp | ImGuiTableFlags_SizingStretchSame;

// Flags for ImGui::TableSetupColumn()
/** enum ImGuiTableColumnFlags_ */
public static final int
    // Input configuration flags
    ImGuiTableColumnFlags_None                 = 0,
    ImGuiTableColumnFlags_Disabled             = 1<<0,   // Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)
    ImGuiTableColumnFlags_DefaultHide          = 1<<1,   // Default as a hidden/disabled column.
    ImGuiTableColumnFlags_DefaultSort          = 1<<2,   // Default as a sorting column.
    ImGuiTableColumnFlags_WidthStretch         = 1<<3,   // Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).
    ImGuiTableColumnFlags_WidthFixed           = 1<<4,   // Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).
    ImGuiTableColumnFlags_NoResize             = 1<<5,   // Disable manual resizing.
    ImGuiTableColumnFlags_NoReorder            = 1<<6,   // Disable manual reordering this column, this will also prevent other columns from crossing over this column.
    ImGuiTableColumnFlags_NoHide               = 1<<7,   // Disable ability to hide/disable this column.
    ImGuiTableColumnFlags_NoClip               = 1<<8,   // Disable clipping for this column (all NoClip columns will render in a same draw command).
    ImGuiTableColumnFlags_NoSort               = 1<<9,   // Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).
    ImGuiTableColumnFlags_NoSortAscending      = 1<<10,  // Disable ability to sort in the ascending direction.
    ImGuiTableColumnFlags_NoSortDescending     = 1<<11,  // Disable ability to sort in the descending direction.
    ImGuiTableColumnFlags_NoHeaderLabel        = 1<<12,  // TableHeadersRow() will submit an empty label for this column. Convenient for some small columns. Name will still appear in context menu or in angled headers. You may append into this cell by calling TableSetColumnIndex() right after the TableHeadersRow() call.
    ImGuiTableColumnFlags_NoHeaderWidth        = 1<<13,  // Disable header text width contribution to automatic column width.
    ImGuiTableColumnFlags_PreferSortAscending  = 1<<14,  // Make the initial sort direction Ascending when first sorting on this column (default).
    ImGuiTableColumnFlags_PreferSortDescending = 1<<15,  // Make the initial sort direction Descending when first sorting on this column.
    ImGuiTableColumnFlags_IndentEnable         = 1<<16,  // Use current Indent value when entering cell (default for column 0).
    ImGuiTableColumnFlags_IndentDisable        = 1<<17,  // Ignore current Indent value when entering cell (default for columns > 0). Indentation changes _within_ the cell will still be honored.
    ImGuiTableColumnFlags_AngledHeader         = 1<<18,  // TableHeadersRow() will submit an angled header row for this column. Note this will add an extra row.

    // Output status flags, read-only via TableGetColumnFlags()
    ImGuiTableColumnFlags_IsEnabled            = 1<<24,  // Status: is enabled == not hidden by user/api (referred to as "Hide" in _DefaultHide and _NoHide) flags.
    ImGuiTableColumnFlags_IsVisible            = 1<<25,  // Status: is visible == is enabled AND not clipped by scrolling.
    ImGuiTableColumnFlags_IsSorted             = 1<<26,  // Status: is currently part of the sort specs
    ImGuiTableColumnFlags_IsHovered            = 1<<27,  // Status: is hovered by mouse

    // [Internal] Combinations and masks
    ImGuiTableColumnFlags_WidthMask_           = ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_WidthFixed,
    ImGuiTableColumnFlags_IndentMask_          = ImGuiTableColumnFlags_IndentEnable | ImGuiTableColumnFlags_IndentDisable,
    ImGuiTableColumnFlags_StatusMask_          = ImGuiTableColumnFlags_IsEnabled | ImGuiTableColumnFlags_IsVisible | ImGuiTableColumnFlags_IsSorted | ImGuiTableColumnFlags_IsHovered,
    ImGuiTableColumnFlags_NoDirectResize_      = 1<<30;  // [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)

// Flags for ImGui::TableNextRow()
/** enum ImGuiTableRowFlags_ */
public static final int
    ImGuiTableRowFlags_None    = 0,
    ImGuiTableRowFlags_Headers = 1<<0;  // Identify header row (set default background color + width of its contents accounted differently for auto column width)

// Enum for ImGui::TableSetBgColor()
// Background colors are rendering in 3 layers:
//  - Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.
//  - Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.
//  - Layer 2: draw with CellBg color if set.
// The purpose of the two row/columns layers is to let you decide if a background color change should override or blend with the existing color.
// When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.
// If you set the color of RowBg0 target, your color will override the existing RowBg0 color.
// If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.
/** enum ImGuiTableBgTarget_ */
public static final int
    ImGuiTableBgTarget_None   = 0,
    ImGuiTableBgTarget_RowBg0 = 1,  // Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)
    ImGuiTableBgTarget_RowBg1 = 2,  // Set row background color 1 (generally used for selection marking)
    ImGuiTableBgTarget_CellBg = 3;  // Set cell background color (top-most color)
// Targeting imgui\ImGuiTableSortSpecs.java


// Targeting imgui\ImGuiTableColumnSortSpecs.java



//-----------------------------------------------------------------------------
// [SECTION] Helpers: Debug log, memory allocations macros, ImVector<>
//-----------------------------------------------------------------------------

// Extra helpers for C applications
public static native void ImVector_Construct(Pointer vector);  // Construct a zero-size ImVector<> (of any type). This is primarily useful when calling ImFontGlyphRangesBuilder_BuildRanges()
public static native void ImVector_Destruct(Pointer vector);   // Destruct an ImVector<> (of any type). Important: Frees the vector memory but does not call destructors on contained objects (if they have them)

// #if defined(IMGUI_HAS_IMSTR)
// #if IMGUI_HAS_IMSTR  // Build an ImStr from a regular const char* (no data is copied, so you need to make sure the original char* isn't altered as long as you are using the ImStr).
// #endif // #if IMGUI_HAS_IMSTR
// #endif // #if defined(IMGUI_HAS_IMSTR)

//-----------------------------------------------------------------------------
// Debug Logging into ShowDebugLogWindow(), tty and more.
//-----------------------------------------------------------------------------

// #ifndef IMGUI_DISABLE_DEBUG_TOOLS
// #define IMGUI_DEBUG_LOG(...)        ImGui::DebugLog(__VA_ARGS__)
// #else
// #define IMGUI_DEBUG_LOG(...)        ((void)0)
// #endif // #ifndef IMGUI_DISABLE_DEBUG_TOOLS
//-----------------------------------------------------------------------------
// IM_MALLOC(), IM_FREE(), IM_NEW(), IM_PLACEMENT_NEW(), IM_DELETE()
// We call C++ constructor on own allocated memory via the placement "new(ptr) Type()" syntax.
// Defining a custom placement new() with a custom parameter allows us to bypass including <new> which on some platforms complains when user has disabled exceptions.
//-----------------------------------------------------------------------------

// #define CIM_ALLOC(_SIZE) ImGui_MemAlloc(_SIZE)
// #define CIM_FREE(_PTR) ImGui_MemFree(_PTR)
// Targeting imgui\ImVector_ImWchar.java


// Targeting imgui\ImVector_ImGuiTextFilter_ImGuiTextRange.java


// Targeting imgui\ImVector_char.java


// Targeting imgui\ImVector_ImGuiStoragePair.java


// Targeting imgui\ImVector_ImGuiSelectionRequest.java


// Targeting imgui\ImVector_ImDrawCmd.java


// Targeting imgui\ImVector_ImDrawIdx.java


// Targeting imgui\ImVector_ImDrawChannel.java


// Targeting imgui\ImVector_ImDrawVert.java


// Targeting imgui\ImVector_ImVec2.java


// Targeting imgui\ImVector_ImVec4.java


// Targeting imgui\ImVector_ImTextureID.java


// Targeting imgui\ImVector_ImDrawListPtr.java


// Targeting imgui\ImVector_ImU32.java


// Targeting imgui\ImVector_ImFontPtr.java


// Targeting imgui\ImVector_ImFontAtlasCustomRect.java


// Targeting imgui\ImVector_ImFontConfig.java


// Targeting imgui\ImVector_float.java


// Targeting imgui\ImVector_ImFontGlyph.java


// Targeting imgui\ImVector_ImGuiPlatformMonitor.java


// Targeting imgui\ImVector_ImGuiViewportPtr.java


// Targeting imgui\ImGuiStyle.java


public static native void ImGuiStyle_ScaleAllSizes(ImGuiStyle self, float scale_factor);
// Targeting imgui\ImGuiKeyData.java


// Targeting imgui\ImGuiIO.java


// Input Functions
public static native void ImGuiIO_AddKeyEvent(ImGuiIO self, @Cast("ImGuiKey") int key, @Cast("bool") boolean down);                                          // Queue a new key down/up event. Key should be "translated" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)
public static native void ImGuiIO_AddKeyAnalogEvent(ImGuiIO self, @Cast("ImGuiKey") int key, @Cast("bool") boolean down, float v);                           // Queue a new key down/up event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.
public static native void ImGuiIO_AddMousePosEvent(ImGuiIO self, float x, float y);                                            // Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)
public static native void ImGuiIO_AddMouseButtonEvent(ImGuiIO self, int button, @Cast("bool") boolean down);                                    // Queue a mouse button change
public static native void ImGuiIO_AddMouseWheelEvent(ImGuiIO self, float wheel_x, float wheel_y);                              // Queue a mouse wheel update. wheel_y<0: scroll down, wheel_y>0: scroll up, wheel_x<0: scroll right, wheel_x>0: scroll left.
public static native void ImGuiIO_AddMouseSourceEvent(ImGuiIO self, @Cast("ImGuiMouseSource") int source);                                  // Queue a mouse source change (Mouse/TouchScreen/Pen)
public static native void ImGuiIO_AddMouseViewportEvent(ImGuiIO self, @Cast("ImGuiID") int id);                                             // Queue a mouse hovered viewport. Requires backend to set ImGuiBackendFlags_HasMouseHoveredViewport to call this (for multi-viewport support).
public static native void ImGuiIO_AddFocusEvent(ImGuiIO self, @Cast("bool") boolean focused);                                                   // Queue a gain/loss of focus for the application (generally based on OS/platform focus of your window)
public static native void ImGuiIO_AddInputCharacter(ImGuiIO self, @Cast("unsigned int") int c);                                             // Queue a new character input
public static native void ImGuiIO_AddInputCharacterUTF16(ImGuiIO self, @Cast("ImWchar16") short c);                                           // Queue a new character input from a UTF-16 character, it can be a surrogate
public static native void ImGuiIO_AddInputCharactersUTF8(ImGuiIO self, @Cast("const char*") BytePointer str);
public static native void ImGuiIO_AddInputCharactersUTF8(ImGuiIO self, String str);                                       // Queue a new characters input from a UTF-8 string
public static native void ImGuiIO_SetKeyEventNativeData(ImGuiIO self, @Cast("ImGuiKey") int key, int native_keycode, int native_scancode);  // Implied native_legacy_index = -1
public static native void ImGuiIO_SetKeyEventNativeDataEx(ImGuiIO self, @Cast("ImGuiKey") int key, int native_keycode, int native_scancode, int native_legacy_index); // [Optional] Specify index for legacy <1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.
public static native void ImGuiIO_SetAppAcceptingEvents(ImGuiIO self, @Cast("bool") boolean accepting_events);                                  // Set master flag for accepting key/mouse/text events (default to true). Useful if you have native dialog boxes that are interrupting your application loop/refresh, and you want to disable events being queued while your app is frozen.
public static native void ImGuiIO_ClearEventsQueue(ImGuiIO self);                                                              // Clear all incoming events.
public static native void ImGuiIO_ClearInputKeys(ImGuiIO self);                                                                // Clear current keyboard/gamepad state + current frame text input buffer. Equivalent to releasing all keys/buttons.
public static native void ImGuiIO_ClearInputMouse(ImGuiIO self);                                                               // Clear current mouse state.
// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
public static native void ImGuiIO_ClearInputCharacters(ImGuiIO self);
// Targeting imgui\ImGuiInputTextCallbackData.java


public static native void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData self, int pos, int bytes_count);
public static native void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData self, int pos, @Cast("const char*") BytePointer text, @Cast("const char*") BytePointer text_end);
public static native void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData self, int pos, String text, String text_end);
public static native void ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData self);
public static native void ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData self);
public static native @Cast("bool") boolean ImGuiInputTextCallbackData_HasSelection(@Const ImGuiInputTextCallbackData self);
// Targeting imgui\ImGuiSizeCallbackData.java


// Targeting imgui\ImGuiWindowClass.java


// Targeting imgui\ImGuiPayload.java


public static native void ImGuiPayload_Clear(ImGuiPayload self);
public static native @Cast("bool") boolean ImGuiPayload_IsDataType(@Const ImGuiPayload self, @Cast("const char*") BytePointer type);
public static native @Cast("bool") boolean ImGuiPayload_IsDataType(@Const ImGuiPayload self, String type);
public static native @Cast("bool") boolean ImGuiPayload_IsPreview(@Const ImGuiPayload self);
public static native @Cast("bool") boolean ImGuiPayload_IsDelivery(@Const ImGuiPayload self);

//-----------------------------------------------------------------------------
// [SECTION] Helpers (ImGuiOnceUponAFrame, ImGuiTextFilter, ImGuiTextBuffer, ImGuiStorage, ImGuiListClipper, Math Operators, ImColor)
//-----------------------------------------------------------------------------

// Helper: Unicode defines
public static final int IM_UNICODE_CODEPOINT_INVALID = 0xFFFD;                                                              // Invalid Unicode code point (standard value).
// #ifdef IMGUI_USE_WCHAR32
public static final int IM_UNICODE_CODEPOINT_MAX =     0x10FFFF;    // Maximum Unicode code point supported by this build.
// #else
// Targeting imgui\ImGuiTextFilter_ImGuiTextRange.java


public static native @Cast("bool") boolean ImGuiTextFilter_ImGuiTextRange_empty(@Const ImGuiTextFilter_ImGuiTextRange self);
public static native void ImGuiTextFilter_ImGuiTextRange_split(@Const ImGuiTextFilter_ImGuiTextRange self, @Cast("char") byte separator, ImVector_ImGuiTextFilter_ImGuiTextRange out);
// Targeting imgui\ImGuiTextFilter.java


public static native @Cast("bool") boolean ImGuiTextFilter_Draw(ImGuiTextFilter self, @Cast("const char*") BytePointer label, float width);
public static native @Cast("bool") boolean ImGuiTextFilter_Draw(ImGuiTextFilter self, String label, float width); // Helper calling InputText+Build
public static native @Cast("bool") boolean ImGuiTextFilter_PassFilter(@Const ImGuiTextFilter self, @Cast("const char*") BytePointer text, @Cast("const char*") BytePointer text_end);
public static native @Cast("bool") boolean ImGuiTextFilter_PassFilter(@Const ImGuiTextFilter self, String text, String text_end);
public static native void ImGuiTextFilter_Build(ImGuiTextFilter self);
public static native void ImGuiTextFilter_Clear(ImGuiTextFilter self);
public static native @Cast("bool") boolean ImGuiTextFilter_IsActive(@Const ImGuiTextFilter self);
// Targeting imgui\ImGuiTextBuffer.java


public static native @Cast("const char*") BytePointer ImGuiTextBuffer_begin(@Const ImGuiTextBuffer self);
public static native @Cast("const char*") BytePointer ImGuiTextBuffer_end(@Const ImGuiTextBuffer self);                                                  // Buf is zero-terminated, so end() will point on the zero-terminator
public static native int ImGuiTextBuffer_size(@Const ImGuiTextBuffer self);
public static native @Cast("bool") boolean ImGuiTextBuffer_empty(@Const ImGuiTextBuffer self);
public static native void ImGuiTextBuffer_clear(ImGuiTextBuffer self);
public static native void ImGuiTextBuffer_reserve(ImGuiTextBuffer self, int _capacity);
public static native @Cast("const char*") BytePointer ImGuiTextBuffer_c_str(@Const ImGuiTextBuffer self);
public static native void ImGuiTextBuffer_append(ImGuiTextBuffer self, @Cast("const char*") BytePointer str, @Cast("const char*") BytePointer str_end);
public static native void ImGuiTextBuffer_append(ImGuiTextBuffer self, String str, String str_end);
public static native void ImGuiTextBuffer_appendf(ImGuiTextBuffer self, @Cast("const char*") BytePointer fmt);
public static native void ImGuiTextBuffer_appendf(ImGuiTextBuffer self, String fmt);
public static native void ImGuiTextBuffer_appendfv(ImGuiTextBuffer self, @Cast("const char*") BytePointer fmt, @ByVal @Cast("va_list*") Pointer args);
public static native void ImGuiTextBuffer_appendfv(ImGuiTextBuffer self, String fmt, @ByVal @Cast("va_list*") Pointer args);
// Targeting imgui\ImGuiStoragePair.java


// Targeting imgui\ImGuiStorage.java


// - Get***() functions find pair, never add/allocate. Pairs are sorted so a query is O(log N)
// - Set***() functions find pair, insertion on demand if missing.
// - Sorted insertion is costly, paid once. A typical frame shouldn't need to insert any new pair.
public static native void ImGuiStorage_Clear(ImGuiStorage self);
public static native int ImGuiStorage_GetInt(@Const ImGuiStorage self, @Cast("ImGuiID") int key, int default_val);
public static native void ImGuiStorage_SetInt(ImGuiStorage self, @Cast("ImGuiID") int key, int val);
public static native @Cast("bool") boolean ImGuiStorage_GetBool(@Const ImGuiStorage self, @Cast("ImGuiID") int key, @Cast("bool") boolean default_val);
public static native void ImGuiStorage_SetBool(ImGuiStorage self, @Cast("ImGuiID") int key, @Cast("bool") boolean val);
public static native float ImGuiStorage_GetFloat(@Const ImGuiStorage self, @Cast("ImGuiID") int key, float default_val);
public static native void ImGuiStorage_SetFloat(ImGuiStorage self, @Cast("ImGuiID") int key, float val);
public static native Pointer ImGuiStorage_GetVoidPtr(@Const ImGuiStorage self, @Cast("ImGuiID") int key);                               // default_val is NULL
public static native void ImGuiStorage_SetVoidPtr(ImGuiStorage self, @Cast("ImGuiID") int key, Pointer val);
// - Get***Ref() functions finds pair, insert on demand if missing, return pointer. Useful if you intend to do Get+Set.
// - References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.
// - A typical use case where this is convenient for quick hacking (e.g. add storage during a live Edit&Continue session if you can't modify existing struct)
//      float* pvar = ImGui::GetFloatRef(key); ImGui::SliderFloat("var", pvar, 0, 100.0f); some_var += *pvar;
public static native IntPointer ImGuiStorage_GetIntRef(ImGuiStorage self, @Cast("ImGuiID") int key, int default_val);
public static native @Cast("bool*") BoolPointer ImGuiStorage_GetBoolRef(ImGuiStorage self, @Cast("ImGuiID") int key, @Cast("bool") boolean default_val);
public static native FloatPointer ImGuiStorage_GetFloatRef(ImGuiStorage self, @Cast("ImGuiID") int key, float default_val);
public static native @Cast("void**") PointerPointer ImGuiStorage_GetVoidPtrRef(ImGuiStorage self, @Cast("ImGuiID") int key, Pointer default_val);
// Advanced: for quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once.
public static native void ImGuiStorage_BuildSortByKey(ImGuiStorage self);
// Obsolete: use on your own storage if you know only integer are being stored (open/close all tree nodes)
public static native void ImGuiStorage_SetAllInt(ImGuiStorage self, int val);
// Targeting imgui\ImGuiListClipper.java


public static native void ImGuiListClipper_Begin(ImGuiListClipper self, int items_count, float items_height);
public static native void ImGuiListClipper_End(ImGuiListClipper self);                                                // Automatically called on the last call of Step() that returns false.
public static native @Cast("bool") boolean ImGuiListClipper_Step(ImGuiListClipper self);                                               // Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.
// Call IncludeItemByIndex() or IncludeItemsByIndex() *BEFORE* first call to Step() if you need a range of items to not be clipped, regardless of their visibility.
// (Due to alignment / padding of certain items it is possible that an extra item may be included on either end of the display range).
public static native void ImGuiListClipper_IncludeItemByIndex(ImGuiListClipper self, int item_index);
public static native void ImGuiListClipper_IncludeItemsByIndex(ImGuiListClipper self, int item_begin, int item_end);  // item_end is exclusive e.g. use (42, 42+1) to make item 42 never clipped.
// Seek cursor toward given item. This is automatically called while stepping.
// - The only reason to call this is: you can use ImGuiListClipper::Begin(INT_MAX) if you don't know item count ahead of time.
// - In this case, after all steps are done, you'll want to call SeekCursorForItem(item_count).
public static native void ImGuiListClipper_SeekCursorForItem(ImGuiListClipper self, int item_index);
// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
public static native void ImGuiListClipper_IncludeRangeByIndices(ImGuiListClipper self, int item_begin, int item_end);       // [renamed in 1.89.9]
public static native void ImGuiListClipper_ForceDisplayRangeByIndices(ImGuiListClipper self, int item_begin, int item_end);  // [renamed in 1.89.6]
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

// Helpers: ImVec2/ImVec4 operators
// - It is important that we are keeping those disabled by default so they don't leak in user space.
// - This is in order to allow user enabling implicit cast operators between ImVec2/ImVec4 and their own types (using IM_VEC2_CLASS_EXTRA in imconfig.h)
// - Add '#define IMGUI_DEFINE_MATH_OPERATORS' before including this file (or in imconfig.h) to access courtesy maths operators for ImVec2 and ImVec4.
// #ifdef IMGUI_DEFINE_MATH_OPERATORS
// #define IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED
// #endif // #ifdef IMGUI_DEFINE_MATH_OPERATORS
// Helpers macros to generate 32-bit encoded colors
// User can declare their own format by #defining the 5 _SHIFT/_MASK macros in their imconfig file.
// #ifndef IM_COL32_R_SHIFT
// #ifdef IMGUI_USE_BGRA_PACKED_COLOR
public static final int IM_COL32_R_SHIFT =    16;
public static final int IM_COL32_G_SHIFT =    8;
public static final int IM_COL32_B_SHIFT =    0;
public static final int IM_COL32_A_SHIFT =    24;
public static final int IM_COL32_A_MASK =     0xFF000000;
// #else
// #endif // #ifdef IMGUI_USE_BGRA_PACKED_COLOR
// #endif // #ifndef IM_COL32_R_SHIFT
// #define IM_COL32(R,G,B,A)    (((ImU32)(A)<<IM_COL32_A_SHIFT) | ((ImU32)(B)<<IM_COL32_B_SHIFT) | ((ImU32)(G)<<IM_COL32_G_SHIFT) | ((ImU32)(R)<<IM_COL32_R_SHIFT))
public static native @MemberGetter int IM_COL32_WHITE();
public static final int IM_COL32_WHITE = IM_COL32_WHITE();   // Opaque white = 0xFFFFFFFF
public static native @MemberGetter int IM_COL32_BLACK();
public static final int IM_COL32_BLACK = IM_COL32_BLACK();         // Opaque black
public static native @MemberGetter int IM_COL32_BLACK_TRANS();
public static final int IM_COL32_BLACK_TRANS = IM_COL32_BLACK_TRANS();
// Targeting imgui\ImColor.java


// FIXME-OBSOLETE: May need to obsolete/cleanup those helpers.
public static native void ImColor_SetHSV(ImColor self, float h, float s, float v, float a);
public static native @ByVal ImColor ImColor_HSV(ImColor self, float h, float s, float v, float a);

//-----------------------------------------------------------------------------
// [SECTION] Multi-Select API flags and structures (ImGuiMultiSelectFlags, ImGuiSelectionRequestType, ImGuiSelectionRequest, ImGuiMultiSelectIO, ImGuiSelectionBasicStorage)
//-----------------------------------------------------------------------------

// Multi-selection system
// Documentation at: https://github.com/ocornut/imgui/wiki/Multi-Select
// - Refer to 'Demo->Widgets->Selection State & Multi-Select' for demos using this.
// - This system implements standard multi-selection idioms (CTRL+Mouse/Keyboard, SHIFT+Mouse/Keyboard, etc)
//   with support for clipper (skipping non-visible items), box-select and many other details.
// - Selectable(), Checkbox() are supported but custom widgets may use it as well.
// - TreeNode() is technically supported but... using this correctly is more complicated: you need some sort of linear/random access to your tree,
//   which is suited to advanced trees setups also implementing filters and clipper. We will work toward simplifying and demoing it.
// - In the spirit of Dear ImGui design, your code owns actual selection data.
//   This is designed to allow all kinds of selection storage you may use in your application e.g. set/map/hash.
// About ImGuiSelectionBasicStorage:
// - This is an optional helper to store a selection state and apply selection requests.
// - It is used by our demos and provided as a convenience to quickly implement multi-selection.
// Usage:
// - Identify submitted items with SetNextItemSelectionUserData(), most likely using an index into your current data-set.
// - Store and maintain actual selection data using persistent object identifiers.
// - Usage flow:
//     BEGIN - (1) Call BeginMultiSelect() and retrieve the ImGuiMultiSelectIO* result.
//           - (2) Honor request list (SetAll/SetRange requests) by updating your selection data. Same code as Step 6.
//           - (3) [If using clipper] You need to make sure RangeSrcItem is always submitted. Calculate its index and pass to clipper.IncludeItemByIndex(). If storing indices in ImGuiSelectionUserData, a simple clipper.IncludeItemByIndex(ms_io->RangeSrcItem) call will work.
//     LOOP  - (4) Submit your items with SetNextItemSelectionUserData() + Selectable()/TreeNode() calls.
//     END   - (5) Call EndMultiSelect() and retrieve the ImGuiMultiSelectIO* result.
//           - (6) Honor request list (SetAll/SetRange requests) by updating your selection data. Same code as Step 2.
//     If you submit all items (no clipper), Step 2 and 3 are optional and will be handled by each item themselves. It is fine to always honor those steps.
// About ImGuiSelectionUserData:
// - This can store an application-defined identifier (e.g. index or pointer) submitted via SetNextItemSelectionUserData().
// - In return we store them into RangeSrcItem/RangeFirstItem/RangeLastItem and other fields in ImGuiMultiSelectIO.
// - Most applications will store an object INDEX, hence the chosen name and type. Storing an index is natural, because
//   SetRange requests will give you two end-points and you will need to iterate/interpolate between them to update your selection.
// - However it is perfectly possible to store a POINTER or another IDENTIFIER inside ImGuiSelectionUserData.
//   Our system never assume that you identify items by indices, it never attempts to interpolate between two values.
// - If you enable ImGuiMultiSelectFlags_NoRangeSelect then it is guaranteed that you will never have to interpolate
//   between two ImGuiSelectionUserData, which may be a convenient way to use part of the feature with less code work.
// - As most users will want to store an index, for convenience and to reduce confusion we use ImS64 instead of void*,
//   being syntactically easier to downcast. Feel free to reinterpret_cast and store a pointer inside.

// Flags for BeginMultiSelect()
/** enum ImGuiMultiSelectFlags_ */
public static final int
    ImGuiMultiSelectFlags_None                  = 0,
    ImGuiMultiSelectFlags_SingleSelect          = 1<<0,   // Disable selecting more than one item. This is available to allow single-selection code to share same code/logic if desired. It essentially disables the main purpose of BeginMultiSelect() tho!
    ImGuiMultiSelectFlags_NoSelectAll           = 1<<1,   // Disable CTRL+A shortcut to select all.
    ImGuiMultiSelectFlags_NoRangeSelect         = 1<<2,   // Disable Shift+selection mouse/keyboard support (useful for unordered 2D selection). With BoxSelect is also ensure contiguous SetRange requests are not combined into one. This allows not handling interpolation in SetRange requests.
    ImGuiMultiSelectFlags_NoAutoSelect          = 1<<3,   // Disable selecting items when navigating (useful for e.g. supporting range-select in a list of checkboxes).
    ImGuiMultiSelectFlags_NoAutoClear           = 1<<4,   // Disable clearing selection when navigating or selecting another one (generally used with ImGuiMultiSelectFlags_NoAutoSelect. useful for e.g. supporting range-select in a list of checkboxes).
    ImGuiMultiSelectFlags_NoAutoClearOnReselect = 1<<5,   // Disable clearing selection when clicking/selecting an already selected item.
    ImGuiMultiSelectFlags_BoxSelect1d           = 1<<6,   // Enable box-selection with same width and same x pos items (e.g. full row Selectable()). Box-selection works better with little bit of spacing between items hit-box in order to be able to aim at empty space.
    ImGuiMultiSelectFlags_BoxSelect2d           = 1<<7,   // Enable box-selection with varying width or varying x pos items support (e.g. different width labels, or 2D layout/grid). This is slower: alters clipping logic so that e.g. horizontal movements will update selection of normally clipped items.
    ImGuiMultiSelectFlags_BoxSelectNoScroll     = 1<<8,   // Disable scrolling when box-selecting near edges of scope.
    ImGuiMultiSelectFlags_ClearOnEscape         = 1<<9,   // Clear selection when pressing Escape while scope is focused.
    ImGuiMultiSelectFlags_ClearOnClickVoid      = 1<<10,  // Clear selection when clicking on empty location within scope.
    ImGuiMultiSelectFlags_ScopeWindow           = 1<<11,  // Scope for _BoxSelect and _ClearOnClickVoid is whole window (Default). Use if BeginMultiSelect() covers a whole window or used a single time in same window.
    ImGuiMultiSelectFlags_ScopeRect             = 1<<12,  // Scope for _BoxSelect and _ClearOnClickVoid is rectangle encompassing BeginMultiSelect()/EndMultiSelect(). Use if BeginMultiSelect() is called multiple times in same window.
    ImGuiMultiSelectFlags_SelectOnClick         = 1<<13,  // Apply selection on mouse down when clicking on unselected item. (Default)
    ImGuiMultiSelectFlags_SelectOnClickRelease  = 1<<14,  // Apply selection on mouse release when clicking an unselected item. Allow dragging an unselected item without altering selection.
    //ImGuiMultiSelectFlags_RangeSelect2d       = 1 << 15,  // Shift+Selection uses 2d geometry instead of linear sequence, so possible to use Shift+up/down to select vertically in grid. Analogous to what BoxSelect does.
    ImGuiMultiSelectFlags_NavWrapX              = 1<<16;  // [Temporary] Enable navigation wrapping on X axis. Provided as a convenience because we don't have a design for the general Nav API for this yet. When the more general feature be public we may obsolete this flag in favor of new one.
// Targeting imgui\ImGuiMultiSelectIO.java



// Selection request type
/** enum ImGuiSelectionRequestType */
public static final int
    ImGuiSelectionRequestType_None     = 0,
    ImGuiSelectionRequestType_SetAll = 1,    // Request app to clear selection (if Selected==false) or select all items (if Selected==true). We cannot set RangeFirstItem/RangeLastItem as its contents is entirely up to user (not necessarily an index)
    ImGuiSelectionRequestType_SetRange = 2;  // Request app to select/unselect [RangeFirstItem..RangeLastItem] items (inclusive) based on value of Selected. Only EndMultiSelect() request this, app code can read after BeginMultiSelect() and it will always be false.
// Targeting imgui\ImGuiSelectionRequest.java


// Targeting imgui\ImGuiSelectionBasicStorage.java


public static native void ImGuiSelectionBasicStorage_ApplyRequests(ImGuiSelectionBasicStorage self, ImGuiMultiSelectIO ms_io);                // Apply selection requests coming from BeginMultiSelect() and EndMultiSelect() functions. It uses 'items_count' passed to BeginMultiSelect()
public static native @Cast("bool") boolean ImGuiSelectionBasicStorage_Contains(@Const ImGuiSelectionBasicStorage self, @Cast("ImGuiID") int id);                              // Query if an item id is in selection.
public static native void ImGuiSelectionBasicStorage_Clear(ImGuiSelectionBasicStorage self);                                                   // Clear selection
public static native void ImGuiSelectionBasicStorage_Swap(ImGuiSelectionBasicStorage self, ImGuiSelectionBasicStorage r);                     // Swap two selections
public static native void ImGuiSelectionBasicStorage_SetItemSelected(ImGuiSelectionBasicStorage self, @Cast("ImGuiID") int id, @Cast("bool") boolean selected);              // Add/remove an item from selection (generally done by ApplyRequests() function)
public static native @Cast("bool") boolean ImGuiSelectionBasicStorage_GetNextSelectedItem(ImGuiSelectionBasicStorage self, @Cast("void**") PointerPointer opaque_it, @Cast("ImGuiID*") IntPointer out_id);
public static native @Cast("bool") boolean ImGuiSelectionBasicStorage_GetNextSelectedItem(ImGuiSelectionBasicStorage self, @Cast("void**") @ByPtrPtr Pointer opaque_it, @Cast("ImGuiID*") IntPointer out_id);
public static native @Cast("bool") boolean ImGuiSelectionBasicStorage_GetNextSelectedItem(ImGuiSelectionBasicStorage self, @Cast("void**") @ByPtrPtr Pointer opaque_it, @Cast("ImGuiID*") IntBuffer out_id);
public static native @Cast("bool") boolean ImGuiSelectionBasicStorage_GetNextSelectedItem(ImGuiSelectionBasicStorage self, @Cast("void**") @ByPtrPtr Pointer opaque_it, @Cast("ImGuiID*") int[] out_id);  // Iterate selection with 'void* it = NULL; ImGuiId id; while (selection.GetNextSelectedItem(&it, &id)) { ... }'
public static native @Cast("ImGuiID") int ImGuiSelectionBasicStorage_GetStorageIdFromIndex(ImGuiSelectionBasicStorage self, int idx);
// Targeting imgui\ImGuiSelectionExternalStorage.java


public static native void ImGuiSelectionExternalStorage_ApplyRequests(ImGuiSelectionExternalStorage self, ImGuiMultiSelectIO ms_io);  // Apply selection requests by using AdapterSetItemSelected() calls

//-----------------------------------------------------------------------------
// [SECTION] Drawing API (ImDrawCmd, ImDrawIdx, ImDrawVert, ImDrawChannel, ImDrawListSplitter, ImDrawListFlags, ImDrawList, ImDrawData)
// Hold a series of drawing commands. The user provides a renderer for ImDrawData which essentially contains an array of ImDrawList.
//-----------------------------------------------------------------------------

// The maximum line width to bake anti-aliased textures for. Build atlas with ImFontAtlasFlags_NoBakedLines to disable baking.
// #ifndef IM_DRAWLIST_TEX_LINES_WIDTH_MAX
public static final int IM_DRAWLIST_TEX_LINES_WIDTH_MAX =     (63);
// Targeting imgui\ImDrawCallback.java


// #endif // #ifndef ImDrawCallback
// Special Draw callback value to request renderer backend to reset the graphics/render state.
// The renderer backend needs to handle this special value, otherwise it will crash trying to call a function at this address.
// This is useful, for example, if you submitted callbacks which you know have altered the render state and you want it to be restored.
// Render state is not reset by default because they are many perfectly useful way of altering render state (e.g. changing shader/blending settings before an Image call).
// #define ImDrawCallback_ResetRenderState     (ImDrawCallback)(-8)
// Targeting imgui\ImDrawCmd.java


// Since 1.83: returns ImTextureID associated with this draw call. Warning: DO NOT assume this is always same as 'TextureId' (we will change this function for an upcoming feature)
public static native ImTextureID ImDrawCmd_GetTexID(@Const ImDrawCmd self);
// Targeting imgui\ImDrawVert.java


// Targeting imgui\ImDrawCmdHeader.java


// Targeting imgui\ImDrawChannel.java


// Targeting imgui\ImDrawListSplitter.java


public static native void ImDrawListSplitter_Clear(ImDrawListSplitter self);                                                      // Do not clear Channels[] so our allocations are reused next frame
public static native void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter self);
public static native void ImDrawListSplitter_Split(ImDrawListSplitter self, ImDrawList draw_list, int count);
public static native void ImDrawListSplitter_Merge(ImDrawListSplitter self, ImDrawList draw_list);
public static native void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter self, ImDrawList draw_list, int channel_idx);

// Flags for ImDrawList functions
// (Legacy: bit 0 must always correspond to ImDrawFlags_Closed to be backward compatible with old API using a bool. Bits 1..3 must be unused)
/** enum ImDrawFlags_ */
public static final int
    ImDrawFlags_None                    = 0,
    ImDrawFlags_Closed                  = 1<<0,                         // PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)
    ImDrawFlags_RoundCornersTopLeft     = 1<<4,                         // AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding > 0.0f, we default to all corners). Was 0x01.
    ImDrawFlags_RoundCornersTopRight    = 1<<5,                         // AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding > 0.0f, we default to all corners). Was 0x02.
    ImDrawFlags_RoundCornersBottomLeft  = 1<<6,                         // AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding > 0.0f, we default to all corners). Was 0x04.
    ImDrawFlags_RoundCornersBottomRight = 1<<7,                         // AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding > 0.0f, we default to all corners). Wax 0x08.
    ImDrawFlags_RoundCornersNone        = 1<<8,                         // AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding > 0.0f). This is NOT zero, NOT an implicit flag!
    ImDrawFlags_RoundCornersTop         = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight,
    ImDrawFlags_RoundCornersBottom      = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
    ImDrawFlags_RoundCornersLeft        = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersTopLeft,
    ImDrawFlags_RoundCornersRight       = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_RoundCornersTopRight,
    ImDrawFlags_RoundCornersAll         = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight | ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
    ImDrawFlags_RoundCornersDefault_    = ImDrawFlags_RoundCornersAll,  // Default to ALL corners if none of the _RoundCornersXX flags are specified.
    ImDrawFlags_RoundCornersMask_       = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCornersNone;

// Flags for ImDrawList instance. Those are set automatically by ImGui:: functions from ImGuiIO settings, and generally not manipulated directly.
// It is however possible to temporarily alter flags between calls to ImDrawList:: functions.
/** enum ImDrawListFlags_ */
public static final int
    ImDrawListFlags_None                   = 0,
    ImDrawListFlags_AntiAliasedLines       = 1<<0,  // Enable anti-aliased lines/borders (*2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles)
    ImDrawListFlags_AntiAliasedLinesUseTex = 1<<1,  // Enable anti-aliased lines/borders using textures when possible. Require backend to render with bilinear filtering (NOT point/nearest filtering).
    ImDrawListFlags_AntiAliasedFill        = 1<<2,  // Enable anti-aliased edge around filled shapes (rounded rectangles, circles).
    ImDrawListFlags_AllowVtxOffset         = 1<<3;  // Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.
// Targeting imgui\ImDrawList.java


public static native void ImDrawList_PushClipRect(ImDrawList self, @ByVal ImVec2 clip_rect_min, @ByVal ImVec2 clip_rect_max, @Cast("bool") boolean intersect_with_current_clip_rect); // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
public static native void ImDrawList_PushClipRectFullScreen(ImDrawList self);
public static native void ImDrawList_PopClipRect(ImDrawList self);
public static native void ImDrawList_PushTextureID(ImDrawList self, ImTextureID texture_id);
public static native void ImDrawList_PopTextureID(ImDrawList self);
public static native @ByVal ImVec2 ImDrawList_GetClipRectMin(@Const ImDrawList self);
public static native @ByVal ImVec2 ImDrawList_GetClipRectMax(@Const ImDrawList self);
// Primitives
// - Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have "inward" anti-aliasing.
// - For rectangular primitives, "p_min" and "p_max" represent the upper-left and lower-right corners.
// - For circle primitives, use "num_segments == 0" to automatically calculate tessellation (preferred).
//   In older versions (until Dear ImGui 1.77) the AddCircle functions defaulted to num_segments == 12.
//   In future versions we will use textures to provide cheaper and higher-quality circles.
//   Use AddNgon() and AddNgonFilled() functions if you need to guarantee a specific number of sides.
public static native void ImDrawList_AddLine(ImDrawList self, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @Cast("ImU32") int col);                                                                     // Implied thickness = 1.0f
public static native void ImDrawList_AddLineEx(ImDrawList self, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @Cast("ImU32") int col, float thickness);
public static native void ImDrawList_AddRect(ImDrawList self, @ByVal ImVec2 p_min, @ByVal ImVec2 p_max, @Cast("ImU32") int col);                                                               // Implied rounding = 0.0f, flags = 0, thickness = 1.0f
public static native void ImDrawList_AddRectEx(ImDrawList self, @ByVal ImVec2 p_min, @ByVal ImVec2 p_max, @Cast("ImU32") int col, float rounding, @Cast("ImDrawFlags") int flags, float thickness); // a: upper-left, b: lower-right (== upper-left + size)
public static native void ImDrawList_AddRectFilled(ImDrawList self, @ByVal ImVec2 p_min, @ByVal ImVec2 p_max, @Cast("ImU32") int col);                                                         // Implied rounding = 0.0f, flags = 0
public static native void ImDrawList_AddRectFilledEx(ImDrawList self, @ByVal ImVec2 p_min, @ByVal ImVec2 p_max, @Cast("ImU32") int col, float rounding, @Cast("ImDrawFlags") int flags); // a: upper-left, b: lower-right (== upper-left + size)
public static native void ImDrawList_AddRectFilledMultiColor(ImDrawList self, @ByVal ImVec2 p_min, @ByVal ImVec2 p_max, @Cast("ImU32") int col_upr_left, @Cast("ImU32") int col_upr_right, @Cast("ImU32") int col_bot_right, @Cast("ImU32") int col_bot_left);
public static native void ImDrawList_AddQuad(ImDrawList self, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @ByVal ImVec2 p3, @ByVal ImVec2 p4, @Cast("ImU32") int col);                                               // Implied thickness = 1.0f
public static native void ImDrawList_AddQuadEx(ImDrawList self, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @ByVal ImVec2 p3, @ByVal ImVec2 p4, @Cast("ImU32") int col, float thickness);
public static native void ImDrawList_AddQuadFilled(ImDrawList self, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @ByVal ImVec2 p3, @ByVal ImVec2 p4, @Cast("ImU32") int col);
public static native void ImDrawList_AddTriangle(ImDrawList self, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @ByVal ImVec2 p3, @Cast("ImU32") int col);                                                      // Implied thickness = 1.0f
public static native void ImDrawList_AddTriangleEx(ImDrawList self, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @ByVal ImVec2 p3, @Cast("ImU32") int col, float thickness);
public static native void ImDrawList_AddTriangleFilled(ImDrawList self, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @ByVal ImVec2 p3, @Cast("ImU32") int col);
public static native void ImDrawList_AddCircle(ImDrawList self, @ByVal ImVec2 center, float radius, @Cast("ImU32") int col);                                                            // Implied num_segments = 0, thickness = 1.0f
public static native void ImDrawList_AddCircleEx(ImDrawList self, @ByVal ImVec2 center, float radius, @Cast("ImU32") int col, int num_segments, float thickness);
public static native void ImDrawList_AddCircleFilled(ImDrawList self, @ByVal ImVec2 center, float radius, @Cast("ImU32") int col, int num_segments);
public static native void ImDrawList_AddNgon(ImDrawList self, @ByVal ImVec2 center, float radius, @Cast("ImU32") int col, int num_segments);                                            // Implied thickness = 1.0f
public static native void ImDrawList_AddNgonEx(ImDrawList self, @ByVal ImVec2 center, float radius, @Cast("ImU32") int col, int num_segments, float thickness);
public static native void ImDrawList_AddNgonFilled(ImDrawList self, @ByVal ImVec2 center, float radius, @Cast("ImU32") int col, int num_segments);
public static native void ImDrawList_AddEllipse(ImDrawList self, @ByVal ImVec2 center, @ByVal ImVec2 radius, @Cast("ImU32") int col);                                                          // Implied rot = 0.0f, num_segments = 0, thickness = 1.0f
public static native void ImDrawList_AddEllipseEx(ImDrawList self, @ByVal ImVec2 center, @ByVal ImVec2 radius, @Cast("ImU32") int col, float rot, int num_segments, float thickness);
public static native void ImDrawList_AddEllipseFilled(ImDrawList self, @ByVal ImVec2 center, @ByVal ImVec2 radius, @Cast("ImU32") int col);                                                    // Implied rot = 0.0f, num_segments = 0
public static native void ImDrawList_AddEllipseFilledEx(ImDrawList self, @ByVal ImVec2 center, @ByVal ImVec2 radius, @Cast("ImU32") int col, float rot, int num_segments);
public static native void ImDrawList_AddText(ImDrawList self, @ByVal ImVec2 pos, @Cast("ImU32") int col, @Cast("const char*") BytePointer text_begin);
public static native void ImDrawList_AddText(ImDrawList self, @ByVal ImVec2 pos, @Cast("ImU32") int col, String text_begin);                                                       // Implied text_end = NULL
public static native void ImDrawList_AddTextEx(ImDrawList self, @ByVal ImVec2 pos, @Cast("ImU32") int col, @Cast("const char*") BytePointer text_begin, @Cast("const char*") BytePointer text_end);
public static native void ImDrawList_AddTextEx(ImDrawList self, @ByVal ImVec2 pos, @Cast("ImU32") int col, String text_begin, String text_end);
public static native void ImDrawList_AddTextImFontPtr(ImDrawList self, @Const ImFont font, float font_size, @ByVal ImVec2 pos, @Cast("ImU32") int col, @Cast("const char*") BytePointer text_begin);
public static native void ImDrawList_AddTextImFontPtr(ImDrawList self, @Const ImFont font, float font_size, @ByVal ImVec2 pos, @Cast("ImU32") int col, String text_begin);         // Implied text_end = NULL, wrap_width = 0.0f, cpu_fine_clip_rect = NULL
public static native void ImDrawList_AddTextImFontPtrEx(ImDrawList self, @Const ImFont font, float font_size, @ByVal ImVec2 pos, @Cast("ImU32") int col, @Cast("const char*") BytePointer text_begin, @Cast("const char*") BytePointer text_end, float wrap_width, @Const ImVec4 cpu_fine_clip_rect);
public static native void ImDrawList_AddTextImFontPtrEx(ImDrawList self, @Const ImFont font, float font_size, @ByVal ImVec2 pos, @Cast("ImU32") int col, String text_begin, String text_end, float wrap_width, @Const ImVec4 cpu_fine_clip_rect);
public static native void ImDrawList_AddBezierCubic(ImDrawList self, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @ByVal ImVec2 p3, @ByVal ImVec2 p4, @Cast("ImU32") int col, float thickness, int num_segments); // Cubic Bezier (4 control points)
public static native void ImDrawList_AddBezierQuadratic(ImDrawList self, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @ByVal ImVec2 p3, @Cast("ImU32") int col, float thickness, int num_segments);  // Quadratic Bezier (3 control points)
// General polygon
// - Only simple polygons are supported by filling functions (no self-intersections, no holes).
// - Concave polygon fill is more expensive than convex one: it has O(N^2) complexity. Provided as a convenience fo user but not used by main library.
public static native void ImDrawList_AddPolyline(ImDrawList self, @Const ImVec2 points, int num_points, @Cast("ImU32") int col, @Cast("ImDrawFlags") int flags, float thickness);
public static native void ImDrawList_AddConvexPolyFilled(ImDrawList self, @Const ImVec2 points, int num_points, @Cast("ImU32") int col);
public static native void ImDrawList_AddConcavePolyFilled(ImDrawList self, @Const ImVec2 points, int num_points, @Cast("ImU32") int col);
// Image primitives
// - Read FAQ to understand what ImTextureID is.
// - "p_min" and "p_max" represent the upper-left and lower-right corners of the rectangle.
// - "uv_min" and "uv_max" represent the normalized texture coordinates to use for those corners. Using (0,0)->(1,1) texture coordinates will generally display the entire texture.
public static native void ImDrawList_AddImage(ImDrawList self, ImTextureID user_texture_id, @ByVal ImVec2 p_min, @ByVal ImVec2 p_max);                                            // Implied uv_min = ImVec2(0, 0), uv_max = ImVec2(1, 1), col = IM_COL32_WHITE
public static native void ImDrawList_AddImageEx(ImDrawList self, ImTextureID user_texture_id, @ByVal ImVec2 p_min, @ByVal ImVec2 p_max, @ByVal ImVec2 uv_min, @ByVal ImVec2 uv_max, @Cast("ImU32") int col);
public static native void ImDrawList_AddImageQuad(ImDrawList self, ImTextureID user_texture_id, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @ByVal ImVec2 p3, @ByVal ImVec2 p4);                        // Implied uv1 = ImVec2(0, 0), uv2 = ImVec2(1, 0), uv3 = ImVec2(1, 1), uv4 = ImVec2(0, 1), col = IM_COL32_WHITE
public static native void ImDrawList_AddImageQuadEx(ImDrawList self, ImTextureID user_texture_id, @ByVal ImVec2 p1, @ByVal ImVec2 p2, @ByVal ImVec2 p3, @ByVal ImVec2 p4, @ByVal ImVec2 uv1, @ByVal ImVec2 uv2, @ByVal ImVec2 uv3, @ByVal ImVec2 uv4, @Cast("ImU32") int col);
public static native void ImDrawList_AddImageRounded(ImDrawList self, ImTextureID user_texture_id, @ByVal ImVec2 p_min, @ByVal ImVec2 p_max, @ByVal ImVec2 uv_min, @ByVal ImVec2 uv_max, @Cast("ImU32") int col, float rounding, @Cast("ImDrawFlags") int flags);
// Stateful path API, add points then finish with PathFillConvex() or PathStroke()
// - Important: filled shapes must always use clockwise winding order! The anti-aliasing fringe depends on it. Counter-clockwise shapes will have "inward" anti-aliasing.
//   so e.g. 'PathArcTo(center, radius, PI * -0.5f, PI)' is ok, whereas 'PathArcTo(center, radius, PI, PI * -0.5f)' won't have correct anti-aliasing when followed by PathFillConvex().
public static native void ImDrawList_PathClear(ImDrawList self);
public static native void ImDrawList_PathLineTo(ImDrawList self, @ByVal ImVec2 pos);
public static native void ImDrawList_PathLineToMergeDuplicate(ImDrawList self, @ByVal ImVec2 pos);
public static native void ImDrawList_PathFillConvex(ImDrawList self, @Cast("ImU32") int col);
public static native void ImDrawList_PathFillConcave(ImDrawList self, @Cast("ImU32") int col);
public static native void ImDrawList_PathStroke(ImDrawList self, @Cast("ImU32") int col, @Cast("ImDrawFlags") int flags, float thickness);
public static native void ImDrawList_PathArcTo(ImDrawList self, @ByVal ImVec2 center, float radius, float a_min, float a_max, int num_segments);
public static native void ImDrawList_PathArcToFast(ImDrawList self, @ByVal ImVec2 center, float radius, int a_min_of_12, int a_max_of_12);                                 // Use precomputed angles for a 12 steps circle
public static native void ImDrawList_PathEllipticalArcTo(ImDrawList self, @ByVal ImVec2 center, @ByVal ImVec2 radius, float rot, float a_min, float a_max);                       // Implied num_segments = 0
public static native void ImDrawList_PathEllipticalArcToEx(ImDrawList self, @ByVal ImVec2 center, @ByVal ImVec2 radius, float rot, float a_min, float a_max, int num_segments); // Ellipse
public static native void ImDrawList_PathBezierCubicCurveTo(ImDrawList self, @ByVal ImVec2 p2, @ByVal ImVec2 p3, @ByVal ImVec2 p4, int num_segments);                          // Cubic Bezier (4 control points)
public static native void ImDrawList_PathBezierQuadraticCurveTo(ImDrawList self, @ByVal ImVec2 p2, @ByVal ImVec2 p3, int num_segments);                                 // Quadratic Bezier (3 control points)
public static native void ImDrawList_PathRect(ImDrawList self, @ByVal ImVec2 rect_min, @ByVal ImVec2 rect_max, float rounding, @Cast("ImDrawFlags") int flags);
// Advanced
public static native void ImDrawList_AddCallback(ImDrawList self, ImDrawCallback callback, Pointer callback_data);                                                    // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.
public static native void ImDrawList_AddDrawCmd(ImDrawList self);                                                                                                   // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible
public static native ImDrawList ImDrawList_CloneOutput(@Const ImDrawList self);                                                                                            // Create a clone of the CmdBuffer/IdxBuffer/VtxBuffer.
// Advanced: Channels
// - Use to split render into layers. By switching channels to can render out-of-order (e.g. submit FG primitives before BG primitives)
// - Use to minimize draw calls (e.g. if going back-and-forth between multiple clipping rectangles, prefer to append into separate channels then merge at the end)
// - This API shouldn't have been in ImDrawList in the first place!
//   Prefer using your own persistent instance of ImDrawListSplitter as you can stack them.
//   Using the ImDrawList::ChannelsXXXX you cannot stack a split over another.
public static native void ImDrawList_ChannelsSplit(ImDrawList self, int count);
public static native void ImDrawList_ChannelsMerge(ImDrawList self);
public static native void ImDrawList_ChannelsSetCurrent(ImDrawList self, int n);
// Advanced: Primitives allocations
// - We render triangles (three vertices)
// - All primitives needs to be reserved via PrimReserve() beforehand.
public static native void ImDrawList_PrimReserve(ImDrawList self, int idx_count, int vtx_count);
public static native void ImDrawList_PrimUnreserve(ImDrawList self, int idx_count, int vtx_count);
public static native void ImDrawList_PrimRect(ImDrawList self, @ByVal ImVec2 a, @ByVal ImVec2 b, @Cast("ImU32") int col);                                                                      // Axis aligned rectangle (composed of two triangles)
public static native void ImDrawList_PrimRectUV(ImDrawList self, @ByVal ImVec2 a, @ByVal ImVec2 b, @ByVal ImVec2 uv_a, @ByVal ImVec2 uv_b, @Cast("ImU32") int col);
public static native void ImDrawList_PrimQuadUV(ImDrawList self, @ByVal ImVec2 a, @ByVal ImVec2 b, @ByVal ImVec2 c, @ByVal ImVec2 d, @ByVal ImVec2 uv_a, @ByVal ImVec2 uv_b, @ByVal ImVec2 uv_c, @ByVal ImVec2 uv_d, @Cast("ImU32") int col);
public static native void ImDrawList_PrimWriteVtx(ImDrawList self, @ByVal ImVec2 pos, @ByVal ImVec2 uv, @Cast("ImU32") int col);
public static native void ImDrawList_PrimWriteIdx(ImDrawList self, @Cast("ImDrawIdx") short idx);
public static native void ImDrawList_PrimVtx(ImDrawList self, @ByVal ImVec2 pos, @ByVal ImVec2 uv, @Cast("ImU32") int col);                                                                    // Write vertex with unique index
// [Internal helpers]
public static native void ImDrawList__ResetForNewFrame(ImDrawList self);
public static native void ImDrawList__ClearFreeMemory(ImDrawList self);
public static native void ImDrawList__PopUnusedDrawCmd(ImDrawList self);
public static native void ImDrawList__TryMergeDrawCmds(ImDrawList self);
public static native void ImDrawList__OnChangedClipRect(ImDrawList self);
public static native void ImDrawList__OnChangedTextureID(ImDrawList self);
public static native void ImDrawList__OnChangedVtxOffset(ImDrawList self);
public static native void ImDrawList__SetTextureID(ImDrawList self, ImTextureID texture_id);
public static native int ImDrawList__CalcCircleAutoSegmentCount(@Const ImDrawList self, float radius);
public static native void ImDrawList__PathArcToFastEx(ImDrawList self, @ByVal ImVec2 center, float radius, int a_min_sample, int a_max_sample, int a_step);
public static native void ImDrawList__PathArcToN(ImDrawList self, @ByVal ImVec2 center, float radius, float a_min, float a_max, int num_segments);
// Targeting imgui\ImDrawData.java


public static native void ImDrawData_Clear(ImDrawData self);
public static native void ImDrawData_AddDrawList(ImDrawData self, ImDrawList draw_list);  // Helper to add an external draw list into an existing ImDrawData.
public static native void ImDrawData_DeIndexAllBuffers(ImDrawData self);                   // Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!
public static native void ImDrawData_ScaleClipRects(ImDrawData self, @ByVal ImVec2 fb_scale);
// Targeting imgui\ImFontConfig.java


// Targeting imgui\ImFontGlyph.java


// Targeting imgui\ImFontGlyphRangesBuilder.java


public static native void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder self);
public static native @Cast("bool") boolean ImFontGlyphRangesBuilder_GetBit(@Const ImFontGlyphRangesBuilder self, @Cast("size_t") long n);                                        // Get bit n in the array
public static native void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder self, @Cast("size_t") long n);                                              // Set bit n in the array
public static native void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder self, @Cast("ImWchar") int c);                                            // Add character
public static native void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder self, @Cast("const char*") BytePointer text, @Cast("const char*") BytePointer text_end);
public static native void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder self, String text, String text_end);  // Add string (each character of the UTF-8 string are added)
public static native void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder self, @Cast("const ImWchar*") IntPointer ranges);
public static native void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder self, @Cast("const ImWchar*") IntBuffer ranges);
public static native void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder self, @Cast("const ImWchar*") int[] ranges);                              // Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCII/Latin+Ext
public static native void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder self, ImVector_ImWchar out_ranges);
// Targeting imgui\ImFontAtlasCustomRect.java


public static native @Cast("bool") boolean ImFontAtlasCustomRect_IsPacked(@Const ImFontAtlasCustomRect self);

// Flags for ImFontAtlas build
/** enum ImFontAtlasFlags_ */
public static final int
    ImFontAtlasFlags_None               = 0,
    ImFontAtlasFlags_NoPowerOfTwoHeight = 1<<0,  // Don't round the height to next power of two
    ImFontAtlasFlags_NoMouseCursors     = 1<<1,  // Don't build software mouse cursors into the atlas (save a little texture memory)
    ImFontAtlasFlags_NoBakedLines       = 1<<2;  // Don't build thick line textures into the atlas (save a little texture memory, allow support for point/nearest filtering). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU).
// Targeting imgui\ImFontAtlas.java


public static native ImFont ImFontAtlas_AddFont(ImFontAtlas self, @Const ImFontConfig font_cfg);
public static native ImFont ImFontAtlas_AddFontDefault(ImFontAtlas self, @Const ImFontConfig font_cfg);
public static native ImFont ImFontAtlas_AddFontFromFileTTF(ImFontAtlas self, @Cast("const char*") BytePointer filename, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntPointer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromFileTTF(ImFontAtlas self, String filename, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntBuffer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromFileTTF(ImFontAtlas self, @Cast("const char*") BytePointer filename, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") int[] glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromFileTTF(ImFontAtlas self, String filename, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntPointer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromFileTTF(ImFontAtlas self, @Cast("const char*") BytePointer filename, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntBuffer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromFileTTF(ImFontAtlas self, String filename, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") int[] glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas self, Pointer font_data, int font_data_size, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntPointer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas self, Pointer font_data, int font_data_size, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntBuffer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas self, Pointer font_data, int font_data_size, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") int[] glyph_ranges); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.
public static native ImFont ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas self, @Const Pointer compressed_font_data, int compressed_font_data_size, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntPointer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas self, @Const Pointer compressed_font_data, int compressed_font_data_size, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntBuffer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas self, @Const Pointer compressed_font_data, int compressed_font_data_size, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") int[] glyph_ranges); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.
public static native ImFont ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas self, @Cast("const char*") BytePointer compressed_font_data_base85, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntPointer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas self, String compressed_font_data_base85, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntBuffer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas self, @Cast("const char*") BytePointer compressed_font_data_base85, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") int[] glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas self, String compressed_font_data_base85, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntPointer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas self, @Cast("const char*") BytePointer compressed_font_data_base85, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") IntBuffer glyph_ranges);
public static native ImFont ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas self, String compressed_font_data_base85, float size_pixels, @Const ImFontConfig font_cfg, @Cast("const ImWchar*") int[] glyph_ranges); // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.
public static native void ImFontAtlas_ClearInputData(ImFontAtlas self);                                                                                     // Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.
public static native void ImFontAtlas_ClearTexData(ImFontAtlas self);                                                                                       // Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.
public static native void ImFontAtlas_ClearFonts(ImFontAtlas self);                                                                                         // Clear output font data (glyphs storage, UV coordinates).
public static native void ImFontAtlas_Clear(ImFontAtlas self);                                                                                              // Clear all input and output.
// Build atlas, retrieve pixel data.
// User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID().
// The pitch is always = Width * BytesPerPixels (1 or 4)
// Building in RGBA32 format is provided for convenience and compatibility, but note that unless you manually manipulate or copy color data into
// the texture (e.g. when using the AddCustomRect*** api), then the RGB pixels emitted will always be white (~75% of memory/bandwidth waste.
public static native @Cast("bool") boolean ImFontAtlas_Build(ImFontAtlas self);                                                                                              // Build pixels data. This is called automatically for you by the GetTexData*** functions.
public static native void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas self, @Cast("unsigned char**") PointerPointer out_pixels, IntPointer out_width, IntPointer out_height, IntPointer out_bytes_per_pixel);
public static native void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas self, @Cast("unsigned char**") @ByPtrPtr BytePointer out_pixels, IntPointer out_width, IntPointer out_height, IntPointer out_bytes_per_pixel);
public static native void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas self, @Cast("unsigned char**") @ByPtrPtr ByteBuffer out_pixels, IntBuffer out_width, IntBuffer out_height, IntBuffer out_bytes_per_pixel);
public static native void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas self, @Cast("unsigned char**") @ByPtrPtr byte[] out_pixels, int[] out_width, int[] out_height, int[] out_bytes_per_pixel); // 1 byte per-pixel
public static native void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas self, @Cast("unsigned char**") PointerPointer out_pixels, IntPointer out_width, IntPointer out_height, IntPointer out_bytes_per_pixel);
public static native void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas self, @Cast("unsigned char**") @ByPtrPtr BytePointer out_pixels, IntPointer out_width, IntPointer out_height, IntPointer out_bytes_per_pixel);
public static native void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas self, @Cast("unsigned char**") @ByPtrPtr ByteBuffer out_pixels, IntBuffer out_width, IntBuffer out_height, IntBuffer out_bytes_per_pixel);
public static native void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas self, @Cast("unsigned char**") @ByPtrPtr byte[] out_pixels, int[] out_width, int[] out_height, int[] out_bytes_per_pixel); // 4 bytes-per-pixel
public static native @Cast("bool") boolean ImFontAtlas_IsBuilt(@Const ImFontAtlas self);                                                                                      // Bit ambiguous: used to detect when user didn't build texture but effectively we should check TexID != 0 except that would be backend dependent...
public static native void ImFontAtlas_SetTexID(ImFontAtlas self, ImTextureID id);
// Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)
// NB: Make sure that your string are UTF-8 and NOT in your local code page.
// Read https://github.com/ocornut/imgui/blob/master/docs/FONTS.md/#about-utf-8-encoding for details.
// NB: Consider using ImFontGlyphRangesBuilder to build glyph ranges from textual data.
public static native @Cast("const ImWchar*") IntPointer ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas self);                                                                              // Basic Latin, Extended Latin
public static native @Cast("const ImWchar*") IntPointer ImFontAtlas_GetGlyphRangesGreek(ImFontAtlas self);                                                                                // Default + Greek and Coptic
public static native @Cast("const ImWchar*") IntPointer ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas self);                                                                               // Default + Korean characters
public static native @Cast("const ImWchar*") IntPointer ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas self);                                                                             // Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs
public static native @Cast("const ImWchar*") IntPointer ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas self);                                                                          // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs
public static native @Cast("const ImWchar*") IntPointer ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas self);                                                              // Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese
public static native @Cast("const ImWchar*") IntPointer ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas self);                                                                             // Default + about 400 Cyrillic characters
public static native @Cast("const ImWchar*") IntPointer ImFontAtlas_GetGlyphRangesThai(ImFontAtlas self);                                                                                 // Default + Thai characters
public static native @Cast("const ImWchar*") IntPointer ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas self);                                                                           // Default + Vietnamese characters
// You can request arbitrary rectangles to be packed into the atlas, for your own purposes.
// - After calling Build(), you can query the rectangle position and render your pixels.
// - If you render colored output, set 'atlas->TexPixelsUseColors = true' as this may help some backends decide of preferred texture format.
// - You can also request your rectangles to be mapped as font glyph (given a font + Unicode point),
//   so you can render e.g. custom colorful icons and use them as regular glyphs.
// - Read docs/FONTS.md for more details about using colorful icons.
// - Note: this API may be redesigned later in order to support multi-monitor varying DPI settings.
public static native int ImFontAtlas_AddCustomRectRegular(ImFontAtlas self, int width, int height);
public static native int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas self, ImFont font, @Cast("ImWchar") int id, int width, int height, float advance_x, @ByVal ImVec2 offset);
public static native ImFontAtlasCustomRect ImFontAtlas_GetCustomRectByIndex(ImFontAtlas self, int index);
// [Internal]
public static native void ImFontAtlas_CalcCustomRectUV(@Const ImFontAtlas self, @Const ImFontAtlasCustomRect rect, ImVec2 out_uv_min, ImVec2 out_uv_max);
public static native @Cast("bool") boolean ImFontAtlas_GetMouseCursorTexData(ImFontAtlas self, @Cast("ImGuiMouseCursor") int cursor, ImVec2 out_offset, ImVec2 out_size, ImVec2 out_uv_border, ImVec2 out_uv_fill);
// Targeting imgui\ImFont.java


public static native @Const ImFontGlyph ImFont_FindGlyph(@Const ImFont self, @Cast("ImWchar") int c);
public static native @Const ImFontGlyph ImFont_FindGlyphNoFallback(@Const ImFont self, @Cast("ImWchar") int c);
public static native float ImFont_GetCharAdvance(@Const ImFont self, @Cast("ImWchar") int c);
public static native @Cast("bool") boolean ImFont_IsLoaded(@Const ImFont self);
public static native @Cast("const char*") BytePointer ImFont_GetDebugName(@Const ImFont self);
// 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.
// 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.
public static native @ByVal ImVec2 ImFont_CalcTextSizeA(@Const ImFont self, float size, float max_width, float wrap_width, @Cast("const char*") BytePointer text_begin);
public static native @ByVal ImVec2 ImFont_CalcTextSizeA(@Const ImFont self, float size, float max_width, float wrap_width, String text_begin);          // Implied text_end = NULL, remaining = NULL
public static native @ByVal ImVec2 ImFont_CalcTextSizeAEx(@Const ImFont self, float size, float max_width, float wrap_width, @Cast("const char*") BytePointer text_begin, @Cast("const char*") BytePointer text_end, @Cast("const char**") PointerPointer remaining);
public static native @ByVal ImVec2 ImFont_CalcTextSizeAEx(@Const ImFont self, float size, float max_width, float wrap_width, @Cast("const char*") BytePointer text_begin, @Cast("const char*") BytePointer text_end, @Cast("const char**") @ByPtrPtr BytePointer remaining);
public static native @ByVal ImVec2 ImFont_CalcTextSizeAEx(@Const ImFont self, float size, float max_width, float wrap_width, String text_begin, String text_end, @Cast("const char**") @ByPtrPtr ByteBuffer remaining);
public static native @ByVal ImVec2 ImFont_CalcTextSizeAEx(@Const ImFont self, float size, float max_width, float wrap_width, @Cast("const char*") BytePointer text_begin, @Cast("const char*") BytePointer text_end, @Cast("const char**") @ByPtrPtr byte[] remaining);
public static native @ByVal ImVec2 ImFont_CalcTextSizeAEx(@Const ImFont self, float size, float max_width, float wrap_width, String text_begin, String text_end, @Cast("const char**") @ByPtrPtr BytePointer remaining);
public static native @ByVal ImVec2 ImFont_CalcTextSizeAEx(@Const ImFont self, float size, float max_width, float wrap_width, @Cast("const char*") BytePointer text_begin, @Cast("const char*") BytePointer text_end, @Cast("const char**") @ByPtrPtr ByteBuffer remaining);
public static native @ByVal ImVec2 ImFont_CalcTextSizeAEx(@Const ImFont self, float size, float max_width, float wrap_width, String text_begin, String text_end, @Cast("const char**") @ByPtrPtr byte[] remaining); // utf8
public static native @Cast("const char*") BytePointer ImFont_CalcWordWrapPositionA(@Const ImFont self, float scale, @Cast("const char*") BytePointer text, @Cast("const char*") BytePointer text_end, float wrap_width);
public static native String ImFont_CalcWordWrapPositionA(@Const ImFont self, float scale, String text, String text_end, float wrap_width);
public static native void ImFont_RenderChar(@Const ImFont self, ImDrawList draw_list, float size, @ByVal ImVec2 pos, @Cast("ImU32") int col, @Cast("ImWchar") int c);
public static native void ImFont_RenderText(@Const ImFont self, ImDrawList draw_list, float size, @ByVal ImVec2 pos, @Cast("ImU32") int col, @ByVal ImVec4 clip_rect, @Cast("const char*") BytePointer text_begin, @Cast("const char*") BytePointer text_end, float wrap_width, @Cast("bool") boolean cpu_fine_clip);
public static native void ImFont_RenderText(@Const ImFont self, ImDrawList draw_list, float size, @ByVal ImVec2 pos, @Cast("ImU32") int col, @ByVal ImVec4 clip_rect, String text_begin, String text_end, float wrap_width, @Cast("bool") boolean cpu_fine_clip);
// [Internal] Don't use!
public static native void ImFont_BuildLookupTable(ImFont self);
public static native void ImFont_ClearOutputData(ImFont self);
public static native void ImFont_GrowIndex(ImFont self, int new_size);
public static native void ImFont_AddGlyph(ImFont self, @Const ImFontConfig src_cfg, @Cast("ImWchar") int c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
public static native void ImFont_AddRemapChar(ImFont self, @Cast("ImWchar") int dst, @Cast("ImWchar") int src, @Cast("bool") boolean overwrite_dst);                             // Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.
public static native void ImFont_SetGlyphVisible(ImFont self, @Cast("ImWchar") int c, @Cast("bool") boolean visible);
public static native @Cast("bool") boolean ImFont_IsGlyphRangeUnused(ImFont self, @Cast("unsigned int") int c_begin, @Cast("unsigned int") int c_last);

//-----------------------------------------------------------------------------
// [SECTION] Viewports
//-----------------------------------------------------------------------------

// Flags stored in ImGuiViewport::Flags, giving indications to the platform backends.
/** enum ImGuiViewportFlags_ */
public static final int
    ImGuiViewportFlags_None                = 0,
    ImGuiViewportFlags_IsPlatformWindow    = 1<<0,   // Represent a Platform Window
    ImGuiViewportFlags_IsPlatformMonitor   = 1<<1,   // Represent a Platform Monitor (unused yet)
    ImGuiViewportFlags_OwnedByApp          = 1<<2,   // Platform Window: Is created/managed by the user application? (rather than our backend)
    ImGuiViewportFlags_NoDecoration        = 1<<3,   // Platform Window: Disable platform decorations: title bar, borders, etc. (generally set all windows, but if ImGuiConfigFlags_ViewportsDecoration is set we only set this on popups/tooltips)
    ImGuiViewportFlags_NoTaskBarIcon       = 1<<4,   // Platform Window: Disable platform task bar icon (generally set on popups/tooltips, or all windows if ImGuiConfigFlags_ViewportsNoTaskBarIcon is set)
    ImGuiViewportFlags_NoFocusOnAppearing  = 1<<5,   // Platform Window: Don't take focus when created.
    ImGuiViewportFlags_NoFocusOnClick      = 1<<6,   // Platform Window: Don't take focus when clicked on.
    ImGuiViewportFlags_NoInputs            = 1<<7,   // Platform Window: Make mouse pass through so we can drag this window while peaking behind it.
    ImGuiViewportFlags_NoRendererClear     = 1<<8,   // Platform Window: Renderer doesn't need to clear the framebuffer ahead (because we will fill it entirely).
    ImGuiViewportFlags_NoAutoMerge         = 1<<9,   // Platform Window: Avoid merging this window into another host window. This can only be set via ImGuiWindowClass viewport flags override (because we need to now ahead if we are going to create a viewport in the first place!).
    ImGuiViewportFlags_TopMost             = 1<<10,  // Platform Window: Display on top (for tooltips only).
    ImGuiViewportFlags_CanHostOtherWindows = 1<<11,  // Viewport can host multiple imgui windows (secondary viewports are associated to a single window). // FIXME: In practice there's still probably code making the assumption that this is always and only on the MainViewport. Will fix once we add support for "no main viewport".

    // Output status flags (from Platform)
    ImGuiViewportFlags_IsMinimized         = 1<<12,  // Platform Window: Window is minimized, can skip render. When minimized we tend to avoid using the viewport pos/size for clipping window or testing if they are contained in the viewport.
    ImGuiViewportFlags_IsFocused           = 1<<13;  // Platform Window: Window is focused (last call to Platform_GetWindowFocus() returned true)
// Targeting imgui\ImGuiViewport.java


// Helpers
public static native @ByVal ImVec2 ImGuiViewport_GetCenter(@Const ImGuiViewport self);
public static native @ByVal ImVec2 ImGuiViewport_GetWorkCenter(@Const ImGuiViewport self);
// Targeting imgui\ImGuiPlatformIO.java


// Targeting imgui\ImGuiPlatformMonitor.java


// Targeting imgui\ImGuiPlatformImeData.java



//-----------------------------------------------------------------------------
// [SECTION] Obsolete functions and types
// (Will be removed! Read 'API BREAKING CHANGES' section in imgui.cpp for details)
// Please keep your copy of dear imgui up to date! Occasionally set '#define IMGUI_DISABLE_OBSOLETE_FUNCTIONS' in imconfig.h to stay ahead.
//-----------------------------------------------------------------------------

// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
// OBSOLETED in 1.91.0 (from July 2024)
public static native void ImGui_PushButtonRepeat(@Cast("bool") boolean repeat);
public static native void ImGui_PopButtonRepeat();
public static native void ImGui_PushTabStop(@Cast("bool") boolean tab_stop);
public static native void ImGui_PopTabStop();
public static native @ByVal ImVec2 ImGui_GetContentRegionMax();                                                            // Content boundaries max (e.g. window boundaries including scrolling, or current column boundaries). You should never need this. Always use GetCursorScreenPos() and GetContentRegionAvail()!
public static native @ByVal ImVec2 ImGui_GetWindowContentRegionMin();                                                      // Content boundaries min for the window (roughly (0,0)-Scroll), in window-local coordinates. You should never need this. Always use GetCursorScreenPos() and GetContentRegionAvail()!
public static native @ByVal ImVec2 ImGui_GetWindowContentRegionMax();                                                      // Content boundaries max for the window (roughly (0,0)+Size-Scroll), in window-local coordinates. You should never need this. Always use GetCursorScreenPos() and GetContentRegionAvail()!
// OBSOLETED in 1.90.0 (from September 2023)
public static native @Cast("bool") boolean ImGui_BeginChildFrame(@Cast("ImGuiID") int id, @ByVal ImVec2 size);                                             // Implied window_flags = 0
public static native @Cast("bool") boolean ImGui_BeginChildFrameEx(@Cast("ImGuiID") int id, @ByVal ImVec2 size, @Cast("ImGuiWindowFlags") int window_flags);
public static native void ImGui_EndChildFrame();
//static inline bool BeginChild(const char* str_id, const ImVec2& size_arg, bool borders, ImGuiWindowFlags window_flags){ return BeginChild(str_id, size_arg, borders ? ImGuiChildFlags_Borders : ImGuiChildFlags_None, window_flags); } // Unnecessary as true == ImGuiChildFlags_Borders
//static inline bool BeginChild(ImGuiID id, const ImVec2& size_arg, bool borders, ImGuiWindowFlags window_flags)        { return BeginChild(id, size_arg, borders ? ImGuiChildFlags_Borders : ImGuiChildFlags_None, window_flags);     } // Unnecessary as true == ImGuiChildFlags_Borders
public static native void ImGui_ShowStackToolWindow(@Cast("bool*") BoolPointer p_open);
public static native void ImGui_ShowStackToolWindow(@Cast("bool*") boolean[] p_open);
// Targeting imgui\Old_callback_Pointer_int_PointerPointer.java


public static native @Cast("bool") boolean ImGui_ComboObsolete(@Cast("const char*") BytePointer label, IntPointer current_item, Old_callback_Pointer_int_PointerPointer old_callback, Pointer user_data, int items_count);
// Targeting imgui\Old_callback_Pointer_int_BytePointer.java


public static native @Cast("bool") boolean ImGui_ComboObsolete(@Cast("const char*") BytePointer label, IntPointer current_item, Old_callback_Pointer_int_BytePointer old_callback, Pointer user_data, int items_count);
// Targeting imgui\Old_callback_Pointer_int_ByteBuffer.java


public static native @Cast("bool") boolean ImGui_ComboObsolete(String label, IntBuffer current_item, Old_callback_Pointer_int_ByteBuffer old_callback, Pointer user_data, int items_count);
// Targeting imgui\Old_callback_Pointer_int_byte__.java


public static native @Cast("bool") boolean ImGui_ComboObsolete(@Cast("const char*") BytePointer label, int[] current_item, Old_callback_Pointer_int_byte__ old_callback, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ComboObsolete(String label, IntPointer current_item, Old_callback_Pointer_int_BytePointer old_callback, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ComboObsolete(@Cast("const char*") BytePointer label, IntBuffer current_item, Old_callback_Pointer_int_ByteBuffer old_callback, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ComboObsolete(String label, int[] current_item, Old_callback_Pointer_int_byte__ old_callback, Pointer user_data, int items_count); // Implied popup_max_height_in_items = -1
public static native @Cast("bool") boolean ImGui_ComboObsoleteEx(@Cast("const char*") BytePointer label, IntPointer current_item, Old_callback_Pointer_int_PointerPointer old_callback, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboObsoleteEx(@Cast("const char*") BytePointer label, IntPointer current_item, Old_callback_Pointer_int_BytePointer old_callback, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboObsoleteEx(String label, IntBuffer current_item, Old_callback_Pointer_int_ByteBuffer old_callback, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboObsoleteEx(@Cast("const char*") BytePointer label, int[] current_item, Old_callback_Pointer_int_byte__ old_callback, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboObsoleteEx(String label, IntPointer current_item, Old_callback_Pointer_int_BytePointer old_callback, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboObsoleteEx(@Cast("const char*") BytePointer label, IntBuffer current_item, Old_callback_Pointer_int_ByteBuffer old_callback, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ComboObsoleteEx(String label, int[] current_item, Old_callback_Pointer_int_byte__ old_callback, Pointer user_data, int items_count, int popup_max_height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxObsolete(@Cast("const char*") BytePointer label, IntPointer current_item, Old_callback_Pointer_int_PointerPointer old_callback, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ListBoxObsolete(@Cast("const char*") BytePointer label, IntPointer current_item, Old_callback_Pointer_int_BytePointer old_callback, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ListBoxObsolete(String label, IntBuffer current_item, Old_callback_Pointer_int_ByteBuffer old_callback, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ListBoxObsolete(@Cast("const char*") BytePointer label, int[] current_item, Old_callback_Pointer_int_byte__ old_callback, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ListBoxObsolete(String label, IntPointer current_item, Old_callback_Pointer_int_BytePointer old_callback, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ListBoxObsolete(@Cast("const char*") BytePointer label, IntBuffer current_item, Old_callback_Pointer_int_ByteBuffer old_callback, Pointer user_data, int items_count);
public static native @Cast("bool") boolean ImGui_ListBoxObsolete(String label, int[] current_item, Old_callback_Pointer_int_byte__ old_callback, Pointer user_data, int items_count); // Implied height_in_items = -1
public static native @Cast("bool") boolean ImGui_ListBoxObsoleteEx(@Cast("const char*") BytePointer label, IntPointer current_item, Old_callback_Pointer_int_PointerPointer old_callback, Pointer user_data, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxObsoleteEx(@Cast("const char*") BytePointer label, IntPointer current_item, Old_callback_Pointer_int_BytePointer old_callback, Pointer user_data, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxObsoleteEx(String label, IntBuffer current_item, Old_callback_Pointer_int_ByteBuffer old_callback, Pointer user_data, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxObsoleteEx(@Cast("const char*") BytePointer label, int[] current_item, Old_callback_Pointer_int_byte__ old_callback, Pointer user_data, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxObsoleteEx(String label, IntPointer current_item, Old_callback_Pointer_int_BytePointer old_callback, Pointer user_data, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxObsoleteEx(@Cast("const char*") BytePointer label, IntBuffer current_item, Old_callback_Pointer_int_ByteBuffer old_callback, Pointer user_data, int items_count, int height_in_items);
public static native @Cast("bool") boolean ImGui_ListBoxObsoleteEx(String label, int[] current_item, Old_callback_Pointer_int_byte__ old_callback, Pointer user_data, int items_count, int height_in_items);
// OBSOLETED in 1.89.7 (from June 2023)
public static native void ImGui_SetItemAllowOverlap();                                                            // Use SetNextItemAllowOverlap() before item.
// OBSOLETED in 1.89.4 (from March 2023)
public static native void ImGui_PushAllowKeyboardFocus(@Cast("bool") boolean tab_stop);
public static native void ImGui_PopAllowKeyboardFocus();
// OBSOLETED in 1.87 (from February 2022 but more formally obsoleted April 2024)
public static native @Cast("ImGuiKey") int ImGui_GetKeyIndex(@Cast("ImGuiKey") int key);                                                            // Map ImGuiKey_* values into legacy native key index. == io.KeyMap[key]. When using a 1.87+ backend using io.AddKeyEvent(), calling GetKeyIndex() with ANY ImGuiKey_XXXX values will return the same value!
//static inline ImGuiKey GetKeyIndex(ImGuiKey key)                          { IM_ASSERT(key >= ImGuiKey_NamedKey_BEGIN && key < ImGuiKey_NamedKey_END); return key; }

// Some of the older obsolete names along with their replacement (commented out so they are not reported in IDE)
//-- OBSOLETED in 1.89 (from August 2022)
//IMGUI_API bool      ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), int frame_padding = -1, const ImVec4& bg_col = ImVec4(0, 0, 0, 0), const ImVec4& tint_col = ImVec4(1, 1, 1, 1)); // --> Use new ImageButton() signature (explicit item id, regular FramePadding). Refer to code in 1.91 if you want to grab a copy of this version.
//-- OBSOLETED in 1.88 (from May 2022)
//static inline void  CaptureKeyboardFromApp(bool want_capture_keyboard = true)     { SetNextFrameWantCaptureKeyboard(want_capture_keyboard); } // Renamed as name was misleading + removed default value.
//static inline void  CaptureMouseFromApp(bool want_capture_mouse = true)           { SetNextFrameWantCaptureMouse(want_capture_mouse); }       // Renamed as name was misleading + removed default value.
//-- OBSOLETED in 1.86 (from November 2021)
//IMGUI_API void      CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end); // Code removed, see 1.90 for last version of the code. Calculate range of visible items for large list of evenly sized items. Prefer using ImGuiListClipper.
//-- OBSOLETED in 1.85 (from August 2021)
//static inline float GetWindowContentRegionWidth()                                               { return GetWindowContentRegionMax().x - GetWindowContentRegionMin().x; }
//-- OBSOLETED in 1.81 (from February 2021)
//static inline bool  ListBoxHeader(const char* label, const ImVec2& size = ImVec2(0, 0))         { return BeginListBox(label, size); }
//static inline bool  ListBoxHeader(const char* label, int items_count, int height_in_items = -1) { float height = GetTextLineHeightWithSpacing() * ((height_in_items < 0 ? ImMin(items_count, 7) : height_in_items) + 0.25f) + GetStyle().FramePadding.y * 2.0f; return BeginListBox(label, ImVec2(0.0f, height)); } // Helper to calculate size from items_count and height_in_items
//static inline void  ListBoxFooter()                                                             { EndListBox(); }
//-- OBSOLETED in 1.79 (from August 2020)
//static inline void  OpenPopupContextItem(const char* str_id = NULL, ImGuiMouseButton mb = 1)    { OpenPopupOnItemClick(str_id, mb); } // Bool return value removed. Use IsWindowAppearing() in BeginPopup() instead. Renamed in 1.77, renamed back in 1.79. Sorry!
//-- OBSOLETED in 1.78 (from June 2020): Old drag/sliders functions that took a 'float power > 1.0f' argument instead of ImGuiSliderFlags_Logarithmic. See github.com/ocornut/imgui/issues/3361 for details.
//IMGUI_API bool      DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, float power = 1.0f)                                                            // OBSOLETED in 1.78 (from June 2020)
//IMGUI_API bool      DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, float power = 1.0f);                                          // OBSOLETED in 1.78 (from June 2020)
//IMGUI_API bool      SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, float power = 1.0f);                                                                        // OBSOLETED in 1.78 (from June 2020)
//IMGUI_API bool      SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, float power = 1.0f);                                                       // OBSOLETED in 1.78 (from June 2020)
//static inline bool  DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, float power = 1.0f)    { return DragScalar(label, ImGuiDataType_Float, v, v_speed, &v_min, &v_max, format, power); }     // OBSOLETED in 1.78 (from June 2020)
//static inline bool  DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, float power = 1.0f) { return DragScalarN(label, ImGuiDataType_Float, v, 2, v_speed, &v_min, &v_max, format, power); } // OBSOLETED in 1.78 (from June 2020)
//static inline bool  DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, float power = 1.0f) { return DragScalarN(label, ImGuiDataType_Float, v, 3, v_speed, &v_min, &v_max, format, power); } // OBSOLETED in 1.78 (from June 2020)
//static inline bool  DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, float power = 1.0f) { return DragScalarN(label, ImGuiDataType_Float, v, 4, v_speed, &v_min, &v_max, format, power); } // OBSOLETED in 1.78 (from June 2020)
//static inline bool  SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format, float power = 1.0f)                 { return SliderScalar(label, ImGuiDataType_Float, v, &v_min, &v_max, format, power); }            // OBSOLETED in 1.78 (from June 2020)
//static inline bool  SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format, float power = 1.0f)              { return SliderScalarN(label, ImGuiDataType_Float, v, 2, &v_min, &v_max, format, power); }        // OBSOLETED in 1.78 (from June 2020)
//static inline bool  SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format, float power = 1.0f)              { return SliderScalarN(label, ImGuiDataType_Float, v, 3, &v_min, &v_max, format, power); }        // OBSOLETED in 1.78 (from June 2020)
//static inline bool  SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format, float power = 1.0f)              { return SliderScalarN(label, ImGuiDataType_Float, v, 4, &v_min, &v_max, format, power); }        // OBSOLETED in 1.78 (from June 2020)
//-- OBSOLETED in 1.77 and before
//static inline bool  BeginPopupContextWindow(const char* str_id, ImGuiMouseButton mb, bool over_items) { return BeginPopupContextWindow(str_id, mb | (over_items ? 0 : ImGuiPopupFlags_NoOpenOverItems)); } // OBSOLETED in 1.77 (from June 2020)
//static inline void  TreeAdvanceToLabelPos()               { SetCursorPosX(GetCursorPosX() + GetTreeNodeToLabelSpacing()); }   // OBSOLETED in 1.72 (from July 2019)
//static inline void  SetNextTreeNodeOpen(bool open, ImGuiCond cond = 0) { SetNextItemOpen(open, cond); }                       // OBSOLETED in 1.71 (from June 2019)
//static inline float GetContentRegionAvailWidth()          { return GetContentRegionAvail().x; }                               // OBSOLETED in 1.70 (from May 2019)
//static inline ImDrawList* GetOverlayDrawList()            { return GetForegroundDrawList(); }                                 // OBSOLETED in 1.69 (from Mar 2019)
//static inline void  SetScrollHere(float ratio = 0.5f)     { SetScrollHereY(ratio); }                                          // OBSOLETED in 1.66 (from Nov 2018)
//static inline bool  IsItemDeactivatedAfterChange()        { return IsItemDeactivatedAfterEdit(); }                            // OBSOLETED in 1.63 (from Aug 2018)
//-- OBSOLETED in 1.60 and before
//static inline bool  IsAnyWindowFocused()                  { return IsWindowFocused(ImGuiFocusedFlags_AnyWindow); }            // OBSOLETED in 1.60 (from Apr 2018)
//static inline bool  IsAnyWindowHovered()                  { return IsWindowHovered(ImGuiHoveredFlags_AnyWindow); }            // OBSOLETED in 1.60 (between Dec 2017 and Apr 2018)
//static inline void  ShowTestWindow()                      { return ShowDemoWindow(); }                                        // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
//static inline bool  IsRootWindowFocused()                 { return IsWindowFocused(ImGuiFocusedFlags_RootWindow); }           // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
//static inline bool  IsRootWindowOrAnyChildFocused()       { return IsWindowFocused(ImGuiFocusedFlags_RootAndChildWindows); }  // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
//static inline void  SetNextWindowContentWidth(float w)    { SetNextWindowContentSize(ImVec2(w, 0.0f)); }                      // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
//static inline float GetItemsLineHeightWithSpacing()       { return GetFrameHeightWithSpacing(); }                             // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
//IMGUI_API bool      Begin(char* name, bool* p_open, ImVec2 size_first_use, float bg_alpha = -1.0f, ImGuiWindowFlags flags=0); // OBSOLETED in 1.52 (between Aug 2017 and Oct 2017): Equivalent of using SetNextWindowSize(size, ImGuiCond_FirstUseEver) and SetNextWindowBgAlpha().
//static inline bool  IsRootWindowOrAnyChildHovered()       { return IsWindowHovered(ImGuiHoveredFlags_RootAndChildWindows); }  // OBSOLETED in 1.52 (between Aug 2017 and Oct 2017)
//static inline void  AlignFirstTextHeightToWidgets()       { AlignTextToFramePadding(); }                                      // OBSOLETED in 1.52 (between Aug 2017 and Oct 2017)
//static inline void  SetNextWindowPosCenter(ImGuiCond c=0) { SetNextWindowPos(GetMainViewport()->GetCenter(), c, ImVec2(0.5f,0.5f)); } // OBSOLETED in 1.52 (between Aug 2017 and Oct 2017)
//static inline bool  IsItemHoveredRect()                   { return IsItemHovered(ImGuiHoveredFlags_RectOnly); }               // OBSOLETED in 1.51 (between Jun 2017 and Aug 2017)
//static inline bool  IsPosHoveringAnyWindow(const ImVec2&) { IM_ASSERT(0); return false; }                                     // OBSOLETED in 1.51 (between Jun 2017 and Aug 2017): This was misleading and partly broken. You probably want to use the io.WantCaptureMouse flag instead.
//static inline bool  IsMouseHoveringAnyWindow()            { return IsWindowHovered(ImGuiHoveredFlags_AnyWindow); }            // OBSOLETED in 1.51 (between Jun 2017 and Aug 2017)
//static inline bool  IsMouseHoveringWindow()               { return IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem); }       // OBSOLETED in 1.51 (between Jun 2017 and Aug 2017)
//-- OBSOLETED in 1.50 and before
//static inline bool  CollapsingHeader(char* label, const char* str_id, bool framed = true, bool default_open = false) { return CollapsingHeader(label, (default_open ? (1 << 5) : 0)); } // OBSOLETED in 1.49
//static inline ImFont*GetWindowFont()                      { return GetFont(); }                                               // OBSOLETED in 1.48
//static inline float GetWindowFontSize()                   { return GetFontSize(); }                                           // OBSOLETED in 1.48
//static inline void  SetScrollPosHere()                    { SetScrollHere(); }                                                // OBSOLETED in 1.42

//-- OBSOLETED in 1.82 (from Mars 2021): flags for AddRect(), AddRectFilled(), AddImageRounded(), PathRect()
//typedef ImDrawFlags ImDrawCornerFlags;
//enum ImDrawCornerFlags_
//{
//    ImDrawCornerFlags_None      = ImDrawFlags_RoundCornersNone,         // Was == 0 prior to 1.82, this is now == ImDrawFlags_RoundCornersNone which is != 0 and not implicit
//    ImDrawCornerFlags_TopLeft   = ImDrawFlags_RoundCornersTopLeft,      // Was == 0x01 (1 << 0) prior to 1.82. Order matches ImDrawFlags_NoRoundCorner* flag (we exploit this internally).
//    ImDrawCornerFlags_TopRight  = ImDrawFlags_RoundCornersTopRight,     // Was == 0x02 (1 << 1) prior to 1.82.
//    ImDrawCornerFlags_BotLeft   = ImDrawFlags_RoundCornersBottomLeft,   // Was == 0x04 (1 << 2) prior to 1.82.
//    ImDrawCornerFlags_BotRight  = ImDrawFlags_RoundCornersBottomRight,  // Was == 0x08 (1 << 3) prior to 1.82.
//    ImDrawCornerFlags_All       = ImDrawFlags_RoundCornersAll,          // Was == 0x0F prior to 1.82
//    ImDrawCornerFlags_Top       = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,
//    ImDrawCornerFlags_Bot       = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,
//    ImDrawCornerFlags_Left      = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,
//    ImDrawCornerFlags_Right     = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,
//};

// RENAMED and MERGED both ImGuiKey_ModXXX and ImGuiModFlags_XXX into ImGuiMod_XXX (from September 2022)
// RENAMED ImGuiKeyModFlags -> ImGuiModFlags in 1.88 (from April 2022). Exceptionally commented out ahead of obscolescence schedule to reduce confusion and because they were not meant to be used in the first place.
//typedef ImGuiKeyChord ImGuiModFlags;      // == int. We generally use ImGuiKeyChord to mean "a ImGuiKey or-ed with any number of ImGuiMod_XXX value", so you may store mods in there.
//enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_Shift = ImGuiMod_Shift, ImGuiModFlags_Alt = ImGuiMod_Alt, ImGuiModFlags_Super = ImGuiMod_Super };
//typedef ImGuiKeyChord ImGuiKeyModFlags; // == int
//enum ImGuiKeyModFlags_ { ImGuiKeyModFlags_None = 0, ImGuiKeyModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiKeyModFlags_Shift = ImGuiMod_Shift, ImGuiKeyModFlags_Alt = ImGuiMod_Alt, ImGuiKeyModFlags_Super = ImGuiMod_Super };

// #define IM_OFFSETOF(_TYPE,_MEMBER)  offsetof(_TYPE, _MEMBER)     // OBSOLETED IN 1.90 (now using C++11 standard version)
// #endif// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
// RENAMED IMGUI_DISABLE_METRICS_WINDOW > IMGUI_DISABLE_DEBUG_TOOLS in 1.88 (from June 2022)
// #if defined(IMGUI_DISABLE_METRICS_WINDOW)&&!defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS)&&!defined(IMGUI_DISABLE_DEBUG_TOOLS)
// #define IMGUI_DISABLE_DEBUG_TOOLS
// #endif // #if defined(IMGUI_DISABLE_METRICS_WINDOW)&&!defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS)&&!defined(IMGUI_DISABLE_DEBUG_TOOLS)
// #if defined(IMGUI_DISABLE_METRICS_WINDOW)&& defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS)
// #error IMGUI_DISABLE_METRICS_WINDOW was renamed to IMGUI_DISABLE_DEBUG_TOOLS, please use new name.
// #endif // #if defined(IMGUI_DISABLE_METRICS_WINDOW)&& defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS)
//-----------------------------------------------------------------------------

// #if defined(__clang__)
// #pragma clang diagnostic pop
// #else
// #if defined(__GNUC__)
// #pragma GCC diagnostic pop
// #endif // #if defined(__GNUC__)
// #endif // #if defined(__clang__)
// #ifdef _MSC_VER
// #pragma warning (pop)
// #endif // #ifdef _MSC_VER
// Include imgui_user.h at the end of imgui.h
// May be convenient for some users to only explicitly include vanilla imgui.h and have extra stuff included.
// #ifdef IMGUI_INCLUDE_IMGUI_USER_H
// #ifdef IMGUI_USER_H_FILENAME
// #include IMGUI_USER_H_FILENAME
// #else
// #include "imgui_user.h"
// #endif // #ifdef IMGUI_USER_H_FILENAME
// #endif // #ifdef IMGUI_INCLUDE_IMGUI_USER_H
// #endif// #ifndef IMGUI_DISABLE
// #ifdef __cplusplus // End of extern "C" block
// #endif


}
