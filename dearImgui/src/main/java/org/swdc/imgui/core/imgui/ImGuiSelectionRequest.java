// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


// Selection request item
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImGuiSelectionRequest extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImGuiSelectionRequest() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImGuiSelectionRequest(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImGuiSelectionRequest(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImGuiSelectionRequest position(long position) {
        return (ImGuiSelectionRequest)super.position(position);
    }
    @Override public ImGuiSelectionRequest getPointer(long i) {
        return new ImGuiSelectionRequest((Pointer)this).offsetAddress(i);
    }

    //------------------------------------------// BeginMultiSelect / EndMultiSelect
    public native @Cast("ImGuiSelectionRequestType") int Type(); public native ImGuiSelectionRequest Type(int setter);            //  ms:w, app:r     /  ms:w, app:r   // Request type. You'll most often receive 1 Clear + 1 SetRange with a single-item range.
    public native @Cast("bool") boolean Selected(); public native ImGuiSelectionRequest Selected(boolean setter);        //  ms:w, app:r     /  ms:w, app:r   // Parameter for SetAll/SetRange requests (true = select, false = unselect)
    public native @Cast("ImS8") byte RangeDirection(); public native ImGuiSelectionRequest RangeDirection(byte setter);  //                  /  ms:w  app:r   // Parameter for SetRange request: +1 when RangeFirstItem comes before RangeLastItem, -1 otherwise. Useful if you want to preserve selection order on a backward Shift+Click.
    public native @Cast("ImGuiSelectionUserData") long RangeFirstItem(); public native ImGuiSelectionRequest RangeFirstItem(long setter);  //                  /  ms:w, app:r   // Parameter for SetRange request (this is generally == RangeSrcItem when shift selecting from top to bottom).
    public native @Cast("ImGuiSelectionUserData") long RangeLastItem(); public native ImGuiSelectionRequest RangeLastItem(long setter);   //                  /  ms:w, app:r   // Parameter for SetRange request (this is generally == RangeSrcItem when shift selecting from bottom to top). Inclusive!
}
