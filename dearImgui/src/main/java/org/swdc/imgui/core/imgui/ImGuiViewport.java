// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


// - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.
// - In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports.
// - In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.
// - About Main Area vs Work Area:
//   - Main Area = entire viewport.
//   - Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).
//   - Windows are generally trying to stay within the Work Area of their host viewport.
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImGuiViewport extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImGuiViewport() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImGuiViewport(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImGuiViewport(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImGuiViewport position(long position) {
        return (ImGuiViewport)super.position(position);
    }
    @Override public ImGuiViewport getPointer(long i) {
        return new ImGuiViewport((Pointer)this).offsetAddress(i);
    }

    public native @Cast("ImGuiID") int ID(); public native ImGuiViewport ID(int setter);                 // Unique identifier for the viewport
    public native @Cast("ImGuiViewportFlags") int Flags(); public native ImGuiViewport Flags(int setter);              // See ImGuiViewportFlags_
    public native @ByRef ImVec2 Pos(); public native ImGuiViewport Pos(ImVec2 setter);                // Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktop/native coordinates)
    public native @ByRef ImVec2 Size(); public native ImGuiViewport Size(ImVec2 setter);               // Main Area: Size of the viewport.
    public native @ByRef ImVec2 WorkPos(); public native ImGuiViewport WorkPos(ImVec2 setter);            // Work Area: Position of the viewport minus task bars, menus bars, status bars (>= Pos)
    public native @ByRef ImVec2 WorkSize(); public native ImGuiViewport WorkSize(ImVec2 setter);           // Work Area: Size of the viewport minus task bars, menu bars, status bars (<= Size)

    // Platform/Backend Dependent Data
    public native Pointer PlatformHandle(); public native ImGuiViewport PlatformHandle(Pointer setter);     // void* to hold higher-level, platform window handle (e.g. HWND, GLFWWindow*, SDL_Window*)
    public native Pointer PlatformHandleRaw(); public native ImGuiViewport PlatformHandleRaw(Pointer setter);  // void* to hold lower-level, platform-native window handle (under Win32 this is expected to be a HWND, unused for other platforms)
}
