// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


// - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.
// - With multi-viewport enabled, we extend this concept to have multiple active viewports.
// - In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.
// - About Main Area vs Work Area:
//   - Main Area = entire viewport.
//   - Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).
//   - Windows are generally trying to stay within the Work Area of their host viewport.
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImGuiViewport extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImGuiViewport() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImGuiViewport(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImGuiViewport(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImGuiViewport position(long position) {
        return (ImGuiViewport)super.position(position);
    }
    @Override public ImGuiViewport getPointer(long i) {
        return new ImGuiViewport((Pointer)this).offsetAddress(i);
    }

    public native @Cast("ImGuiID") int ID(); public native ImGuiViewport ID(int setter);                     // Unique identifier for the viewport
    public native @Cast("ImGuiViewportFlags") int Flags(); public native ImGuiViewport Flags(int setter);                  // See ImGuiViewportFlags_
    public native @ByRef ImVec2 Pos(); public native ImGuiViewport Pos(ImVec2 setter);                    // Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktop/native coordinates)
    public native @ByRef ImVec2 Size(); public native ImGuiViewport Size(ImVec2 setter);                   // Main Area: Size of the viewport.
    public native @ByRef ImVec2 WorkPos(); public native ImGuiViewport WorkPos(ImVec2 setter);                // Work Area: Position of the viewport minus task bars, menus bars, status bars (>= Pos)
    public native @ByRef ImVec2 WorkSize(); public native ImGuiViewport WorkSize(ImVec2 setter);               // Work Area: Size of the viewport minus task bars, menu bars, status bars (<= Size)
    public native float DpiScale(); public native ImGuiViewport DpiScale(float setter);               // 1.0f = 96 DPI = No extra scale.
    public native @Cast("ImGuiID") int ParentViewportId(); public native ImGuiViewport ParentViewportId(int setter);       // (Advanced) 0: no parent. Instruct the platform backend to setup a parent/child relationship between platform windows.
    public native ImDrawData DrawData(); public native ImGuiViewport DrawData(ImDrawData setter);               // The ImDrawData corresponding to this viewport. Valid after Render() and until the next call to NewFrame().

    // Platform/Backend Dependent Data
    // Our design separate the Renderer and Platform backends to facilitate combining default backends with each others.
    // When our create your own backend for a custom engine, it is possible that both Renderer and Platform will be handled
    // by the same system and you may not need to use all the UserData/Handle fields.
    // The library never uses those fields, they are merely storage to facilitate backend implementation.
    public native Pointer RendererUserData(); public native ImGuiViewport RendererUserData(Pointer setter);       // void* to hold custom data structure for the renderer (e.g. swap chain, framebuffers etc.). generally set by your Renderer_CreateWindow function.
    public native Pointer PlatformUserData(); public native ImGuiViewport PlatformUserData(Pointer setter);       // void* to hold custom data structure for the OS / platform (e.g. windowing info, render context). generally set by your Platform_CreateWindow function.
    public native Pointer PlatformHandle(); public native ImGuiViewport PlatformHandle(Pointer setter);         // void* to hold higher-level, platform window handle (e.g. HWND, GLFWWindow*, SDL_Window*), for FindViewportByPlatformHandle().
    public native Pointer PlatformHandleRaw(); public native ImGuiViewport PlatformHandleRaw(Pointer setter);      // void* to hold lower-level, platform-native window handle (under Win32 this is expected to be a HWND, unused for other platforms), when using an abstraction layer like GLFW or SDL (where PlatformHandle would be a SDL_Window*)
    public native @Cast("bool") boolean PlatformWindowCreated(); public native ImGuiViewport PlatformWindowCreated(boolean setter);  // Platform window has been created (Platform_CreateWindow() has been called). This is false during the first frame where a viewport is being created.
    public native @Cast("bool") boolean PlatformRequestMove(); public native ImGuiViewport PlatformRequestMove(boolean setter);    // Platform window requested move (e.g. window was moved by the OS / host window manager, authoritative position will be OS window position)
    public native @Cast("bool") boolean PlatformRequestResize(); public native ImGuiViewport PlatformRequestResize(boolean setter);  // Platform window requested resize (e.g. window was resized by the OS / host window manager, authoritative size will be OS window size)
    public native @Cast("bool") boolean PlatformRequestClose(); public native ImGuiViewport PlatformRequestClose(boolean setter);   // Platform window requested closure (e.g. window was moved by the OS / host window manager, e.g. pressing ALT-F4)
}
