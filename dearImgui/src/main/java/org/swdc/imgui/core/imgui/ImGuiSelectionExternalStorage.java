// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;
                          // Convert index to item id based on provided adapter.

// Optional helper to apply multi-selection requests to existing randomly accessible storage.
// Convenient if you want to quickly wire multi-select API on e.g. an array of bool or items storing their own selection state.
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImGuiSelectionExternalStorage extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImGuiSelectionExternalStorage() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImGuiSelectionExternalStorage(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImGuiSelectionExternalStorage(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImGuiSelectionExternalStorage position(long position) {
        return (ImGuiSelectionExternalStorage)super.position(position);
    }
    @Override public ImGuiSelectionExternalStorage getPointer(long i) {
        return new ImGuiSelectionExternalStorage((Pointer)this).offsetAddress(i);
    }

    // Members
    public native Pointer UserData(); public native ImGuiSelectionExternalStorage UserData(Pointer setter);                                                                               // User data for use by adapter function                                // e.g. selection.UserData = (void*)my_items;
    public static class AdapterSetItemSelected_ImGuiSelectionExternalStorage_int_boolean extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    AdapterSetItemSelected_ImGuiSelectionExternalStorage_int_boolean(Pointer p) { super(p); }
        protected AdapterSetItemSelected_ImGuiSelectionExternalStorage_int_boolean() { allocate(); }
        private native void allocate();
        public native void call(ImGuiSelectionExternalStorage self, int idx, @Cast("bool") boolean selected);
    }
    public native AdapterSetItemSelected_ImGuiSelectionExternalStorage_int_boolean AdapterSetItemSelected(); public native ImGuiSelectionExternalStorage AdapterSetItemSelected(AdapterSetItemSelected_ImGuiSelectionExternalStorage_int_boolean setter);  // e.g. AdapterSetItemSelected = [](ImGuiSelectionExternalStorage* self, int idx, bool selected) { ((MyItems**)self->UserData)[idx]->Selected = selected; }
}
