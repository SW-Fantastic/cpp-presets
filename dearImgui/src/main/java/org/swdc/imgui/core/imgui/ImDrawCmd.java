// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


// Typically, 1 command = 1 GPU draw call (unless command is a callback)
// - VtxOffset: When 'io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset' is enabled,
//   this fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices.
//   Backends made for <1.71. will typically ignore the VtxOffset fields.
// - The ClipRect/TextureId/VtxOffset fields must be contiguous as we memcmp() them together (this is asserted for).
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImDrawCmd extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImDrawCmd() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImDrawCmd(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImDrawCmd(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImDrawCmd position(long position) {
        return (ImDrawCmd)super.position(position);
    }
    @Override public ImDrawCmd getPointer(long i) {
        return new ImDrawCmd((Pointer)this).offsetAddress(i);
    }

    public native @ByRef ImVec4 ClipRect(); public native ImDrawCmd ClipRect(ImVec4 setter);          // 4*4  // Clipping rectangle (x1, y1, x2, y2). Subtract ImDrawData->DisplayPos to get clipping rectangle in "viewport" coordinates
    public native ImTextureID TextureId(); public native ImDrawCmd TextureId(ImTextureID setter);         // 4-8  // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.
    public native @Cast("unsigned int") int VtxOffset(); public native ImDrawCmd VtxOffset(int setter);         // 4    // Start offset in vertex buffer. ImGuiBackendFlags_RendererHasVtxOffset: always 0, otherwise may be >0 to support meshes larger than 64K vertices with 16-bit indices.
    public native @Cast("unsigned int") int IdxOffset(); public native ImDrawCmd IdxOffset(int setter);         // 4    // Start offset in index buffer.
    public native @Cast("unsigned int") int ElemCount(); public native ImDrawCmd ElemCount(int setter);         // 4    // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].
    public native ImDrawCallback UserCallback(); public native ImDrawCmd UserCallback(ImDrawCallback setter);      // 4-8  // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.
    public native Pointer UserCallbackData(); public native ImDrawCmd UserCallbackData(Pointer setter);  // 4-8  // The draw callback code can access this.
}
