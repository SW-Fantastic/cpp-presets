// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImGuiIO extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImGuiIO() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImGuiIO(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImGuiIO(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImGuiIO position(long position) {
        return (ImGuiIO)super.position(position);
    }
    @Override public ImGuiIO getPointer(long i) {
        return new ImGuiIO((Pointer)this).offsetAddress(i);
    }

    //------------------------------------------------------------------
    // Configuration                            // Default value
    //------------------------------------------------------------------

    public native @Cast("ImGuiConfigFlags") int ConfigFlags(); public native ImGuiIO ConfigFlags(int setter);                        // = 0              // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.
    public native @Cast("ImGuiBackendFlags") int BackendFlags(); public native ImGuiIO BackendFlags(int setter);                       // = 0              // See ImGuiBackendFlags_ enum. Set by backend (imgui_impl_xxx files or custom backend) to communicate features supported by the backend.
    public native @ByRef ImVec2 DisplaySize(); public native ImGuiIO DisplaySize(ImVec2 setter);                        // <unset>          // Main display size, in pixels (generally == GetMainViewport()->Size). May change every frame.
    public native float DeltaTime(); public native ImGuiIO DeltaTime(float setter);                          // = 1.0f/60.0f     // Time elapsed since last frame, in seconds. May change every frame.
    public native float IniSavingRate(); public native ImGuiIO IniSavingRate(float setter);                      // = 5.0f           // Minimum time between saving positions/sizes to .ini file, in seconds.
    public native @Cast("const char*") BytePointer IniFilename(); public native ImGuiIO IniFilename(BytePointer setter);                        // = "imgui.ini"    // Path to .ini file (important: default "imgui.ini" is relative to current working dir!). Set NULL to disable automatic .ini loading/saving or if you want to manually call LoadIniSettingsXXX() / SaveIniSettingsXXX() functions.
    public native @Cast("const char*") BytePointer LogFilename(); public native ImGuiIO LogFilename(BytePointer setter);                        // = "imgui_log.txt"// Path to .log file (default parameter to ImGui::LogToFile when no file is specified).
    public native Pointer UserData(); public native ImGuiIO UserData(Pointer setter);                           // = NULL           // Store your own data.

    public native ImFontAtlas Fonts(); public native ImGuiIO Fonts(ImFontAtlas setter);                              // <auto>           // Font atlas: load, rasterize and pack one or more fonts into a single texture.
    public native float FontGlobalScale(); public native ImGuiIO FontGlobalScale(float setter);                    // = 1.0f           // Global scale all fonts
    public native @Cast("bool") boolean FontAllowUserScaling(); public native ImGuiIO FontAllowUserScaling(boolean setter);               // = false          // Allow user scaling text of individual window with CTRL+Wheel.
    public native ImFont FontDefault(); public native ImGuiIO FontDefault(ImFont setter);                        // = NULL           // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].
    public native @ByRef ImVec2 DisplayFramebufferScale(); public native ImGuiIO DisplayFramebufferScale(ImVec2 setter);            // = (1, 1)         // For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale.

    // Docking options (when ImGuiConfigFlags_DockingEnable is set)
    public native @Cast("bool") boolean ConfigDockingNoSplit(); public native ImGuiIO ConfigDockingNoSplit(boolean setter);               // = false          // Simplified docking mode: disable window splitting, so docking is limited to merging multiple windows together into tab-bars.
    public native @Cast("bool") boolean ConfigDockingWithShift(); public native ImGuiIO ConfigDockingWithShift(boolean setter);             // = false          // Enable docking with holding Shift key (reduce visual noise, allows dropping in wider space)
    public native @Cast("bool") boolean ConfigDockingAlwaysTabBar(); public native ImGuiIO ConfigDockingAlwaysTabBar(boolean setter);          // = false          // [BETA] [FIXME: This currently creates regression with auto-sizing and general overhead] Make every single floating window display within a docking node.
    public native @Cast("bool") boolean ConfigDockingTransparentPayload(); public native ImGuiIO ConfigDockingTransparentPayload(boolean setter);    // = false          // [BETA] Make window or viewport transparent when docking and only display docking boxes on the target viewport. Useful if rendering of multiple viewport cannot be synced. Best used with ConfigViewportsNoAutoMerge.

    // Viewport options (when ImGuiConfigFlags_ViewportsEnable is set)
    public native @Cast("bool") boolean ConfigViewportsNoAutoMerge(); public native ImGuiIO ConfigViewportsNoAutoMerge(boolean setter);         // = false;         // Set to make all floating imgui windows always create their own viewport. Otherwise, they are merged into the main host viewports when overlapping it. May also set ImGuiViewportFlags_NoAutoMerge on individual viewport.
    public native @Cast("bool") boolean ConfigViewportsNoTaskBarIcon(); public native ImGuiIO ConfigViewportsNoTaskBarIcon(boolean setter);       // = false          // Disable default OS task bar icon flag for secondary viewports. When a viewport doesn't want a task bar icon, ImGuiViewportFlags_NoTaskBarIcon will be set on it.
    public native @Cast("bool") boolean ConfigViewportsNoDecoration(); public native ImGuiIO ConfigViewportsNoDecoration(boolean setter);        // = true           // Disable default OS window decoration flag for secondary viewports. When a viewport doesn't want window decorations, ImGuiViewportFlags_NoDecoration will be set on it. Enabling decoration can create subsequent issues at OS levels (e.g. minimum window size).
    public native @Cast("bool") boolean ConfigViewportsNoDefaultParent(); public native ImGuiIO ConfigViewportsNoDefaultParent(boolean setter);     // = false          // Disable default OS parenting to main viewport for secondary viewports. By default, viewports are marked with ParentViewportId = <main_viewport>, expecting the platform backend to setup a parent/child relationship between the OS windows (some backend may ignore this). Set to true if you want the default to be 0, then all viewports will be top-level OS windows.

    // Miscellaneous options
    public native @Cast("bool") boolean MouseDrawCursor(); public native ImGuiIO MouseDrawCursor(boolean setter);                    // = false          // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by backend implementations.
    public native @Cast("bool") boolean ConfigMacOSXBehaviors(); public native ImGuiIO ConfigMacOSXBehaviors(boolean setter);              // = defined(__APPLE__) // Swap Cmd<>Ctrl keys + OS X style text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl.
    public native @Cast("bool") boolean ConfigNavSwapGamepadButtons(); public native ImGuiIO ConfigNavSwapGamepadButtons(boolean setter);        // = false          // Swap Activate<>Cancel (A<>B) buttons, matching typical "Nintendo/Japanese style" gamepad layout.
    public native @Cast("bool") boolean ConfigInputTrickleEventQueue(); public native ImGuiIO ConfigInputTrickleEventQueue(boolean setter);       // = true           // Enable input queue trickling: some types of events submitted during the same frame (e.g. button down + up) will be spread over multiple frames, improving interactions with low framerates.
    public native @Cast("bool") boolean ConfigInputTextCursorBlink(); public native ImGuiIO ConfigInputTextCursorBlink(boolean setter);         // = true           // Enable blinking cursor (optional as some users consider it to be distracting).
    public native @Cast("bool") boolean ConfigInputTextEnterKeepActive(); public native ImGuiIO ConfigInputTextEnterKeepActive(boolean setter);     // = false          // [BETA] Pressing Enter will keep item active and select contents (single-line only).
    public native @Cast("bool") boolean ConfigDragClickToInputText(); public native ImGuiIO ConfigDragClickToInputText(boolean setter);         // = false          // [BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard.
    public native @Cast("bool") boolean ConfigWindowsResizeFromEdges(); public native ImGuiIO ConfigWindowsResizeFromEdges(boolean setter);       // = true           // Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag)
    public native @Cast("bool") boolean ConfigWindowsMoveFromTitleBarOnly(); public native ImGuiIO ConfigWindowsMoveFromTitleBarOnly(boolean setter);  // = false       // Enable allowing to move windows only when clicking on their title bar. Does not apply to windows without a title bar.
    public native float ConfigMemoryCompactTimer(); public native ImGuiIO ConfigMemoryCompactTimer(float setter);           // = 60.0f          // Timer (in seconds) to free transient windows/tables memory buffers when unused. Set to -1.0f to disable.

    // Inputs Behaviors
    // (other variables, ones which are expected to be tweaked within UI code, are exposed in ImGuiStyle)
    public native float MouseDoubleClickTime(); public native ImGuiIO MouseDoubleClickTime(float setter);               // = 0.30f          // Time for a double-click, in seconds.
    public native float MouseDoubleClickMaxDist(); public native ImGuiIO MouseDoubleClickMaxDist(float setter);            // = 6.0f           // Distance threshold to stay in to validate a double-click, in pixels.
    public native float MouseDragThreshold(); public native ImGuiIO MouseDragThreshold(float setter);                 // = 6.0f           // Distance threshold before considering we are dragging.
    public native float KeyRepeatDelay(); public native ImGuiIO KeyRepeatDelay(float setter);                     // = 0.275f         // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).
    public native float KeyRepeatRate(); public native ImGuiIO KeyRepeatRate(float setter);                      // = 0.050f         // When holding a key/button, rate at which it repeats, in seconds.

    //------------------------------------------------------------------
    // Debug options
    //------------------------------------------------------------------

    // Option to enable various debug tools showing buttons that will call the IM_DEBUG_BREAK() macro.
    // - The Item Picker tool will be available regardless of this being enabled, in order to maximize its discoverability.
    // - Requires a debugger being attached, otherwise IM_DEBUG_BREAK() options will appear to crash your application.
    //   e.g. io.ConfigDebugIsDebuggerPresent = ::IsDebuggerPresent() on Win32, or refer to ImOsIsDebuggerPresent() imgui_test_engine/imgui_te_utils.cpp for a Unix compatible version).
    public native @Cast("bool") boolean ConfigDebugIsDebuggerPresent(); public native ImGuiIO ConfigDebugIsDebuggerPresent(boolean setter);       // = false          // Enable various tools calling IM_DEBUG_BREAK().

    // Tools to test correct Begin/End and BeginChild/EndChild behaviors.
    // - Presently Begin()/End() and BeginChild()/EndChild() needs to ALWAYS be called in tandem, regardless of return value of BeginXXX()
    // - This is inconsistent with other BeginXXX functions and create confusion for many users.
    // - We expect to update the API eventually. In the meanwhile we provide tools to facilitate checking user-code behavior.
    public native @Cast("bool") boolean ConfigDebugBeginReturnValueOnce(); public native ImGuiIO ConfigDebugBeginReturnValueOnce(boolean setter);    // = false          // First-time calls to Begin()/BeginChild() will return false. NEEDS TO BE SET AT APPLICATION BOOT TIME if you don't want to miss windows.
    public native @Cast("bool") boolean ConfigDebugBeginReturnValueLoop(); public native ImGuiIO ConfigDebugBeginReturnValueLoop(boolean setter);    // = false          // Some calls to Begin()/BeginChild() will return false. Will cycle through window depths then repeat. Suggested use: add "io.ConfigDebugBeginReturnValue = io.KeyShift" in your main loop then occasionally press SHIFT. Windows should be flickering while running.

    // Option to deactivate io.AddFocusEvent(false) handling.
    // - May facilitate interactions with a debugger when focus loss leads to clearing inputs data.
    // - Backends may have other side-effects on focus loss, so this will reduce side-effects but not necessary remove all of them.
    public native @Cast("bool") boolean ConfigDebugIgnoreFocusLoss(); public native ImGuiIO ConfigDebugIgnoreFocusLoss(boolean setter);         // = false          // Ignore io.AddFocusEvent(false), consequently not calling io.ClearInputKeys()/io.ClearInputMouse() in input processing.

    // Option to audit .ini data
    public native @Cast("bool") boolean ConfigDebugIniSettings(); public native ImGuiIO ConfigDebugIniSettings(boolean setter);             // = false          // Save .ini data with extra comments (particularly helpful for Docking, but makes saving slower)

    //------------------------------------------------------------------
    // Platform Functions
    // (the imgui_impl_xxxx backend files are setting those up for you)
    //------------------------------------------------------------------

    // Optional: Platform/Renderer backend name (informational only! will be displayed in About Window) + User data for backend/wrappers to store their own stuff.
    public native @Cast("const char*") BytePointer BackendPlatformName(); public native ImGuiIO BackendPlatformName(BytePointer setter);                // = NULL
    public native @Cast("const char*") BytePointer BackendRendererName(); public native ImGuiIO BackendRendererName(BytePointer setter);                // = NULL
    public native Pointer BackendPlatformUserData(); public native ImGuiIO BackendPlatformUserData(Pointer setter);            // = NULL           // User data for platform backend
    public native Pointer BackendRendererUserData(); public native ImGuiIO BackendRendererUserData(Pointer setter);            // = NULL           // User data for renderer backend
    public native Pointer BackendLanguageUserData(); public native ImGuiIO BackendLanguageUserData(Pointer setter);            // = NULL           // User data for non C++ programming language backend

    //------------------------------------------------------------------
    // Input - Call before calling NewFrame()
    //------------------------------------------------------------------

    //------------------------------------------------------------------
    // Output - Updated by NewFrame() or EndFrame()/Render()
    // (when reading from the io.WantCaptureMouse, io.WantCaptureKeyboard flags to dispatch your inputs, it is
    //  generally easier and more correct to use their state BEFORE calling NewFrame(). See FAQ for details!)
    //------------------------------------------------------------------

    public native @Cast("bool") boolean WantCaptureMouse(); public native ImGuiIO WantCaptureMouse(boolean setter);                   // Set when Dear ImGui will use mouse inputs, in this case do not dispatch them to your main game/application (either way, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.).
    public native @Cast("bool") boolean WantCaptureKeyboard(); public native ImGuiIO WantCaptureKeyboard(boolean setter);                // Set when Dear ImGui will use keyboard inputs, in this case do not dispatch them to your main game/application (either way, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.).
    public native @Cast("bool") boolean WantTextInput(); public native ImGuiIO WantTextInput(boolean setter);                      // Mobile/console: when set, you may display an on-screen keyboard. This is set by Dear ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).
    public native @Cast("bool") boolean WantSetMousePos(); public native ImGuiIO WantSetMousePos(boolean setter);                    // MousePos has been altered, backend should reposition mouse on next frame. Rarely used! Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled.
    public native @Cast("bool") boolean WantSaveIniSettings(); public native ImGuiIO WantSaveIniSettings(boolean setter);                // When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. Important: clear io.WantSaveIniSettings yourself after saving!
    public native @Cast("bool") boolean NavActive(); public native ImGuiIO NavActive(boolean setter);                          // Keyboard/Gamepad navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.
    public native @Cast("bool") boolean NavVisible(); public native ImGuiIO NavVisible(boolean setter);                         // Keyboard/Gamepad navigation is visible and allowed (will handle ImGuiKey_NavXXX events).
    public native float Framerate(); public native ImGuiIO Framerate(float setter);                          // Estimate of application framerate (rolling average over 60 frames, based on io.DeltaTime), in frame per second. Solely for convenience. Slow applications may not want to use a moving average or may want to reset underlying buffers occasionally.
    public native int MetricsRenderVertices(); public native ImGuiIO MetricsRenderVertices(int setter);              // Vertices output during last call to Render()
    public native int MetricsRenderIndices(); public native ImGuiIO MetricsRenderIndices(int setter);               // Indices output during last call to Render() = number of triangles * 3
    public native int MetricsRenderWindows(); public native ImGuiIO MetricsRenderWindows(int setter);               // Number of visible windows
    public native int MetricsActiveWindows(); public native ImGuiIO MetricsActiveWindows(int setter);               // Number of active windows
    public native @ByRef ImVec2 MouseDelta(); public native ImGuiIO MouseDelta(ImVec2 setter);                         // Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta.

    //------------------------------------------------------------------
    // [Internal] Dear ImGui will maintain those fields. Forward compatibility not guaranteed!
    //------------------------------------------------------------------

    public native ImGuiContext Ctx(); public native ImGuiIO Ctx(ImGuiContext setter);                                // Parent UI context (needs to be set explicitly by parent).

    // Main Input State
    // (this block used to be written by backend, since 1.87 it is best to NOT write to those directly, call the AddXXX functions above instead)
    // (reading from those variables is fair game, as they are extremely unlikely to be moving anywhere)
    public native @ByRef ImVec2 MousePos(); public native ImGuiIO MousePos(ImVec2 setter);                           // Mouse position, in pixels. Set to ImVec2(-FLT_MAX, -FLT_MAX) if mouse is unavailable (on another screen, etc.)
    public native @Cast("bool") boolean MouseDown(int i); public native ImGuiIO MouseDown(int i, boolean setter);
    @MemberGetter public native @Cast("bool*") BoolPointer MouseDown();                       // Mouse buttons: 0=left, 1=right, 2=middle + extras (ImGuiMouseButton_COUNT == 5). Dear ImGui mostly uses left and right buttons. Other buttons allow us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.
    public native float MouseWheel(); public native ImGuiIO MouseWheel(float setter);                         // Mouse wheel Vertical: 1 unit scrolls about 5 lines text. >0 scrolls Up, <0 scrolls Down. Hold SHIFT to turn vertical scroll into horizontal scroll.
    public native float MouseWheelH(); public native ImGuiIO MouseWheelH(float setter);                        // Mouse wheel Horizontal. >0 scrolls Left, <0 scrolls Right. Most users don't have a mouse with a horizontal wheel, may not be filled by all backends.
    public native @Cast("ImGuiMouseSource") int MouseSource(); public native ImGuiIO MouseSource(int setter);                        // Mouse actual input peripheral (Mouse/TouchScreen/Pen).
    public native @Cast("ImGuiID") int MouseHoveredViewport(); public native ImGuiIO MouseHoveredViewport(int setter);               // (Optional) Modify using io.AddMouseViewportEvent(). With multi-viewports: viewport the OS mouse is hovering. If possible _IGNORING_ viewports with the ImGuiViewportFlags_NoInputs flag is much better (few backends can handle that). Set io.BackendFlags |= ImGuiBackendFlags_HasMouseHoveredViewport if you can provide this info. If you don't imgui will infer the value using the rectangles and last focused time of the viewports it knows about (ignoring other OS windows).
    public native @Cast("bool") boolean KeyCtrl(); public native ImGuiIO KeyCtrl(boolean setter);                            // Keyboard modifier down: Control
    public native @Cast("bool") boolean KeyShift(); public native ImGuiIO KeyShift(boolean setter);                           // Keyboard modifier down: Shift
    public native @Cast("bool") boolean KeyAlt(); public native ImGuiIO KeyAlt(boolean setter);                             // Keyboard modifier down: Alt
    public native @Cast("bool") boolean KeySuper(); public native ImGuiIO KeySuper(boolean setter);                           // Keyboard modifier down: Cmd/Super/Windows

    // Other state maintained from data above + IO function calls
    public native @Cast("ImGuiKeyChord") int KeyMods(); public native ImGuiIO KeyMods(int setter);                            // Key mods flags (any of ImGuiMod_Ctrl/ImGuiMod_Shift/ImGuiMod_Alt/ImGuiMod_Super flags, same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags. Read-only, updated by NewFrame()
    public native @ByRef ImGuiKeyData KeysData(int i); public native ImGuiIO KeysData(int i, ImGuiKeyData setter);
    @MemberGetter public native ImGuiKeyData KeysData();   // Key state for all known keys. Use IsKeyXXX() functions to access this.
    public native @Cast("bool") boolean WantCaptureMouseUnlessPopupClose(); public native ImGuiIO WantCaptureMouseUnlessPopupClose(boolean setter);   // Alternative to WantCaptureMouse: (WantCaptureMouse == true && WantCaptureMouseUnlessPopupClose == false) when a click over void is expected to close a popup.
    public native @ByRef ImVec2 MousePosPrev(); public native ImGuiIO MousePosPrev(ImVec2 setter);                       // Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)
    public native @ByRef ImVec2 MouseClickedPos(int i); public native ImGuiIO MouseClickedPos(int i, ImVec2 setter);
    @MemberGetter public native ImVec2 MouseClickedPos();                 // Position at time of clicking
    public native double MouseClickedTime(int i); public native ImGuiIO MouseClickedTime(int i, double setter);
    @MemberGetter public native DoublePointer MouseClickedTime();                // Time of last click (used to figure out double-click)
    public native @Cast("bool") boolean MouseClicked(int i); public native ImGuiIO MouseClicked(int i, boolean setter);
    @MemberGetter public native @Cast("bool*") BoolPointer MouseClicked();                    // Mouse button went from !Down to Down (same as MouseClickedCount[x] != 0)
    public native @Cast("bool") boolean MouseDoubleClicked(int i); public native ImGuiIO MouseDoubleClicked(int i, boolean setter);
    @MemberGetter public native @Cast("bool*") BoolPointer MouseDoubleClicked();              // Has mouse button been double-clicked? (same as MouseClickedCount[x] == 2)
    public native @Cast("ImU16") short MouseClickedCount(int i); public native ImGuiIO MouseClickedCount(int i, short setter);
    @MemberGetter public native @Cast("ImU16*") ShortPointer MouseClickedCount();               // == 0 (not clicked), == 1 (same as MouseClicked[]), == 2 (double-clicked), == 3 (triple-clicked) etc. when going from !Down to Down
    public native @Cast("ImU16") short MouseClickedLastCount(int i); public native ImGuiIO MouseClickedLastCount(int i, short setter);
    @MemberGetter public native @Cast("ImU16*") ShortPointer MouseClickedLastCount();           // Count successive number of clicks. Stays valid after mouse release. Reset after another click is done.
    public native @Cast("bool") boolean MouseReleased(int i); public native ImGuiIO MouseReleased(int i, boolean setter);
    @MemberGetter public native @Cast("bool*") BoolPointer MouseReleased();                   // Mouse button went from Down to !Down
    public native @Cast("bool") boolean MouseDownOwned(int i); public native ImGuiIO MouseDownOwned(int i, boolean setter);
    @MemberGetter public native @Cast("bool*") BoolPointer MouseDownOwned();                  // Track if button was clicked inside a dear imgui window or over void blocked by a popup. We don't request mouse capture from the application if click started outside ImGui bounds.
    public native @Cast("bool") boolean MouseDownOwnedUnlessPopupClose(int i); public native ImGuiIO MouseDownOwnedUnlessPopupClose(int i, boolean setter);
    @MemberGetter public native @Cast("bool*") BoolPointer MouseDownOwnedUnlessPopupClose();  // Track if button was clicked inside a dear imgui window.
    public native @Cast("bool") boolean MouseWheelRequestAxisSwap(); public native ImGuiIO MouseWheelRequestAxisSwap(boolean setter);          // On a non-Mac system, holding SHIFT requests WheelY to perform the equivalent of a WheelX event. On a Mac system this is already enforced by the system.
    public native @Cast("bool") boolean MouseCtrlLeftAsRightClick(); public native ImGuiIO MouseCtrlLeftAsRightClick(boolean setter);          // (OSX) Set to true when the current click was a ctrl-click that spawned a simulated right click
    public native float MouseDownDuration(int i); public native ImGuiIO MouseDownDuration(int i, float setter);
    @MemberGetter public native FloatPointer MouseDownDuration();               // Duration the mouse button has been down (0.0f == just clicked)
    public native float MouseDownDurationPrev(int i); public native ImGuiIO MouseDownDurationPrev(int i, float setter);
    @MemberGetter public native FloatPointer MouseDownDurationPrev();           // Previous time the mouse button has been down
    public native @ByRef ImVec2 MouseDragMaxDistanceAbs(int i); public native ImGuiIO MouseDragMaxDistanceAbs(int i, ImVec2 setter);
    @MemberGetter public native ImVec2 MouseDragMaxDistanceAbs();         // Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point
    public native float MouseDragMaxDistanceSqr(int i); public native ImGuiIO MouseDragMaxDistanceSqr(int i, float setter);
    @MemberGetter public native FloatPointer MouseDragMaxDistanceSqr();         // Squared maximum distance of how much mouse has traveled from the clicking point (used for moving thresholds)
    public native float PenPressure(); public native ImGuiIO PenPressure(float setter);                        // Touch/Pen pressure (0.0f to 1.0f, should be >0.0f only when MouseDown[0] == true). Helper storage currently unused by Dear ImGui.
    public native @Cast("bool") boolean AppFocusLost(); public native ImGuiIO AppFocusLost(boolean setter);                       // Only modify via AddFocusEvent()
    public native @Cast("bool") boolean AppAcceptingEvents(); public native ImGuiIO AppAcceptingEvents(boolean setter);                 // Only modify via SetAppAcceptingEvents()
    public native @Cast("ImS8") byte BackendUsingLegacyKeyArrays(); public native ImGuiIO BackendUsingLegacyKeyArrays(byte setter);        // -1: unknown, 0: using AddKeyEvent(), 1: using legacy io.KeysDown[]
    public native @Cast("bool") boolean BackendUsingLegacyNavInputArray(); public native ImGuiIO BackendUsingLegacyNavInputArray(boolean setter);    // 0: using AddKeyAnalogEvent(), 1: writing to legacy io.NavInputs[] directly
    public native @Cast("ImWchar16") short InputQueueSurrogate(); public native ImGuiIO InputQueueSurrogate(short setter);                // For AddInputCharacterUTF16()
    public native @ByRef ImVector_ImWchar InputQueueCharacters(); public native ImGuiIO InputQueueCharacters(ImVector_ImWchar setter);               // Queue of _characters_ input (obtained by platform backend). Fill using AddInputCharacter() helper.

    // Legacy: before 1.87, we required backend to fill io.KeyMap[] (imgui->native map) during initialization and io.KeysDown[] (native indices) every frame.
    // This is still temporarily supported as a legacy feature. However the new preferred scheme is for backend to call io.AddKeyEvent().
    //   Old (<1.87):  ImGui::IsKeyPressed(ImGui::GetIO().KeyMap[ImGuiKey_Space]) --> New (1.87+) ImGui::IsKeyPressed(ImGuiKey_Space)
// #ifndef IMGUI_DISABLE_OBSOLETE_KEYIO
    public native int KeyMap(int i); public native ImGuiIO KeyMap(int i, int setter);
    @MemberGetter public native IntPointer KeyMap();             // [LEGACY] Input: map of indices into the KeysDown[512] entries array which represent your "native" keyboard state. The first 512 are now unused and should be kept zero. Legacy backend will write into KeyMap[] using ImGuiKey_ indices which are always >512.
    public native @Cast("bool") boolean KeysDown(int i); public native ImGuiIO KeysDown(int i, boolean setter);
    @MemberGetter public native @Cast("bool*") BoolPointer KeysDown();           // [LEGACY] Input: Keyboard keys that are pressed (ideally left in the "native" order your engine has access to keyboard keys, so you can use your own defines/enums for keys). This used to be [512] sized. It is now ImGuiKey_COUNT to allow legacy io.KeysDown[GetKeyIndex(...)] to work without an overflow.
    public native float NavInputs(int i); public native ImGuiIO NavInputs(int i, float setter);
    @MemberGetter public native FloatPointer NavInputs();     // [LEGACY] Since 1.88, NavInputs[] was removed. Backends from 1.60 to 1.86 won't build. Feed gamepad inputs via io.AddKeyEvent() and ImGuiKey_GamepadXXX enums.
    //void*     ImeWindowHandle;                    // [Obsoleted in 1.87] Set ImGuiViewport::PlatformHandleRaw instead. Set this to your HWND to get automatic IME cursor positioning.
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_KEYIO
    // Legacy: before 1.91.1, clipboard functions were stored in ImGuiIO instead of ImGuiPlatformIO.
    // As this is will affect all users of custom engines/backends, we are providing proper legacy redirection (will obsolete).
// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    public static class GetClipboardTextFn_Pointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    GetClipboardTextFn_Pointer(Pointer p) { super(p); }
        protected GetClipboardTextFn_Pointer() { allocate(); }
        private native void allocate();
        public native @Cast("const char*") BytePointer call(Pointer user_data);
    }
    public native GetClipboardTextFn_Pointer GetClipboardTextFn(); public native ImGuiIO GetClipboardTextFn(GetClipboardTextFn_Pointer setter);
    public static class SetClipboardTextFn_Pointer_BytePointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    SetClipboardTextFn_Pointer_BytePointer(Pointer p) { super(p); }
        protected SetClipboardTextFn_Pointer_BytePointer() { allocate(); }
        private native void allocate();
        public native void call(Pointer user_data, @Cast("const char*") BytePointer text);
    }
    public native SetClipboardTextFn_Pointer_BytePointer SetClipboardTextFn(); public native ImGuiIO SetClipboardTextFn(SetClipboardTextFn_Pointer_BytePointer setter);
    public native Pointer ClipboardUserData(); public native ImGuiIO ClipboardUserData(Pointer setter);
// #endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
}
