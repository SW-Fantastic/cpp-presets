// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.imgui.core.imgui;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.swdc.imgui.core.ImGUICore.*;


// Font runtime data and rendering
// ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().
@Properties(inherit = org.swdc.imgui.conf.ImGuiCoreConfigure.class)
public class ImFont extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImFont() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImFont(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImFont(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImFont position(long position) {
        return (ImFont)super.position(position);
    }
    @Override public ImFont getPointer(long i) {
        return new ImFont((Pointer)this).offsetAddress(i);
    }

    // Members: Hot ~20/24 bytes (for CalcTextSize)
    public native @ByRef ImVector_float IndexAdvanceX(); public native ImFont IndexAdvanceX(ImVector_float setter);                                         // 12-16 // out //            // Sparse. Glyphs->AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this this info, and are often bottleneck in large UI).
    public native float FallbackAdvanceX(); public native ImFont FallbackAdvanceX(float setter);                                      // 4     // out // = FallbackGlyph->AdvanceX
    public native float FontSize(); public native ImFont FontSize(float setter);                                              // 4     // in  //            // Height of characters/line, set during loading (don't change after loading)

    // Members: Hot ~28/40 bytes (for CalcTextSize + render loop)
    public native @ByRef ImVector_ImWchar IndexLookup(); public native ImFont IndexLookup(ImVector_ImWchar setter);                                           // 12-16 // out //            // Sparse. Index glyphs by Unicode code-point.
    public native @ByRef ImVector_ImFontGlyph Glyphs(); public native ImFont Glyphs(ImVector_ImFontGlyph setter);                                                // 12-16 // out //            // All glyphs.
    public native @Const ImFontGlyph FallbackGlyph(); public native ImFont FallbackGlyph(ImFontGlyph setter);                                         // 4-8   // out // = FindGlyph(FontFallbackChar)

    // Members: Cold ~32/40 bytes
    public native ImFontAtlas ContainerAtlas(); public native ImFont ContainerAtlas(ImFontAtlas setter);                                        // 4-8   // out //            // What we has been loaded into
    public native @Const ImFontConfig ConfigData(); public native ImFont ConfigData(ImFontConfig setter);                                            // 4-8   // in  //            // Pointer within ContainerAtlas->ConfigData
    public native short ConfigDataCount(); public native ImFont ConfigDataCount(short setter);                                       // 2     // in  // ~ 1        // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.
    public native @Cast("ImWchar") int FallbackChar(); public native ImFont FallbackChar(int setter);                                          // 2     // out // = FFFD/'?' // Character used if a glyph isn't found.
    public native @Cast("ImWchar") int EllipsisChar(); public native ImFont EllipsisChar(int setter);                                          // 2     // out // = '...'/'.'// Character used for ellipsis rendering.
    public native short EllipsisCharCount(); public native ImFont EllipsisCharCount(short setter);                                     // 1     // out // 1 or 3
    public native float EllipsisWidth(); public native ImFont EllipsisWidth(float setter);                                         // 4     // out               // Width
    public native float EllipsisCharStep(); public native ImFont EllipsisCharStep(float setter);                                      // 4     // out               // Step between characters when EllipsisCount > 0
    public native @Cast("bool") boolean DirtyLookupTables(); public native ImFont DirtyLookupTables(boolean setter);                                     // 1     // out //
    public native float Scale(); public native ImFont Scale(float setter);                                                 // 4     // in  // = 1.f      // Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()
    public native float Ascent(); public native ImFont Ascent(float setter);
    public native float Descent(); public native ImFont Descent(float setter);                                       // 4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize] (unscaled)
    public native int MetricsTotalSurface(); public native ImFont MetricsTotalSurface(int setter);                                   // 4     // out //            // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)
    public native @Cast("ImU8") byte Used4kPagesMap(int i); public native ImFont Used4kPagesMap(int i, byte setter);
    @MemberGetter public native @Cast("ImU8*") BytePointer Used4kPagesMap();  // 2 bytes if ImWchar=ImWchar16, 34 bytes if ImWchar==ImWchar32. Store 1-bit for each block of 4K codepoints that has one active glyph. This is mainly used to facilitate iterations across all used codepoints.
}
