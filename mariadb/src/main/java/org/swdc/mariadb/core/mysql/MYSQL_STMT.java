// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.mariadb.core.mysql;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.mariadb.core.global.*;
import static org.swdc.mariadb.core.MyGlobal.*;
import org.swdc.mariadb.core.com.*;
import static org.swdc.mariadb.core.MyCom.*;

import static org.swdc.mariadb.core.MariaDB.*;


/* statement handler */
@Properties(inherit = org.swdc.mariadb.conf.MariaDBConfigure.class)
public class MYSQL_STMT extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MYSQL_STMT() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MYSQL_STMT(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MYSQL_STMT(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MYSQL_STMT position(long position) {
        return (MYSQL_STMT)super.position(position);
    }
    @Override public MYSQL_STMT getPointer(long i) {
        return new MYSQL_STMT((Pointer)this).offsetAddress(i);
    }

  public native @ByRef MEM_ROOT mem_root(); public native MYSQL_STMT mem_root(MEM_ROOT setter);             /* root allocations */
  public native @ByRef LIST list(); public native MYSQL_STMT list(LIST setter);                 /* list to keep track of all stmts */
  public native MYSQL mysql(); public native MYSQL_STMT mysql(MYSQL setter);               /* connection handle */
  public native MYSQL_BIND params(); public native MYSQL_STMT params(MYSQL_BIND setter);              /* input parameters */
  public native MYSQL_BIND bind(); public native MYSQL_STMT bind(MYSQL_BIND setter);                /* output parameters */
  public native MYSQL_FIELD fields(); public native MYSQL_STMT fields(MYSQL_FIELD setter);              /* result set metadata */
  public native @ByRef MYSQL_DATA result(); public native MYSQL_STMT result(MYSQL_DATA setter);               /* cached result set */
  public native MYSQL_ROWS data_cursor(); public native MYSQL_STMT data_cursor(MYSQL_ROWS setter);         /* current row in cached result */
  /*
    mysql_stmt_fetch() calls this function to fetch one row (it's different
    for buffered, unbuffered and cursor fetch).
  */
  public static class Read_row_func_MYSQL_STMT_PointerPointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Read_row_func_MYSQL_STMT_PointerPointer(Pointer p) { super(p); }
      protected Read_row_func_MYSQL_STMT_PointerPointer() { allocate(); }
      private native void allocate();
      public native int call(MYSQL_STMT stmt, 
                                    @Cast("unsigned char**") PointerPointer row);
  }
  public native Read_row_func_MYSQL_STMT_PointerPointer read_row_func(); public native MYSQL_STMT read_row_func(Read_row_func_MYSQL_STMT_PointerPointer setter);
  /* copy of mysql->affected_rows after statement execution */
  public native long affected_rows(); public native MYSQL_STMT affected_rows(long setter);
  public native long insert_id(); public native MYSQL_STMT insert_id(long setter);            /* copy of mysql->insert_id */
  public native @Cast("unsigned long") long stmt_id(); public native MYSQL_STMT stmt_id(long setter);	       /* Id for prepared statement */
  public native @Cast("unsigned long") long flags(); public native MYSQL_STMT flags(long setter);                /* i.e. type of cursor to open */
  public native @Cast("unsigned long") long prefetch_rows(); public native MYSQL_STMT prefetch_rows(long setter);        /* number of rows per one COM_FETCH */
  /*
    Copied from mysql->server_status after execute/fetch to know
    server-side cursor status for this statement.
  */
  public native @Cast("unsigned int") int server_status(); public native MYSQL_STMT server_status(int setter);
  public native @Cast("unsigned int") int last_errno(); public native MYSQL_STMT last_errno(int setter);	       /* error code */
  public native @Cast("unsigned int") int param_count(); public native MYSQL_STMT param_count(int setter);          /* input parameter count */
  public native @Cast("unsigned int") int field_count(); public native MYSQL_STMT field_count(int setter);          /* number of columns in result set */
  public native @Cast("enum_mysql_stmt_state") int state(); public native MYSQL_STMT state(int setter);    /* statement state */
  public native @Cast("char") byte last_error(int i); public native MYSQL_STMT last_error(int i, byte setter);
  @MemberGetter public native @Cast("char*") BytePointer last_error(); /* error message */
  public native @Cast("char") byte sqlstate(int i); public native MYSQL_STMT sqlstate(int i, byte setter);
  @MemberGetter public native @Cast("char*") BytePointer sqlstate();
  /* Types of input parameters should be sent to server */
  public native @Cast("char") byte send_types_to_server(); public native MYSQL_STMT send_types_to_server(byte setter);
  public native @Cast("char") byte bind_param_done(); public native MYSQL_STMT bind_param_done(byte setter);      /* input buffers were supplied */
  public native @Cast("unsigned char") byte bind_result_done(); public native MYSQL_STMT bind_result_done(byte setter);     /* output buffers were supplied */
  /* mysql_stmt_close() had to cancel this result */
  public native @Cast("char") byte unbuffered_fetch_cancelled(); public native MYSQL_STMT unbuffered_fetch_cancelled(byte setter);  
  /*
    Is set to true if we need to calculate field->max_length for 
    metadata fields when doing mysql_stmt_store_result.
  */
  public native @Cast("char") byte update_max_length(); public native MYSQL_STMT update_max_length(byte setter);     
  public native st_mysql_stmt_extension extension(); public native MYSQL_STMT extension(st_mysql_stmt_extension setter);
}
