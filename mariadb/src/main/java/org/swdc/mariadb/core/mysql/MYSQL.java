// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.mariadb.core.mysql;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.mariadb.core.global.*;
import static org.swdc.mariadb.core.MyGlobal.*;
import org.swdc.mariadb.core.com.*;
import static org.swdc.mariadb.core.MyCom.*;

import static org.swdc.mariadb.core.MariaDB.*;


@Properties(inherit = org.swdc.mariadb.conf.MariaDBConfigure.class)
public class MYSQL extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MYSQL() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MYSQL(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MYSQL(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MYSQL position(long position) {
        return (MYSQL)super.position(position);
    }
    @Override public MYSQL getPointer(long i) {
        return new MYSQL((Pointer)this).offsetAddress(i);
    }

  public native @ByRef NET net(); public native MYSQL net(NET setter);			/* Communication parameters */
  public native @Cast("unsigned char*") BytePointer connector_fd(); public native MYSQL connector_fd(BytePointer setter);		/* ConnectorFd for SSL */
  public native @Cast("char*") BytePointer host(); public native MYSQL host(BytePointer setter);
  public native @Cast("char*") BytePointer user(); public native MYSQL user(BytePointer setter);
  public native @Cast("char*") BytePointer passwd(); public native MYSQL passwd(BytePointer setter);
  public native @Cast("char*") BytePointer unix_socket(); public native MYSQL unix_socket(BytePointer setter);
  public native @Cast("char*") BytePointer server_version(); public native MYSQL server_version(BytePointer setter);
  public native @Cast("char*") BytePointer host_info(); public native MYSQL host_info(BytePointer setter);
  public native @Cast("char*") BytePointer info(); public native MYSQL info(BytePointer setter);
  public native @Cast("char*") BytePointer db(); public native MYSQL db(BytePointer setter);
  public native @Const CHARSET_INFO charset(); public native MYSQL charset(CHARSET_INFO setter);
  public native @ByRef MEM_ROOT field_alloc(); public native MYSQL field_alloc(MEM_ROOT setter);
  public native long affected_rows(); public native MYSQL affected_rows(long setter);
  public native long insert_id(); public native MYSQL insert_id(long setter);		/* id if insert on table with NEXTNR */
  public native long extra_info(); public native MYSQL extra_info(long setter);		/* Not used */
  public native @Cast("unsigned long") long thread_id(); public native MYSQL thread_id(long setter);		/* Id for connection in server */
  public native @Cast("unsigned long") long packet_length(); public native MYSQL packet_length(long setter);
  public native @Cast("unsigned int") int port(); public native MYSQL port(int setter);
  public native @Cast("unsigned long") long client_flag(); public native MYSQL client_flag(long setter);
  public native @Cast("unsigned long") long server_capabilities(); public native MYSQL server_capabilities(long setter);
  public native @Cast("unsigned int") int protocol_version(); public native MYSQL protocol_version(int setter);
  public native @Cast("unsigned int") int field_count(); public native MYSQL field_count(int setter);
  public native @Cast("unsigned int") int server_status(); public native MYSQL server_status(int setter);
  public native @Cast("unsigned int") int server_language(); public native MYSQL server_language(int setter);
  public native @Cast("unsigned int") int warning_count(); public native MYSQL warning_count(int setter);
  public native @ByRef st_mysql_options options(); public native MYSQL options(st_mysql_options setter);
  public native mysql_status status(); public native MYSQL status(mysql_status setter);
  public native @Cast("char") byte free_me(); public native MYSQL free_me(byte setter);		/* If free in mysql_close */
  public native @Cast("char") byte reconnect(); public native MYSQL reconnect(byte setter);		/* set to 1 if automatic reconnect */

  /* session-wide random string */
  public native @Cast("char") byte auto_local_infile(); public native MYSQL auto_local_infile(byte setter);
  public native Pointer unused2(); public native MYSQL unused2(Pointer setter);
  public native Pointer unused3(); public native MYSQL unused3(Pointer setter);
  public native MYSQL_FIELD fields(); public native MYSQL fields(MYSQL_FIELD setter);
  public native @Cast("const char*") BytePointer tls_self_signed_error(); public native MYSQL tls_self_signed_error(BytePointer setter);

  public native LIST stmts(); public native MYSQL stmts(LIST setter);                     /* list of all statements */
  public native @Const st_mysql_methods methods(); public native MYSQL methods(st_mysql_methods setter);
  public native Pointer thd(); public native MYSQL thd(Pointer setter);
  /*
    Points to boolean flag in MYSQL_RES  or MYSQL_STMT. We set this flag 
    from mysql_stmt_close if close had to cancel result set of this object.
  */
  public native @Cast("char*") BytePointer unbuffered_fetch_owner(); public native MYSQL unbuffered_fetch_owner(BytePointer setter);
  /* needed for embedded server - no net buffer to store the 'info' */
  public native @Cast("char*") BytePointer info_buffer(); public native MYSQL info_buffer(BytePointer setter);
  public native Pointer extension(); public native MYSQL extension(Pointer setter);
}
