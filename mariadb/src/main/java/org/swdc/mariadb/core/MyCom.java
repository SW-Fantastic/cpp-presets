// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.mariadb.core;

import org.swdc.mariadb.core.com.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.mariadb.core.global.*;
import static org.swdc.mariadb.core.MyGlobal.*;

public class MyCom extends org.swdc.mariadb.conf.MyComConfigure {
    static { Loader.load(); }

// Parsed from mysql_com.h

/* Copyright (c) 2000, 2011, Oracle and/or its affiliates.
   Copyright (c) 2010, 2017, MariaDB Corporation.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 of the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1335  USA */

/*
** Common definition between mysql server & client
*/

// #ifndef _mysql_com_h
// #define _mysql_com_h

// #include "my_decimal_limits.h"

// #define HOSTNAME_LENGTH 255
// #define HOSTNAME_LENGTH_STR STRINGIFY_ARG(HOSTNAME_LENGTH)
// #define SYSTEM_CHARSET_MBMAXLEN 3
// #define NAME_CHAR_LEN	64              /* Field/table name length */
// #define USERNAME_CHAR_LENGTH 128
// #define USERNAME_CHAR_LENGTH_STR STRINGIFY_ARG(USERNAME_CHAR_LENGTH)

// #define NAME_LEN                (NAME_CHAR_LEN*SYSTEM_CHARSET_MBMAXLEN)
// #define USERNAME_LENGTH         (USERNAME_CHAR_LENGTH*SYSTEM_CHARSET_MBMAXLEN)
// #define DEFINER_CHAR_LENGTH     (USERNAME_CHAR_LENGTH + HOSTNAME_LENGTH + 1)
// #define DEFINER_LENGTH          (USERNAME_LENGTH + HOSTNAME_LENGTH + 1)

// #define MYSQL_AUTODETECT_CHARSET_NAME "auto"

// #define MYSQL50_TABLE_NAME_PREFIX         "#mysql50#"
// #define MYSQL50_TABLE_NAME_PREFIX_LENGTH  (sizeof(MYSQL50_TABLE_NAME_PREFIX)-1)
// #define SAFE_NAME_LEN (NAME_LEN + MYSQL50_TABLE_NAME_PREFIX_LENGTH)

// #define SERVER_VERSION_LENGTH 60
// #define SQLSTATE_LENGTH 5
// #define LIST_PROCESS_HOST_LEN 64

/*
  Maximum length of comments
*/
public static final int TABLE_COMMENT_INLINE_MAXLEN = 180; /* pre 5.5: 60 characters */
public static final int TABLE_COMMENT_MAXLEN = 2048;
public static final int COLUMN_COMMENT_MAXLEN = 1024;
public static final int INDEX_COMMENT_MAXLEN = 1024;
public static final int TABLE_PARTITION_COMMENT_MAXLEN = 1024;
public static final int DATABASE_COMMENT_MAXLEN = 1024;

/*
  Maximum length of protocol packet.
  OK packet length limit also restricted to this value as any length greater
  than this value will have first byte of OK packet to be 254 thus does not
  provide a means to identify if this is OK or EOF packet.
*/
public static final long MAX_PACKET_LENGTH = (256L*256L*256-1L);

/*
  USER_HOST_BUFF_SIZE -- length of string buffer, that is enough to contain
  username and hostname parts of the user identifier with trailing zero in
  MySQL standard format:
  user_name_part@host_name_part\0
*/
// #define USER_HOST_BUFF_SIZE HOSTNAME_LENGTH + USERNAME_LENGTH + 2

public static final String LOCAL_HOST =	"localhost";
public static final String LOCAL_HOST_NAMEDPIPE = ".";


// #if defined(_WIN32) && !defined( _CUSTOMCONFIG_)
public static final String MYSQL_NAMEDPIPE = "MySQL";
public static final String MYSQL_SERVICENAME = "MySQL";
// #endif

/*
  You should add new commands to the end of this list, otherwise old
  servers won't be able to handle them as 'unsupported'.
*/

public enum enum_server_command {
  COM_SLEEP(0), COM_QUIT(1), COM_INIT_DB(2), COM_QUERY(3), COM_FIELD_LIST(4),
  COM_CREATE_DB(5), COM_DROP_DB(6), COM_REFRESH(7), COM_SHUTDOWN(8), COM_STATISTICS(9),
  COM_PROCESS_INFO(10), COM_CONNECT(11), COM_PROCESS_KILL(12), COM_DEBUG(13), COM_PING(14),
  COM_TIME(15), COM_DELAYED_INSERT(16), COM_CHANGE_USER(17), COM_BINLOG_DUMP(18),
  COM_TABLE_DUMP(19), COM_CONNECT_OUT(20), COM_REGISTER_SLAVE(21),
  COM_STMT_PREPARE(22), COM_STMT_EXECUTE(23), COM_STMT_SEND_LONG_DATA(24), COM_STMT_CLOSE(25),
  COM_STMT_RESET(26), COM_SET_OPTION(27), COM_STMT_FETCH(28), COM_DAEMON(29),
  COM_UNIMPLEMENTED(30), /* COM_BINLOG_DUMP_GTID in MySQL */
  COM_RESET_CONNECTION(31),
  /* don't forget to update const char *command_name[] in sql_parse.cc */
  COM_MDB_GAP_BEG(32),
  COM_MDB_GAP_END(249),
  COM_STMT_BULK_EXECUTE(250),
  COM_SLAVE_WORKER(251),
  COM_SLAVE_IO(252),
  COM_SLAVE_SQL(253),
  COM_RESERVED_1(254), /* Old COM_MULTI, now removed */
  /* Must be last */
  COM_END(255);

    public final int value;
    private enum_server_command(int v) { this.value = v; }
    private enum_server_command(enum_server_command e) { this.value = e.value; }
    public enum_server_command intern() { for (enum_server_command e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}


/*
  Bulk PS protocol indicator value:
*/
public enum enum_indicator_type {
  STMT_INDICATOR_NONE(0),
  STMT_INDICATOR_NULL(1),
  STMT_INDICATOR_DEFAULT(2),
  STMT_INDICATOR_IGNORE(3);

    public final int value;
    private enum_indicator_type(int v) { this.value = v; }
    private enum_indicator_type(enum_indicator_type e) { this.value = e.value; }
    public enum_indicator_type intern() { for (enum_indicator_type e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

/*
  bulk PS flags
*/
public static final int STMT_BULK_FLAG_CLIENT_SEND_TYPES = 128;
public static final int STMT_BULK_FLAG_SEND_UNIT_RESULTS = 64;

/* sql type stored in .frm files for virtual fields */
public static final int MYSQL_TYPE_VIRTUAL = 245;
/*
  Length of random string sent by server on handshake; this is also length of
  obfuscated password, received from client
*/
public static final int SCRAMBLE_LENGTH = 20;
public static final int SCRAMBLE_LENGTH_323 = 8;
/* length of password stored in the db: new passwords are preceded with '*' */
public static final int SCRAMBLED_PASSWORD_CHAR_LENGTH = (SCRAMBLE_LENGTH*2+1);
public static final int SCRAMBLED_PASSWORD_CHAR_LENGTH_323 = (SCRAMBLE_LENGTH_323*2);


public static final int NOT_NULL_FLAG =	1;		/* Field can't be NULL */
public static final int PRI_KEY_FLAG =	2;		/* Field is part of a primary key */
public static final int UNIQUE_KEY_FLAG = 4;		/* Field is part of a unique key */
public static final int MULTIPLE_KEY_FLAG = 8;		/* Field is part of a key */
public static final int BLOB_FLAG =	16;		/* Field is a blob */
public static final int UNSIGNED_FLAG =	32;		/* Field is unsigned */
public static final int ZEROFILL_FLAG =	64;		/* Field is zerofill */
public static final int BINARY_FLAG =	128;		/* Field is binary   */

/* The following are only sent to new clients */
public static final int ENUM_FLAG =	256;		/* field is an enum */
public static final int AUTO_INCREMENT_FLAG = 512;	/* field is a autoincrement field */
public static final int TIMESTAMP_FLAG =	1024;		/* Field is a timestamp */
public static final int SET_FLAG =	2048;		/* field is a set */
public static final int NO_DEFAULT_VALUE_FLAG = 4096;	/* Field doesn't have default value */
public static final int ON_UPDATE_NOW_FLAG = 8192;	/* Field is set to NOW on UPDATE */
public static final int NUM_FLAG =	32768;		/* Field is num (for clients) */
public static final int PART_KEY_FLAG =	16384;		/* Intern; Part of some key */
public static final int GROUP_FLAG =	32768;		/* Intern: Group field */
public static final long CONTEXT_COLLATION_FLAG = 131072L;  /* Intern: Used by sql_yacc */
public static final int GET_FIXED_FIELDS_FLAG = (1 << 18); /* Used to get fields in item tree */
public static final int FIELD_IN_PART_FUNC_FLAG = (1 << 19);/* Field part of partition func */
public static final int PART_INDIRECT_KEY_FLAG = (1 << 20);

/**
  Intern: Field in TABLE object for new version of altered table,
          which participates in a newly added index.
*/
public static final int FIELD_IN_ADD_INDEX = (1 << 20);
public static final int FIELD_IS_RENAMED = (1 << 21);     /* Intern: Field is being renamed */
public static final int FIELD_FLAGS_STORAGE_MEDIA = 22;    /* Field storage media, bit 22-23 */
public static final int FIELD_FLAGS_STORAGE_MEDIA_MASK = (3 << FIELD_FLAGS_STORAGE_MEDIA);
public static final int FIELD_FLAGS_COLUMN_FORMAT = 24;    /* Field column format, bit 24-25 */
public static final int FIELD_FLAGS_COLUMN_FORMAT_MASK = (3 << FIELD_FLAGS_COLUMN_FORMAT);
public static final int FIELD_IS_DROPPED = (1 << 26);     /* Intern: Field is being dropped */

public static final int VERS_ROW_START = (1 << 27);   /* autogenerated column declared with
                                             `generated always as row start`
                                              (see II.a SQL Standard) */
public static final int VERS_ROW_END = (1 << 28);     /* autogenerated column declared with
                                           `generated always as row end`
                                            (see II.a SQL Standard).*/
public static final int VERS_SYSTEM_FIELD = (VERS_ROW_START | VERS_ROW_END);
public static final int VERS_UPDATE_UNVERSIONED_FLAG = (1 << 29); /* column that doesn't support
                                                system versioning when table
                                                itself supports it*/
public static final int LONG_UNIQUE_HASH_FIELD =       (1<< 30); /* This field will store hash for unique
                                                column */
public static final int FIELD_PART_OF_TMP_UNIQUE =     (1<< 31); /* part of an unique constrain
                                                for a tmporary table*/

public static final long REFRESH_GRANT =           (1L << 0);  /* Refresh grant tables */
public static final long REFRESH_LOG =             (1L << 1);  /* Start on new log file */
public static final long REFRESH_TABLES =          (1L << 2);  /* close all tables */
public static final long REFRESH_HOSTS =           (1L << 3);  /* Flush host cache */
public static final long REFRESH_STATUS =          (1L << 4);  /* Flush status variables */
public static final long REFRESH_THREADS =         (1L << 5);  /* Flush thread cache */
public static final long REFRESH_SLAVE =           (1L << 6);  /* Reset master info and restart
                                                slave thread */
public static final long REFRESH_MASTER =          (1L << 7);  /* Remove all bin logs in the index
                                             and truncate the index */

/* The following can't be set with mysql_refresh() */
public static final long REFRESH_ERROR_LOG =       (1L << 8);  /* Rotate only the error log */
public static final long REFRESH_ENGINE_LOG =      (1L << 9);  /* Flush all storage engine logs */
public static final long REFRESH_BINARY_LOG =      (1L << 10); /* Flush the binary log */
public static final long REFRESH_RELAY_LOG =       (1L << 11); /* Flush the relay log */
public static final long REFRESH_GENERAL_LOG =     (1L << 12); /* Flush the general log */
public static final long REFRESH_SLOW_LOG =        (1L << 13); /* Flush the slow query log */

public static final long REFRESH_READ_LOCK =       (1L << 14); /* Lock tables for read */
public static final long REFRESH_CHECKPOINT =      (1L << 15); /* With REFRESH_READ_LOCK: block checkpoints too */

public static final long REFRESH_QUERY_CACHE =     (1L << 16); /* clear the query cache */
public static final long REFRESH_QUERY_CACHE_FREE = (1L << 17); /* pack query cache */
public static final long REFRESH_DES_KEY_FILE =    (1L << 18);
public static final long REFRESH_USER_RESOURCES =  (1L << 19);
public static final long REFRESH_FOR_EXPORT =      (1L << 20); /* FLUSH TABLES ... FOR EXPORT */
public static final long REFRESH_SSL =             (1L << 21);
public static final long REFRESH_GLOBAL_STATUS =   (1L << 22);  /* Flush global status */
public static final long REFRESH_SESSION_STATUS =  (1L << 23);  /* Flush session status */

public static final long REFRESH_GENERIC =         (1L << 30);
public static final long REFRESH_FAST =            (1L << 31); /* Intern flag */

public static final int CLIENT_LONG_PASSWORD =	0;	/* obsolete flag */
public static final long CLIENT_MYSQL =            1L;       /* mysql/old mariadb server/client */
public static final long CLIENT_FOUND_ROWS =	2L;	/* Found instead of affected rows */
public static final long CLIENT_LONG_FLAG =	4L;	/* Get all column flags */
public static final long CLIENT_CONNECT_WITH_DB =	8L;	/* One can specify db on connect */
public static final long CLIENT_NO_SCHEMA =	16L;	/* Don't allow database.table.column */
public static final long CLIENT_COMPRESS =		32L;	/* Can use compression protocol */
public static final long CLIENT_ODBC =		64L;	/* Odbc client */
public static final long CLIENT_LOCAL_FILES =	128L;	/* Can use LOAD DATA LOCAL */
public static final long CLIENT_IGNORE_SPACE =	256L;	/* Ignore spaces before '(' */
public static final long CLIENT_PROTOCOL_41 =	512L;	/* New 4.1 protocol */
public static final long CLIENT_INTERACTIVE =	1024L;	/* This is an interactive client */
public static final long CLIENT_SSL =              2048L;	/* Switch to SSL after handshake */
public static final long CLIENT_IGNORE_SIGPIPE =   4096L;    /* IGNORE sigpipes */
public static final long CLIENT_TRANSACTIONS =	8192L;	/* Client knows about transactions */
public static final long CLIENT_RESERVED =         16384L;   /* Old flag for 4.1 protocol  */
public static final long CLIENT_SECURE_CONNECTION = 32768L;  /* New 4.1 authentication */
public static final long CLIENT_MULTI_STATEMENTS = (1L << 16); /* Enable/disable multi-stmt support */
public static final long CLIENT_MULTI_RESULTS =    (1L << 17); /* Enable/disable multi-results */
public static final long CLIENT_PS_MULTI_RESULTS = (1L << 18); /* Multi-results in PS-protocol */

public static final long CLIENT_PLUGIN_AUTH =  (1L << 19); /* Client supports plugin authentication */
public static final long CLIENT_CONNECT_ATTRS = (1L << 20); /* Client supports connection attributes */
/* Enable authentication response packet to be larger than 255 bytes. */
public static final long CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA = (1L << 21);
/* Don't close the connection for a connection with expired password. */
public static final long CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS = (1L << 22);

/**
  Capable of handling server state change information. Its a hint to the
  server to include the state change information in Ok packet.
*/
public static final long CLIENT_SESSION_TRACK = (1L << 23);
/* Client no longer needs EOF packet */
public static final long CLIENT_DEPRECATE_EOF = (1L << 24);

public static final long CLIENT_PROGRESS_OBSOLETE =  (1L << 29);
public static final long CLIENT_SSL_VERIFY_SERVER_CERT_OBSOLETE = (1L << 30);
/*
  It used to be that if mysql_real_connect() failed, it would delete any
  options set by the client, unless the CLIENT_REMEMBER_OPTIONS flag was
  given.
  That behaviour does not appear very useful, and it seems unlikely that
  any applications would actually depend on this. So from MariaDB 5.5 we
  always preserve any options set in case of failed connect, and this
  option is effectively always set.
*/
public static final long CLIENT_REMEMBER_OPTIONS = (1L << 31);

/* MariaDB extended capability flags */
public static final long MARIADB_CLIENT_FLAGS_MASK = 0xffffffff00000000L;
/* Client support progress indicator */
public static final long MARIADB_CLIENT_PROGRESS = (1L << 32);

/* Old COM_MULTI experiment (functionality removed).*/
public static final long MARIADB_CLIENT_RESERVED_1 = (1L << 33);

/* support of array binding */
public static final long MARIADB_CLIENT_STMT_BULK_OPERATIONS = (1L << 34);
/* support of extended metadata (e.g. type/format information) */
public static final long MARIADB_CLIENT_EXTENDED_METADATA = (1L << 35);

/* Do not resend metadata for prepared statements, since 10.6*/
public static final long MARIADB_CLIENT_CACHE_METADATA = (1L << 36);

/* permit sending unit result-set for BULK commands */
public static final long MARIADB_CLIENT_BULK_UNIT_RESULTS = (1L << 37);

// #ifdef HAVE_COMPRESS
public static final long CAN_CLIENT_COMPRESS = CLIENT_COMPRESS;
// #else
// #endif

/*
  Gather all possible capabilities (flags) supported by the server

  MARIADB_* flags supported only by MariaDB connector(s).
*/
public static final long CLIENT_ALL_FLAGS =  (
                           CLIENT_FOUND_ROWS | 
                           CLIENT_LONG_FLAG | 
                           CLIENT_CONNECT_WITH_DB | 
                           CLIENT_NO_SCHEMA | 
                           CLIENT_COMPRESS | 
                           CLIENT_ODBC | 
                           CLIENT_LOCAL_FILES | 
                           CLIENT_IGNORE_SPACE | 
                           CLIENT_PROTOCOL_41 | 
                           CLIENT_INTERACTIVE | 
                           CLIENT_SSL | 
                           CLIENT_IGNORE_SIGPIPE | 
                           CLIENT_TRANSACTIONS | 
                           CLIENT_RESERVED | 
                           CLIENT_SECURE_CONNECTION | 
                           CLIENT_MULTI_STATEMENTS | 
                           CLIENT_MULTI_RESULTS | 
                           CLIENT_PS_MULTI_RESULTS | 
                           CLIENT_REMEMBER_OPTIONS | 
                           MARIADB_CLIENT_PROGRESS | 
                           CLIENT_PLUGIN_AUTH | 
                           CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA | 
                           CLIENT_SESSION_TRACK |
                           CLIENT_DEPRECATE_EOF |
                           CLIENT_CONNECT_ATTRS |
                           MARIADB_CLIENT_STMT_BULK_OPERATIONS |
                           MARIADB_CLIENT_EXTENDED_METADATA|
                           MARIADB_CLIENT_CACHE_METADATA |
                           CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS |
                           MARIADB_CLIENT_BULK_UNIT_RESULTS);
/*
  Switch off the flags that are optional and depending on build flags
  If any of the optional flags is supported by the build it will be switched
  on before sending to the client during the connection handshake.
*/
public static final long CLIENT_BASIC_FLAGS = ((CLIENT_ALL_FLAGS & ~CLIENT_SSL) 
                                               & ~CLIENT_COMPRESS);

public enum mariadb_field_attr_t {
  MARIADB_FIELD_ATTR_DATA_TYPE_NAME(0),
  MARIADB_FIELD_ATTR_FORMAT_NAME(1);

    public final int value;
    private mariadb_field_attr_t(int v) { this.value = v; }
    private mariadb_field_attr_t(mariadb_field_attr_t e) { this.value = e.value; }
    public mariadb_field_attr_t intern() { for (mariadb_field_attr_t e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define MARIADB_FIELD_ATTR_LAST MARIADB_FIELD_ATTR_FORMAT_NAME


/**
  Is raised when a multi-statement transaction
  has been started, either explicitly, by means
  of BEGIN or COMMIT AND CHAIN, or
  implicitly, by the first transactional
  statement, when autocommit=off.
*/
public static final int SERVER_STATUS_IN_TRANS =     1;
public static final int SERVER_STATUS_AUTOCOMMIT =   2;	/* Server in auto_commit mode */
public static final int SERVER_MORE_RESULTS_EXISTS = 8;   /* Multi query - next query exists */
public static final int SERVER_QUERY_NO_GOOD_INDEX_USED = 16;
public static final int SERVER_QUERY_NO_INDEX_USED =      32;
/**
  The server was able to fulfill the clients request and opened a
  read-only non-scrollable cursor for a query. This flag comes
  in reply to COM_STMT_EXECUTE and COM_STMT_FETCH commands.
*/
public static final int SERVER_STATUS_CURSOR_EXISTS = 64;
/**
  This flag is sent when a read-only cursor is exhausted, in reply to
  COM_STMT_FETCH command.
*/
public static final int SERVER_STATUS_LAST_ROW_SENT = 128;
public static final int SERVER_STATUS_DB_DROPPED =        256; /* A database was dropped */
public static final int SERVER_STATUS_NO_BACKSLASH_ESCAPES = 512;
/**
  Sent to the client if after a prepared statement reprepare
  we discovered that the new statement returns a different 
  number of result set columns.
*/
public static final int SERVER_STATUS_METADATA_CHANGED = 1024;
public static final int SERVER_QUERY_WAS_SLOW =          2048;

/**
  To mark ResultSet containing output parameter values.
*/
public static final int SERVER_PS_OUT_PARAMS =            4096;

/**
  Set at the same time as SERVER_STATUS_IN_TRANS if the started
  multi-statement transaction is a read-only transaction. Cleared
  when the transaction commits or aborts. Since this flag is sent
  to clients in OK and EOF packets, the flag indicates the
  transaction status at the end of command execution.
*/
public static final int SERVER_STATUS_IN_TRANS_READONLY = 8192;

/**
  This status flag, when on, implies that one of the state information has
  changed on the server because of the execution of the last statement.
*/
public static final int SERVER_SESSION_STATE_CHANGED =    16384;

public static final int SERVER_STATUS_ANSI_QUOTES =       32768;

/**
  Server status flags that must be cleared when starting
  execution of a new SQL statement.
  Flags from this set are only added to the
  current server status by the execution engine, but 
  never removed -- the execution engine expects them 
  to disappear automagically by the next command.
*/
public static final int SERVER_STATUS_CLEAR_SET = (SERVER_QUERY_NO_GOOD_INDEX_USED| 
                                 SERVER_QUERY_NO_INDEX_USED|
                                 SERVER_MORE_RESULTS_EXISTS|
                                 SERVER_STATUS_METADATA_CHANGED |
                                 SERVER_QUERY_WAS_SLOW |
                                 SERVER_STATUS_DB_DROPPED |
                                 SERVER_STATUS_CURSOR_EXISTS|
                                 SERVER_STATUS_LAST_ROW_SENT|
                                 SERVER_SESSION_STATE_CHANGED);

public static final int MYSQL_ERRMSG_SIZE =	512;
public static final int NET_READ_TIMEOUT =	30;		/* Timeout on read */
public static final int NET_WRITE_TIMEOUT =	60;		/* Timeout on write */
public static final int NET_WAIT_TIMEOUT =	8*60*60;
// Targeting com\st_vio.java


// Targeting com\Vio.java



public static final int MAX_TINYINT_WIDTH =       3;       /* Max width for a TINY w.o. sign */
public static final int MAX_SMALLINT_WIDTH =      5;       /* Max width for a SHORT w.o. sign */
public static final int MAX_MEDIUMINT_WIDTH =     8;       /* Max width for a INT24 w.o. sign */
public static final int MAX_INT_WIDTH =           10;      /* Max width for a LONG w.o. sign */
public static final int MAX_BIGINT_WIDTH =        20;      /* Max width for a LONGLONG */
public static final int MAX_CHAR_WIDTH =		255;	/* Max length for a CHAR column */
public static final int MAX_BLOB_WIDTH =		16777216;
// Targeting com\NET.java




public static final long packet_error = ~0L;

public enum enum_field_types { MYSQL_TYPE_DECIMAL(0), MYSQL_TYPE_TINY(1),
			MYSQL_TYPE_SHORT(2),  MYSQL_TYPE_LONG(3),
			MYSQL_TYPE_FLOAT(4),  MYSQL_TYPE_DOUBLE(5),
			MYSQL_TYPE_NULL(6),   MYSQL_TYPE_TIMESTAMP(7),
			MYSQL_TYPE_LONGLONG(8),MYSQL_TYPE_INT24(9),
			MYSQL_TYPE_DATE(10),   MYSQL_TYPE_TIME(11),
			MYSQL_TYPE_DATETIME(12), MYSQL_TYPE_YEAR(13),
			MYSQL_TYPE_NEWDATE(14), MYSQL_TYPE_VARCHAR(15),
			MYSQL_TYPE_BIT(16),
                        /*
                          mysql-5.6 compatibility temporal types.
                          They're only used internally for reading RBR
                          mysql-5.6 binary log events and mysql-5.6 frm files.
                          They're never sent to the client.
                        */
                        MYSQL_TYPE_TIMESTAMP2(17),
                        MYSQL_TYPE_DATETIME2(18),
                        MYSQL_TYPE_TIME2(19),
                        /* Compressed types are only used internally for RBR. */
                        MYSQL_TYPE_BLOB_COMPRESSED(140),
                        MYSQL_TYPE_VARCHAR_COMPRESSED(141),

                        MYSQL_TYPE_NEWDECIMAL(246),
			MYSQL_TYPE_ENUM(247),
			MYSQL_TYPE_SET(248),
			MYSQL_TYPE_TINY_BLOB(249),
			MYSQL_TYPE_MEDIUM_BLOB(250),
			MYSQL_TYPE_LONG_BLOB(251),
			MYSQL_TYPE_BLOB(252),
			MYSQL_TYPE_VAR_STRING(253),
			MYSQL_TYPE_STRING(254),
			MYSQL_TYPE_GEOMETRY(255);

    public final int value;
    private enum_field_types(int v) { this.value = v; }
    private enum_field_types(enum_field_types e) { this.value = e.value; }
    public enum_field_types intern() { for (enum_field_types e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

/* For backward compatibility */
public static final long CLIENT_MULTI_QUERIES =    CLIENT_MULTI_STATEMENTS;    
// #define FIELD_TYPE_DECIMAL     MYSQL_TYPE_DECIMAL
// #define FIELD_TYPE_NEWDECIMAL  MYSQL_TYPE_NEWDECIMAL
// #define FIELD_TYPE_TINY        MYSQL_TYPE_TINY
// #define FIELD_TYPE_SHORT       MYSQL_TYPE_SHORT
// #define FIELD_TYPE_LONG        MYSQL_TYPE_LONG
// #define FIELD_TYPE_FLOAT       MYSQL_TYPE_FLOAT
// #define FIELD_TYPE_DOUBLE      MYSQL_TYPE_DOUBLE
// #define FIELD_TYPE_NULL        MYSQL_TYPE_NULL
// #define FIELD_TYPE_TIMESTAMP   MYSQL_TYPE_TIMESTAMP
// #define FIELD_TYPE_LONGLONG    MYSQL_TYPE_LONGLONG
// #define FIELD_TYPE_INT24       MYSQL_TYPE_INT24
// #define FIELD_TYPE_DATE        MYSQL_TYPE_DATE
// #define FIELD_TYPE_TIME        MYSQL_TYPE_TIME
// #define FIELD_TYPE_DATETIME    MYSQL_TYPE_DATETIME
// #define FIELD_TYPE_YEAR        MYSQL_TYPE_YEAR
// #define FIELD_TYPE_NEWDATE     MYSQL_TYPE_NEWDATE
// #define FIELD_TYPE_ENUM        MYSQL_TYPE_ENUM
// #define FIELD_TYPE_SET         MYSQL_TYPE_SET
// #define FIELD_TYPE_TINY_BLOB   MYSQL_TYPE_TINY_BLOB
// #define FIELD_TYPE_MEDIUM_BLOB MYSQL_TYPE_MEDIUM_BLOB
// #define FIELD_TYPE_LONG_BLOB   MYSQL_TYPE_LONG_BLOB
// #define FIELD_TYPE_BLOB        MYSQL_TYPE_BLOB
// #define FIELD_TYPE_VAR_STRING  MYSQL_TYPE_VAR_STRING
// #define FIELD_TYPE_STRING      MYSQL_TYPE_STRING
// #define FIELD_TYPE_CHAR        MYSQL_TYPE_TINY
// #define FIELD_TYPE_INTERVAL    MYSQL_TYPE_ENUM
// #define FIELD_TYPE_GEOMETRY    MYSQL_TYPE_GEOMETRY
// #define FIELD_TYPE_BIT         MYSQL_TYPE_BIT


/* Shutdown/kill enums and constants */ 

/* Bits for THD::killable. */
public static native @MemberGetter int MYSQL_SHUTDOWN_KILLABLE_CONNECT();
public static final int MYSQL_SHUTDOWN_KILLABLE_CONNECT = MYSQL_SHUTDOWN_KILLABLE_CONNECT();
public static native @MemberGetter int MYSQL_SHUTDOWN_KILLABLE_TRANS();
public static final int MYSQL_SHUTDOWN_KILLABLE_TRANS = MYSQL_SHUTDOWN_KILLABLE_TRANS();
public static native @MemberGetter int MYSQL_SHUTDOWN_KILLABLE_LOCK_TABLE();
public static final int MYSQL_SHUTDOWN_KILLABLE_LOCK_TABLE = MYSQL_SHUTDOWN_KILLABLE_LOCK_TABLE();
public static native @MemberGetter int MYSQL_SHUTDOWN_KILLABLE_UPDATE();
public static final int MYSQL_SHUTDOWN_KILLABLE_UPDATE = MYSQL_SHUTDOWN_KILLABLE_UPDATE();

public enum mysql_enum_shutdown_level {
  /*
    We want levels to be in growing order of hardness (because we use number
    comparisons). Note that DEFAULT does not respect the growing property, but
    it's ok.
  */
  SHUTDOWN_DEFAULT(0),
  /* wait for existing connections to finish */
  SHUTDOWN_WAIT_CONNECTIONS(MYSQL_SHUTDOWN_KILLABLE_CONNECT),
  /* wait for existing trans to finish */
  SHUTDOWN_WAIT_TRANSACTIONS(MYSQL_SHUTDOWN_KILLABLE_TRANS),
  /* wait for existing updates to finish (=> no partial MyISAM update) */
  SHUTDOWN_WAIT_UPDATES(MYSQL_SHUTDOWN_KILLABLE_UPDATE),
  /* flush InnoDB buffers and other storage engines' buffers*/
  SHUTDOWN_WAIT_ALL_BUFFERS((MYSQL_SHUTDOWN_KILLABLE_UPDATE << 1)),
  /* don't flush InnoDB buffers, flush other storage engines' buffers*/
  SHUTDOWN_WAIT_CRITICAL_BUFFERS((MYSQL_SHUTDOWN_KILLABLE_UPDATE << 1) + 1);

    public final int value;
    private mysql_enum_shutdown_level(int v) { this.value = v; }
    private mysql_enum_shutdown_level(mysql_enum_shutdown_level e) { this.value = e.value; }
    public mysql_enum_shutdown_level intern() { for (mysql_enum_shutdown_level e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

public enum enum_cursor_type {
  CURSOR_TYPE_NO_CURSOR(0),
  CURSOR_TYPE_READ_ONLY(1),
  CURSOR_TYPE_FOR_UPDATE(2),
  CURSOR_TYPE_SCROLLABLE(4);

    public final int value;
    private enum_cursor_type(int v) { this.value = v; }
    private enum_cursor_type(enum_cursor_type e) { this.value = e.value; }
    public enum_cursor_type intern() { for (enum_cursor_type e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}


/* options for mysql_set_option */
public enum enum_mysql_set_option {
  MYSQL_OPTION_MULTI_STATEMENTS_ON(0),
  MYSQL_OPTION_MULTI_STATEMENTS_OFF(1);

    public final int value;
    private enum_mysql_set_option(int v) { this.value = v; }
    private enum_mysql_set_option(enum_mysql_set_option e) { this.value = e.value; }
    public enum_mysql_set_option intern() { for (enum_mysql_set_option e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

/*
  Type of state change information that the server can include in the Ok
  packet.
*/
public enum enum_session_state_type {
  SESSION_TRACK_SYSTEM_VARIABLES(0),             /* Session system variables */
  SESSION_TRACK_SCHEMA(1),                       /* Current schema */
  SESSION_TRACK_STATE_CHANGE(2),                 /* track session state changes */
  SESSION_TRACK_GTIDS(3),
  SESSION_TRACK_TRANSACTION_CHARACTERISTICS(4),  /* Transaction chistics */
  SESSION_TRACK_TRANSACTION_STATE(5),            /* Transaction state */
// #ifdef USER_VAR_TRACKING
  SESSION_TRACK_MYSQL_RESERVED1(6),
  SESSION_TRACK_MYSQL_RESERVED2(7),
  SESSION_TRACK_MYSQL_RESERVED3(8),
  SESSION_TRACK_MYSQL_RESERVED4(9),
  SESSION_TRACK_MYSQL_RESERVED5(10),
  SESSION_TRACK_MYSQL_RESERVED6(11),
  SESSION_TRACK_USER_VARIABLES(12),
// #endif // USER_VAR_TRACKING
  SESSION_TRACK_always_at_the_end(13);            /* must be last */

    public final int value;
    private enum_session_state_type(int v) { this.value = v; }
    private enum_session_state_type(enum_session_state_type e) { this.value = e.value; }
    public enum_session_state_type intern() { for (enum_session_state_type e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

// #define SESSION_TRACK_BEGIN SESSION_TRACK_SYSTEM_VARIABLES

// #define IS_SESSION_STATE_TYPE(T)
//   (((int)(T) >= SESSION_TRACK_BEGIN) && ((T) < SESSION_TRACK_always_at_the_end))

// #define net_new_transaction(net) ((net)->pkt_nr=0)

// #ifdef __cplusplus
// #endif












// #define my_net_read(A) my_net_read_packet((A), 0)
// Targeting com\sockaddr.java


// Targeting com\my_rnd_struct.java



// #ifdef __cplusplus
// #endif

  /* The following is for user defined functions */

/** enum Item_result */
public static final int
  STRING_RESULT = 0, REAL_RESULT = 1, INT_RESULT = 2, ROW_RESULT = 3, DECIMAL_RESULT = 4,
  TIME_RESULT = 5;
// Targeting com\UDF_ARGS.java


// Targeting com\UDF_INIT.java


/* 
  TODO: add a notion for determinism of the UDF. 
  See Item_udf_func::update_used_tables ()
*/

  /* Constants when using compression */
public static final int NET_HEADER_SIZE = 4;		/* standard header size */
public static final int COMP_HEADER_SIZE = 3;		/* compression header extra size */

  /* Prototypes to password functions */

// #ifdef __cplusplus
// #endif

/*
  These functions are used for authentication by client and server and
  implemented in sql/password.c
*/














/* end of password.c */

public static native @Cast("char*") BytePointer get_tty_password(@Cast("const char*") BytePointer opt_message);
public static native @Cast("char*") ByteBuffer get_tty_password(String opt_message);



/* Some other useful functions */




// #ifdef MY_GLOBAL_INCLUDED
// #endif

// #ifdef __cplusplus
// #endif

public static final long NULL_LENGTH = ~0L; /* For net_store_length */
public static final int MYSQL_STMT_HEADER =       4;
public static final int MYSQL_LONG_DATA_HEADER =  6;

/*
  If a float or double field have more than this number of decimals,
  it's regarded as floating point field without any specific number of
  decimals
*/


// #endif


}
