// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.mariadb.core.mysql;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.mariadb.core.global.*;
import static org.swdc.mariadb.core.MyGlobal.*;
import org.swdc.mariadb.core.com.*;
import static org.swdc.mariadb.core.MyCom.*;

import static org.swdc.mariadb.core.MariaDB.*;

@Properties(inherit = org.swdc.mariadb.conf.MariaDBConfigure.class)
public class MYSQL_DATA extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MYSQL_DATA() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MYSQL_DATA(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MYSQL_DATA(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MYSQL_DATA position(long position) {
        return (MYSQL_DATA)super.position(position);
    }
    @Override public MYSQL_DATA getPointer(long i) {
        return new MYSQL_DATA((Pointer)this).offsetAddress(i);
    }

  public native MYSQL_ROWS data(); public native MYSQL_DATA data(MYSQL_ROWS setter);
  public native EMBEDDED_QUERY_RESULT embedded_info(); public native MYSQL_DATA embedded_info(EMBEDDED_QUERY_RESULT setter);
  public native @ByRef MEM_ROOT alloc(); public native MYSQL_DATA alloc(MEM_ROOT setter);
  public native long rows(); public native MYSQL_DATA rows(long setter);
  public native @Cast("unsigned int") int fields(); public native MYSQL_DATA fields(int setter);
  /* extra info for embedded library */
  public native Pointer extension(); public native MYSQL_DATA extension(Pointer setter);
}
