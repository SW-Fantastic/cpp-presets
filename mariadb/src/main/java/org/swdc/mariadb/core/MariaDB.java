// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.mariadb.core;

import org.swdc.mariadb.core.mysql.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.mariadb.core.global.*;
import static org.swdc.mariadb.core.MyGlobal.*;
import org.swdc.mariadb.core.com.*;
import static org.swdc.mariadb.core.MyCom.*;

public class MariaDB extends org.swdc.mariadb.conf.MariaDBConfigure {
    static { Loader.load(); }

// Parsed from mysql.h

/*
   Copyright (c) 2000, 2012, Oracle and/or its affiliates.
   Copyright (c) 2012, Monty Program Ab.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 of the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1335  USA */

/*
  This file defines the client API to MySQL and also the ABI of the
  dynamically linked libmysqlclient.

  The ABI should never be changed in a released product of MySQL,
  thus you need to take great care when changing the file. In case
  the file is changed so the ABI is broken, you must also update
  the SHARED_LIB_MAJOR_VERSION in cmake/mysql_version.cmake
*/

// #ifndef _mysql_h
// #define _mysql_h

// #ifdef _AIX           /* large-file support will break without this */
// #include <standards.h>
// #endif


// #ifdef	__cplusplus
// #endif

// #ifndef MY_GLOBAL_INCLUDED				/* If not standard header */
// #ifndef MYSQL_ABI_CHECK
// #include <sys/types.h>
// #endif

// #ifndef MYSQL_PLUGIN_INCLUDED
// #endif

// #if !defined(_WIN32)
// #define STDCALL
// #else
// #define STDCALL __stdcall
// #endif

// #ifndef my_socket_defined
// #if defined (_WIN64)
// #define my_socket unsigned long long
// #elif defined (_WIN32)
// #define my_socket unsigned int
// #else
// #endif /* _WIN64 */
// #endif /* my_socket_defined */
// #endif /* MY_GLOBAL_INCLUDED */

// #include "mysql_version.h"
// #include "mysql_com.h"
// #include "mysql_time.h"

// #include "my_list.h" /* for LISTs used in 'MYSQL' and 'MYSQL_STMT' */

public static native @Cast("unsigned int") int mariadb_deinitialize_ssl(); public static native void mariadb_deinitialize_ssl(int setter);



public static final int CLIENT_NET_READ_TIMEOUT =		(365*24*3600);	/* Timeout on read */
public static final int CLIENT_NET_WRITE_TIMEOUT =	(365*24*3600);	/* Timeout on write */

// #define IS_PRI_KEY(n)	((n) & PRI_KEY_FLAG)
// #define IS_NOT_NULL(n)	((n) & NOT_NULL_FLAG)
// #define IS_BLOB(n)	((n) & BLOB_FLAG)
/**
   Returns true if the value is a number which does not need quotes for
   the sql_lex.cc parser to parse correctly.
*/
// #define IS_NUM(t)	(((t) <= MYSQL_TYPE_INT24 && (t) != MYSQL_TYPE_TIMESTAMP) || (t) == MYSQL_TYPE_YEAR || (t) == MYSQL_TYPE_NEWDECIMAL)
// #define IS_LONGDATA(t) ((t) >= MYSQL_TYPE_TINY_BLOB && (t) <= MYSQL_TYPE_STRING)
// Targeting mysql\MARIADB_CONST_STRING.java


// Targeting mysql\MYSQL_FIELD.java

		/* return data as array of strings */ /* offset to current field */

// #ifndef MY_GLOBAL_INCLUDED
// #if defined(NO_CLIENT_LONG_LONG)
// #elif defined (_WIN32)
// #else
// #endif
// #endif

// #include "typelib.h"

// #define MYSQL_COUNT_ERROR (~(my_ulonglong) 0)

/* backward compatibility define - to be removed eventually */
// #define ER_WARN_DATA_TRUNCATED WARN_DATA_TRUNCATED
// #define WARN_PLUGIN_DELETE_BUILTIN ER_PLUGIN_DELETE_BUILTIN
// #define ER_FK_DUP_NAME ER_DUP_CONSTRAINT_NAME
// #define ER_VIRTUAL_COLUMN_FUNCTION_IS_NOT_ALLOWED ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
// #define ER_PRIMARY_KEY_BASED_ON_VIRTUAL_COLUMN ER_PRIMARY_KEY_BASED_ON_GENERATED_COLUMN
// #define ER_WRONG_FK_OPTION_FOR_VIRTUAL_COLUMN ER_WRONG_FK_OPTION_FOR_GENERATED_COLUMN
// #define ER_UNSUPPORTED_ACTION_ON_VIRTUAL_COLUMN ER_UNSUPPORTED_ACTION_ON_GENERATED_COLUMN
// #define ER_UNSUPPORTED_ENGINE_FOR_VIRTUAL_COLUMNS ER_UNSUPPORTED_ENGINE_FOR_GENERATED_COLUMNS
// #define ER_KEY_COLUMN_DOES_NOT_EXITS ER_KEY_COLUMN_DOES_NOT_EXIST
// #define ER_DROP_PARTITION_NON_EXISTENT ER_PARTITION_DOES_NOT_EXIST
// Targeting mysql\MYSQL_ROWS.java

	/* offset to current row */

// #include "my_alloc.h"
// Targeting mysql\EMBEDDED_QUERY_RESULT.java


// Targeting mysql\MYSQL_DATA.java



public enum mysql_option {
  MYSQL_OPT_CONNECT_TIMEOUT(0), MYSQL_OPT_COMPRESS(1), MYSQL_OPT_NAMED_PIPE(2),
  MYSQL_INIT_COMMAND(3), MYSQL_READ_DEFAULT_FILE(4), MYSQL_READ_DEFAULT_GROUP(5),
  MYSQL_SET_CHARSET_DIR(6), MYSQL_SET_CHARSET_NAME(7), MYSQL_OPT_LOCAL_INFILE(8),
  MYSQL_OPT_PROTOCOL(9), MYSQL_SHARED_MEMORY_BASE_NAME(10), MYSQL_OPT_READ_TIMEOUT(11),
  MYSQL_OPT_WRITE_TIMEOUT(12), MYSQL_OPT_USE_RESULT(13),
  MYSQL_OPT_USE_REMOTE_CONNECTION(14), MYSQL_OPT_USE_EMBEDDED_CONNECTION(15),
  MYSQL_OPT_GUESS_CONNECTION(16), MYSQL_SET_CLIENT_IP(17), MYSQL_SECURE_AUTH(18),
  MYSQL_REPORT_DATA_TRUNCATION(19), MYSQL_OPT_RECONNECT(20),
  MYSQL_OPT_SSL_VERIFY_SERVER_CERT(21), MYSQL_PLUGIN_DIR(22), MYSQL_DEFAULT_AUTH(23),
  MYSQL_OPT_BIND(24),
  MYSQL_OPT_SSL_KEY(25), MYSQL_OPT_SSL_CERT(26), 
  MYSQL_OPT_SSL_CA(27), MYSQL_OPT_SSL_CAPATH(28), MYSQL_OPT_SSL_CIPHER(29),
  MYSQL_OPT_SSL_CRL(30), MYSQL_OPT_SSL_CRLPATH(31),
  MYSQL_OPT_CONNECT_ATTR_RESET(32), MYSQL_OPT_CONNECT_ATTR_ADD(33),
  MYSQL_OPT_CONNECT_ATTR_DELETE(34),
  MYSQL_SERVER_PUBLIC_KEY(35),
  MYSQL_ENABLE_CLEARTEXT_PLUGIN(36),
  MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS(37),

  /* MariaDB options */
  MYSQL_PROGRESS_CALLBACK(5999),
  MYSQL_OPT_NONBLOCK(6000),
  MYSQL_OPT_USE_THREAD_SPECIFIC_MEMORY(6001);

    public final int value;
    private mysql_option(int v) { this.value = v; }
    private mysql_option(mysql_option e) { this.value = e.value; }
    public mysql_option intern() { for (mysql_option e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
// Targeting mysql\st_mysql_options_extention.java


// Targeting mysql\st_mysql_options.java



public enum mysql_status {
  MYSQL_STATUS_READY(0), MYSQL_STATUS_GET_RESULT(1), MYSQL_STATUS_USE_RESULT(2),
  MYSQL_STATUS_STATEMENT_GET_RESULT(3);

    public final int value;
    private mysql_status(int v) { this.value = v; }
    private mysql_status(mysql_status e) { this.value = e.value; }
    public mysql_status intern() { for (mysql_status e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

public enum mysql_protocol_type {
  MYSQL_PROTOCOL_DEFAULT(0), MYSQL_PROTOCOL_TCP(1), MYSQL_PROTOCOL_SOCKET(2),
  MYSQL_PROTOCOL_PIPE(3), MYSQL_PROTOCOL_MEMORY(4);

    public final int value;
    private mysql_protocol_type(int v) { this.value = v; }
    private mysql_protocol_type(mysql_protocol_type e) { this.value = e.value; }
    public mysql_protocol_type intern() { for (mysql_protocol_type e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
// Targeting mysql\MY_CHARSET_INFO.java


// Targeting mysql\st_mysql_methods.java


// Targeting mysql\MYSQL.java


// Targeting mysql\MYSQL_RES.java




/*
  We should not define MYSQL_CLIENT when the mysql.h is included
  by the server or server plugins.
  Now it is important only for the SQL service to work so we rely on
  the MYSQL_SERVICE_SQL to check we're compiling the server/plugin
  related file.
*/

// #if !defined(MYSQL_SERVICE_SQL) && !defined(MYSQL_CLIENT)
// #define MYSQL_CLIENT
// Targeting mysql\MYSQL_PARAMETERS.java



/*
  Flag bits, the asynchronous methods return a combination of these ORed
  together to let the application know when to resume the suspended operation.
*/

/*
  Wait for data to be available on socket to read.
  mysql_get_socket_fd() will return socket descriptor.
*/
public static final int MYSQL_WAIT_READ = 1;
/* Wait for socket to be ready to write data. */
public static final int MYSQL_WAIT_WRITE =  2;
/* Wait for select() to mark exception on socket. */
public static final int MYSQL_WAIT_EXCEPT = 4;
/*
  Wait until timeout occurs. Value of timeout can be obtained from
  mysql_get_timeout_value().
*/
public static final int MYSQL_WAIT_TIMEOUT = 8;

// #if !defined(MYSQL_SERVICE_SQL)
// #define max_allowed_packet (*mysql_get_parameters()->p_max_allowed_packet)
// #define net_buffer_length (*mysql_get_parameters()->p_net_buffer_length)
// #endif

/*
  Set up and bring down the server; to ensure that applications will
  work when linked against either the standard client library or the
  embedded server library, these functions should be called.
*/
public static native int mysql_server_init(int argc, @Cast("char**") PointerPointer argv, @Cast("char**") PointerPointer groups);
public static native int mysql_server_init(int argc, @Cast("char**") @ByPtrPtr BytePointer argv, @Cast("char**") @ByPtrPtr BytePointer groups);
public static native int mysql_server_init(int argc, @Cast("char**") @ByPtrPtr ByteBuffer argv, @Cast("char**") @ByPtrPtr ByteBuffer groups);
public static native int mysql_server_init(int argc, @Cast("char**") @ByPtrPtr byte[] argv, @Cast("char**") @ByPtrPtr byte[] groups);
public static native void mysql_server_end();

/*
  mysql_server_init/end need to be called when using libmysqld or
  libmysqlclient (exactly, mysql_server_init() is called by mysql_init() so
  you don't need to call it explicitly; but you need to call
  mysql_server_end() to free memory). The names are a bit misleading
  (mysql_SERVER* to be used when using libmysqlCLIENT). So we add more general
  names which suit well whether you're using libmysqld or libmysqlclient. We
  intend to promote these aliases over the mysql_server* ones.
*/
// #define mysql_library_init mysql_server_init
// #define mysql_library_end mysql_server_end

public static native MYSQL_PARAMETERS mysql_get_parameters();

/*
  Set up and bring down a thread; these function should be called
  for each thread in an application which opens at least one MySQL
  connection.  All uses of the connection(s) should be between these
  function calls.
*/
public static native @Cast("char") byte mysql_thread_init();
public static native void mysql_thread_end();

/*
  Functions to get information from the MYSQL and MYSQL_RES structures
  Should definitely be used if one uses shared libraries.
*/

public static native long mysql_num_rows(MYSQL_RES res);
public static native @Cast("unsigned int") int mysql_num_fields(MYSQL_RES res);
public static native @Cast("char") byte mysql_eof(MYSQL_RES res);
public static native MYSQL_FIELD mysql_fetch_field_direct(MYSQL_RES res,
					      @Cast("unsigned int") int fieldnr);
public static native MYSQL_FIELD mysql_fetch_fields(MYSQL_RES res);
public static native @Cast("MYSQL_ROW_OFFSET") MYSQL_ROWS mysql_row_tell(MYSQL_RES res);
public static native @Cast("MYSQL_FIELD_OFFSET") int mysql_field_tell(MYSQL_RES res);




public static native int mariadb_field_attr(MARIADB_CONST_STRING attr,
                               @Const MYSQL_FIELD field,
                               mariadb_field_attr_t type);


public static native @Cast("unsigned int") int mysql_field_count(MYSQL mysql);
public static native long mysql_affected_rows(MYSQL mysql);
public static native long mysql_insert_id(MYSQL mysql);
public static native @Cast("unsigned int") int mysql_errno(MYSQL mysql);
public static native @Cast("const char*") BytePointer mysql_error(MYSQL mysql);
public static native @Cast("const char*") BytePointer mysql_sqlstate(MYSQL mysql);
public static native @Cast("unsigned int") int mysql_warning_count(MYSQL mysql);
public static native @Cast("const char*") BytePointer mysql_info(MYSQL mysql);
public static native @Cast("unsigned long") long mysql_thread_id(MYSQL mysql);
public static native @Cast("const char*") BytePointer mysql_character_set_name(MYSQL mysql);
public static native int mysql_set_character_set(MYSQL mysql, @Cast("const char*") BytePointer csname);
public static native int mysql_set_character_set(MYSQL mysql, String csname);



public static native MYSQL mysql_init(MYSQL mysql);
public static native @Cast("char") byte mysql_ssl_set(MYSQL mysql, @Cast("const char*") BytePointer key,
				      @Cast("const char*") BytePointer cert, @Cast("const char*") BytePointer ca,
				      @Cast("const char*") BytePointer capath, @Cast("const char*") BytePointer cipher);
public static native @Cast("char") byte mysql_ssl_set(MYSQL mysql, String key,
				      String cert, String ca,
				      String capath, String cipher);
public static native @Cast("const char*") BytePointer mysql_get_ssl_cipher(MYSQL mysql);
public static native @Cast("char") byte mysql_change_user(MYSQL mysql, @Cast("const char*") BytePointer user, 
					  @Cast("const char*") BytePointer passwd, @Cast("const char*") BytePointer db);
public static native @Cast("char") byte mysql_change_user(MYSQL mysql, String user, 
					  String passwd, String db);


public static native MYSQL mysql_real_connect(MYSQL mysql, @Cast("const char*") BytePointer host,
					   @Cast("const char*") BytePointer user,
					   @Cast("const char*") BytePointer passwd,
					   @Cast("const char*") BytePointer db,
					   @Cast("unsigned int") int port,
					   @Cast("const char*") BytePointer unix_socket,
					   @Cast("unsigned long") long clientflag);
public static native MYSQL mysql_real_connect(MYSQL mysql, String host,
					   String user,
					   String passwd,
					   String db,
					   @Cast("unsigned int") int port,
					   String unix_socket,
					   @Cast("unsigned long") long clientflag);


public static native int mysql_select_db(MYSQL mysql, @Cast("const char*") BytePointer db);
public static native int mysql_select_db(MYSQL mysql, String db);


public static native int mysql_query(MYSQL mysql, @Cast("const char*") BytePointer q);
public static native int mysql_query(MYSQL mysql, String q);


public static native int mysql_send_query(MYSQL mysql, @Cast("const char*") BytePointer q,
					 @Cast("unsigned long") long length);
public static native int mysql_send_query(MYSQL mysql, String q,
					 @Cast("unsigned long") long length);


public static native int mysql_real_query(MYSQL mysql, @Cast("const char*") BytePointer q,
					@Cast("unsigned long") long length);
public static native int mysql_real_query(MYSQL mysql, String q,
					@Cast("unsigned long") long length);


public static native MYSQL_RES mysql_store_result(MYSQL mysql);


public static native MYSQL_RES mysql_use_result(MYSQL mysql);

public static native void mysql_get_character_set_info(MYSQL mysql,
                           MY_CHARSET_INFO charset);

/* local infile support */

public static final int LOCAL_INFILE_ERROR_LEN = 512;
// Targeting mysql\Local_infile_init_PointerPointer_BytePointer_Pointer.java


// Targeting mysql\Local_infile_read_Pointer_BytePointer_int.java


// Targeting mysql\Local_infile_end_Pointer.java


// Targeting mysql\Local_infile_error_Pointer_BytePointer_int.java


public static native void mysql_set_local_infile_handler(MYSQL mysql,
                               Local_infile_init_PointerPointer_BytePointer_Pointer local_infile_init,
                               Local_infile_read_Pointer_BytePointer_int local_infile_read,
                               Local_infile_end_Pointer local_infile_end,
                               Local_infile_error_Pointer_BytePointer_int local_infile_error,
                               Pointer arg5);
// Targeting mysql\Local_infile_init_Pointer_BytePointer_Pointer.java


public static native void mysql_set_local_infile_handler(MYSQL mysql,
                               Local_infile_init_Pointer_BytePointer_Pointer local_infile_init,
                               Local_infile_read_Pointer_BytePointer_int local_infile_read,
                               Local_infile_end_Pointer local_infile_end,
                               Local_infile_error_Pointer_BytePointer_int local_infile_error,
                               Pointer arg5);
// Targeting mysql\Local_infile_init_Pointer_String_Pointer.java


// Targeting mysql\Local_infile_read_Pointer_ByteBuffer_int.java


// Targeting mysql\Local_infile_error_Pointer_ByteBuffer_int.java


public static native void mysql_set_local_infile_handler(MYSQL mysql,
                               Local_infile_init_Pointer_String_Pointer local_infile_init,
                               Local_infile_read_Pointer_ByteBuffer_int local_infile_read,
                               Local_infile_end_Pointer local_infile_end,
                               Local_infile_error_Pointer_ByteBuffer_int local_infile_error,
                               Pointer arg5);
// Targeting mysql\Local_infile_read_Pointer_byte___int.java


// Targeting mysql\Local_infile_error_Pointer_byte___int.java


public static native void mysql_set_local_infile_handler(MYSQL mysql,
                               Local_infile_init_Pointer_BytePointer_Pointer local_infile_init,
                               Local_infile_read_Pointer_byte___int local_infile_read,
                               Local_infile_end_Pointer local_infile_end,
                               Local_infile_error_Pointer_byte___int local_infile_error,
                               Pointer arg5);
public static native void mysql_set_local_infile_handler(MYSQL mysql,
                               Local_infile_init_Pointer_String_Pointer local_infile_init,
                               Local_infile_read_Pointer_BytePointer_int local_infile_read,
                               Local_infile_end_Pointer local_infile_end,
                               Local_infile_error_Pointer_BytePointer_int local_infile_error,
                               Pointer arg5);
public static native void mysql_set_local_infile_handler(MYSQL mysql,
                               Local_infile_init_Pointer_BytePointer_Pointer local_infile_init,
                               Local_infile_read_Pointer_ByteBuffer_int local_infile_read,
                               Local_infile_end_Pointer local_infile_end,
                               Local_infile_error_Pointer_ByteBuffer_int local_infile_error,
                               Pointer arg5);
public static native void mysql_set_local_infile_handler(MYSQL mysql,
                               Local_infile_init_Pointer_String_Pointer local_infile_init,
                               Local_infile_read_Pointer_byte___int local_infile_read,
                               Local_infile_end_Pointer local_infile_end,
                               Local_infile_error_Pointer_byte___int local_infile_error,
                               Pointer arg5);

public static native void mysql_set_local_infile_default(MYSQL mysql);

public static native int mysql_shutdown(MYSQL mysql,
                                       mysql_enum_shutdown_level shutdown_level);


public static native int mysql_dump_debug_info(MYSQL mysql);


public static native int mysql_refresh(MYSQL mysql,
				     @Cast("unsigned int") int refresh_options);


public static native int mysql_kill(MYSQL mysql,@Cast("unsigned long") long pid);


public static native int mysql_set_server_option(MYSQL mysql,
						enum_mysql_set_option option);


public static native int mysql_ping(MYSQL mysql);


public static native @Cast("const char*") BytePointer mysql_stat(MYSQL mysql);


public static native @Cast("const char*") BytePointer mysql_get_server_info(MYSQL mysql);

public static native @Cast("const char*") BytePointer mysql_get_client_info();
public static native @Cast("unsigned long") long mysql_get_client_version();
public static native @Cast("const char*") BytePointer mysql_get_host_info(MYSQL mysql);
public static native @Cast("unsigned long") long mysql_get_server_version(MYSQL mysql);
public static native @Cast("unsigned int") int mysql_get_proto_info(MYSQL mysql);
public static native MYSQL_RES mysql_list_dbs(MYSQL mysql,@Cast("const char*") BytePointer wild);
public static native MYSQL_RES mysql_list_dbs(MYSQL mysql,String wild);


public static native MYSQL_RES mysql_list_tables(MYSQL mysql,@Cast("const char*") BytePointer wild);
public static native MYSQL_RES mysql_list_tables(MYSQL mysql,String wild);


public static native MYSQL_RES mysql_list_processes(MYSQL mysql);


public static native int mysql_options(MYSQL mysql,mysql_option option,
				      @Const Pointer arg);
public static native int mysql_options4(MYSQL mysql,mysql_option option,
                                       @Const Pointer arg1, @Const Pointer arg2);
public static native void mysql_free_result(MYSQL_RES result);


public static native void mysql_data_seek(MYSQL_RES result,
					long offset);
public static native @Cast("MYSQL_ROW_OFFSET") MYSQL_ROWS mysql_row_seek(MYSQL_RES result,
						@Cast("MYSQL_ROW_OFFSET") MYSQL_ROWS offset);
public static native @Cast("MYSQL_FIELD_OFFSET") int mysql_field_seek(MYSQL_RES result,
					   @Cast("MYSQL_FIELD_OFFSET") int offset);
public static native @Cast("char**") PointerPointer mysql_fetch_row(MYSQL_RES result);


public static native @Cast("unsigned long*") CLongPointer mysql_fetch_lengths(MYSQL_RES result);
public static native MYSQL_FIELD mysql_fetch_field(MYSQL_RES result);
public static native MYSQL_RES mysql_list_fields(MYSQL mysql, @Cast("const char*") BytePointer table,
					  @Cast("const char*") BytePointer wild);
public static native MYSQL_RES mysql_list_fields(MYSQL mysql, String table,
					  String wild);


public static native @Cast("unsigned long") long mysql_escape_string(@Cast("char*") BytePointer to,@Cast("const char*") BytePointer from,
					    @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_escape_string(@Cast("char*") ByteBuffer to,String from,
					    @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_escape_string(@Cast("char*") byte[] to,@Cast("const char*") BytePointer from,
					    @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_escape_string(@Cast("char*") BytePointer to,String from,
					    @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_escape_string(@Cast("char*") ByteBuffer to,@Cast("const char*") BytePointer from,
					    @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_escape_string(@Cast("char*") byte[] to,String from,
					    @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_hex_string(@Cast("char*") BytePointer to,@Cast("const char*") BytePointer from,
                                         @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_hex_string(@Cast("char*") ByteBuffer to,String from,
                                         @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_hex_string(@Cast("char*") byte[] to,@Cast("const char*") BytePointer from,
                                         @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_hex_string(@Cast("char*") BytePointer to,String from,
                                         @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_hex_string(@Cast("char*") ByteBuffer to,@Cast("const char*") BytePointer from,
                                         @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_hex_string(@Cast("char*") byte[] to,String from,
                                         @Cast("unsigned long") long from_length);
public static native @Cast("unsigned long") long mysql_real_escape_string(MYSQL mysql,
					       @Cast("char*") BytePointer to,@Cast("const char*") BytePointer from,
					       @Cast("unsigned long") long length);
public static native @Cast("unsigned long") long mysql_real_escape_string(MYSQL mysql,
					       @Cast("char*") ByteBuffer to,String from,
					       @Cast("unsigned long") long length);
public static native @Cast("unsigned long") long mysql_real_escape_string(MYSQL mysql,
					       @Cast("char*") byte[] to,@Cast("const char*") BytePointer from,
					       @Cast("unsigned long") long length);
public static native @Cast("unsigned long") long mysql_real_escape_string(MYSQL mysql,
					       @Cast("char*") BytePointer to,String from,
					       @Cast("unsigned long") long length);
public static native @Cast("unsigned long") long mysql_real_escape_string(MYSQL mysql,
					       @Cast("char*") ByteBuffer to,@Cast("const char*") BytePointer from,
					       @Cast("unsigned long") long length);
public static native @Cast("unsigned long") long mysql_real_escape_string(MYSQL mysql,
					       @Cast("char*") byte[] to,String from,
					       @Cast("unsigned long") long length);
public static native void mysql_debug(@Cast("const char*") BytePointer debug);
public static native void mysql_debug(String debug);
public static native void myodbc_remove_escape(MYSQL mysql,@Cast("char*") BytePointer name);
public static native void myodbc_remove_escape(MYSQL mysql,@Cast("char*") ByteBuffer name);
public static native void myodbc_remove_escape(MYSQL mysql,@Cast("char*") byte[] name);
public static native @Cast("unsigned int") int mysql_thread_safe();
public static native @Cast("char") byte mysql_embedded();

public static native @Cast("char") byte mysql_read_query_result(MYSQL mysql);




/*
  The following definitions are added for the enhanced 
  client-server protocol
*/

/* statement state */
/** enum enum_mysql_stmt_state */
public static final int
  MYSQL_STMT_INIT_DONE = 1, MYSQL_STMT_PREPARE_DONE = 2, MYSQL_STMT_EXECUTE_DONE = 3,
  MYSQL_STMT_FETCH_DONE = 4;
// Targeting mysql\MYSQL_BIND.java


// Targeting mysql\st_mysql_stmt_extension.java


// Targeting mysql\MYSQL_STMT.java



/** enum enum_stmt_attr_type */
public static final int
  /*
    When doing mysql_stmt_store_result calculate max_length attribute
    of statement metadata. This is to be consistent with the old API, 
    where this was done automatically.
    In the new API we do that only by request because it slows down
    mysql_stmt_store_result sufficiently.
  */
  STMT_ATTR_UPDATE_MAX_LENGTH = 0,
  /*
    unsigned long with combination of cursor flags (read only, for update,
    etc)
  */
  STMT_ATTR_CURSOR_TYPE = 1,
  /*
    Amount of rows to retrieve from server per one fetch if using cursors.
    Accepts unsigned long attribute in the range 1 - ulong_max
  */
  STMT_ATTR_PREFETCH_ROWS = 2;

public static native MYSQL_STMT mysql_stmt_init(MYSQL mysql);
public static native int mysql_stmt_prepare(MYSQL_STMT stmt, @Cast("const char*") BytePointer query,
                               @Cast("unsigned long") long length);
public static native int mysql_stmt_prepare(MYSQL_STMT stmt, String query,
                               @Cast("unsigned long") long length);


public static native int mysql_stmt_execute(MYSQL_STMT stmt);


public static native int mysql_stmt_fetch(MYSQL_STMT stmt);


public static native int mysql_stmt_fetch_column(MYSQL_STMT stmt, MYSQL_BIND bind_arg, 
                                    @Cast("unsigned int") int column,
                                    @Cast("unsigned long") long offset);
public static native int mysql_stmt_store_result(MYSQL_STMT stmt);


public static native @Cast("unsigned long") long mysql_stmt_param_count(MYSQL_STMT stmt);
public static native @Cast("char") byte mysql_stmt_attr_set(MYSQL_STMT stmt,
                                    @Cast("enum_stmt_attr_type") int attr_type,
                                    @Const Pointer attr);
public static native @Cast("char") byte mysql_stmt_attr_get(MYSQL_STMT stmt,
                                    @Cast("enum_stmt_attr_type") int attr_type,
                                    Pointer attr);
public static native @Cast("char") byte mysql_stmt_bind_param(MYSQL_STMT stmt, MYSQL_BIND bnd);
public static native @Cast("char") byte mysql_stmt_bind_result(MYSQL_STMT stmt, MYSQL_BIND bnd);
public static native @Cast("char") byte mysql_stmt_close(MYSQL_STMT stmt);


public static native @Cast("char") byte mysql_stmt_reset(MYSQL_STMT stmt);


public static native @Cast("char") byte mysql_stmt_free_result(MYSQL_STMT stmt);


public static native @Cast("char") byte mysql_stmt_send_long_data(MYSQL_STMT stmt, 
                                          @Cast("unsigned int") int param_number,
                                          @Cast("const char*") BytePointer data, 
                                          @Cast("unsigned long") long length);
public static native @Cast("char") byte mysql_stmt_send_long_data(MYSQL_STMT stmt, 
                                          @Cast("unsigned int") int param_number,
                                          String data, 
                                          @Cast("unsigned long") long length);


public static native MYSQL_RES mysql_stmt_result_metadata(MYSQL_STMT stmt);
public static native MYSQL_RES mysql_stmt_param_metadata(MYSQL_STMT stmt);
public static native @Cast("unsigned int") int mysql_stmt_errno(MYSQL_STMT stmt);
public static native @Cast("const char*") BytePointer mysql_stmt_error(MYSQL_STMT stmt);
public static native @Cast("const char*") BytePointer mysql_stmt_sqlstate(MYSQL_STMT stmt);
public static native @Cast("MYSQL_ROW_OFFSET") MYSQL_ROWS mysql_stmt_row_seek(MYSQL_STMT stmt, 
                                             @Cast("MYSQL_ROW_OFFSET") MYSQL_ROWS offset);
public static native @Cast("MYSQL_ROW_OFFSET") MYSQL_ROWS mysql_stmt_row_tell(MYSQL_STMT stmt);
public static native void mysql_stmt_data_seek(MYSQL_STMT stmt, long offset);
public static native long mysql_stmt_num_rows(MYSQL_STMT stmt);
public static native long mysql_stmt_affected_rows(MYSQL_STMT stmt);
public static native long mysql_stmt_insert_id(MYSQL_STMT stmt);
public static native @Cast("unsigned int") int mysql_stmt_field_count(MYSQL_STMT stmt);

public static native @Cast("char") byte mysql_commit(MYSQL mysql);


public static native @Cast("char") byte mysql_rollback(MYSQL mysql);


public static native @Cast("char") byte mysql_autocommit(MYSQL mysql, @Cast("char") byte auto_mode);


public static native @Cast("char") byte mysql_more_results(MYSQL mysql);
public static native int mysql_next_result(MYSQL mysql);


public static native int mysql_stmt_next_result(MYSQL_STMT stmt);



public static native void mysql_close(MYSQL sock);





/********************************************************************
  mysql_net_ functions - low-level API to MySQL protocol
*********************************************************************/
public static native @Cast("unsigned long") long mysql_net_read_packet(MYSQL mysql);
public static native @Cast("unsigned long") long mysql_net_field_length(@Cast("unsigned char**") PointerPointer packet);
public static native @Cast("unsigned long") long mysql_net_field_length(@Cast("unsigned char**") @ByPtrPtr BytePointer packet);
public static native @Cast("unsigned long") long mysql_net_field_length(@Cast("unsigned char**") @ByPtrPtr ByteBuffer packet);
public static native @Cast("unsigned long") long mysql_net_field_length(@Cast("unsigned char**") @ByPtrPtr byte[] packet);

/* status return codes */
public static final int MYSQL_NO_DATA =        100;
public static final int MYSQL_DATA_TRUNCATED = 101;

// #define mysql_reload(mysql) mysql_refresh((mysql),REFRESH_GRANT)

// #ifdef USE_OLD_FUNCTIONS



// #endif
// #define HAVE_MYSQL_REAL_CONNECT

// #ifdef	__cplusplus
// #endif

// #endif /* _mysql_h */


}
