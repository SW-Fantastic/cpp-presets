// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.mariadb.core.mysql;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.mariadb.core.global.*;
import static org.swdc.mariadb.core.MyGlobal.*;
import org.swdc.mariadb.core.com.*;
import static org.swdc.mariadb.core.MyCom.*;

import static org.swdc.mariadb.core.MariaDB.*;



@Properties(inherit = org.swdc.mariadb.conf.MariaDBConfigure.class)
public class MYSQL_FIELD extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MYSQL_FIELD() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MYSQL_FIELD(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MYSQL_FIELD(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MYSQL_FIELD position(long position) {
        return (MYSQL_FIELD)super.position(position);
    }
    @Override public MYSQL_FIELD getPointer(long i) {
        return new MYSQL_FIELD((Pointer)this).offsetAddress(i);
    }

  public native @Cast("char*") BytePointer name(); public native MYSQL_FIELD name(BytePointer setter);                 /* Name of column */
  public native @Cast("char*") BytePointer org_name(); public native MYSQL_FIELD org_name(BytePointer setter);             /* Original column name, if an alias */
  public native @Cast("char*") BytePointer table(); public native MYSQL_FIELD table(BytePointer setter);                /* Table of column if column was a field */
  public native @Cast("char*") BytePointer org_table(); public native MYSQL_FIELD org_table(BytePointer setter);            /* Org table name, if table was an alias */
  public native @Cast("char*") BytePointer db(); public native MYSQL_FIELD db(BytePointer setter);                   /* Database for table */
  public native @Cast("char*") BytePointer catalog(); public native MYSQL_FIELD catalog(BytePointer setter);	      /* Catalog for table */
  public native @Cast("char*") BytePointer def(); public native MYSQL_FIELD def(BytePointer setter);                  /* Default value (set by mysql_list_fields) */
  public native @Cast("unsigned long") long length(); public native MYSQL_FIELD length(long setter);       /* Width of column (create length) */
  public native @Cast("unsigned long") long max_length(); public native MYSQL_FIELD max_length(long setter);   /* Max width for selected set */
  public native @Cast("unsigned int") int name_length(); public native MYSQL_FIELD name_length(int setter);
  public native @Cast("unsigned int") int org_name_length(); public native MYSQL_FIELD org_name_length(int setter);
  public native @Cast("unsigned int") int table_length(); public native MYSQL_FIELD table_length(int setter);
  public native @Cast("unsigned int") int org_table_length(); public native MYSQL_FIELD org_table_length(int setter);
  public native @Cast("unsigned int") int db_length(); public native MYSQL_FIELD db_length(int setter);
  public native @Cast("unsigned int") int catalog_length(); public native MYSQL_FIELD catalog_length(int setter);
  public native @Cast("unsigned int") int def_length(); public native MYSQL_FIELD def_length(int setter);
  public native @Cast("unsigned int") int flags(); public native MYSQL_FIELD flags(int setter);         /* Div flags */
  public native @Cast("unsigned int") int decimals(); public native MYSQL_FIELD decimals(int setter);      /* Number of decimals in field */
  public native @Cast("unsigned int") int charsetnr(); public native MYSQL_FIELD charsetnr(int setter);     /* Character set */
  public native enum_field_types type(); public native MYSQL_FIELD type(enum_field_types setter); /* Type of field. See mysql_com.h for types */
  public native Pointer extension(); public native MYSQL_FIELD extension(Pointer setter);
}
