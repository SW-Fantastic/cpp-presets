// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.mariadb.core.mysql;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.mariadb.core.global.*;
import static org.swdc.mariadb.core.MyGlobal.*;
import org.swdc.mariadb.core.com.*;
import static org.swdc.mariadb.core.MyCom.*;

import static org.swdc.mariadb.core.MariaDB.*;



/*
  This structure is used to define bind information, and
  internally by the client library.
  Public members with their descriptions are listed below
  (conventionally `On input' refers to the binds given to
  mysql_stmt_bind_param, `On output' refers to the binds given
  to mysql_stmt_bind_result):

  buffer_type    - One of the MYSQL_* types, used to describe
                   the host language type of buffer.
                   On output: if column type is different from
                   buffer_type, column value is automatically converted
                   to buffer_type before it is stored in the buffer.
  buffer         - On input: points to the buffer with input data.
                   On output: points to the buffer capable to store
                   output data.
                   The type of memory pointed by buffer must correspond
                   to buffer_type. See the correspondence table in
                   the comment to mysql_stmt_bind_param.

  The two above members are mandatory for any kind of bind.

  buffer_length  - the length of the buffer. You don't have to set
                   it for any fixed length buffer: float, double,
                   int, etc. It must be set however for variable-length
                   types, such as BLOBs or STRINGs.

  length         - On input: in case when lengths of input values
                   are different for each execute, you can set this to
                   point at a variable containing value length. This
                   way the value length can be different in each execute.
                   If length is not NULL, buffer_length is not used.
                   Note, length can even point at buffer_length if
                   you keep bind structures around while fetching:
                   this way you can change buffer_length before
                   each execution, everything will work ok.
                   On output: if length is set, mysql_stmt_fetch will
                   write column length into it.

  is_null        - On input: points to a boolean variable that should
                   be set to TRUE for NULL values.
                   This member is useful only if your data may be
                   NULL in some but not all cases.
                   If your data is never NULL, is_null should be set to 0.
                   If your data is always NULL, set buffer_type
                   to MYSQL_TYPE_NULL, and is_null will not be used.

  is_unsigned    - On input: used to signify that values provided for one
                   of numeric types are unsigned.
                   On output describes signedness of the output buffer.
                   If, taking into account is_unsigned flag, column data
                   is out of range of the output buffer, data for this column
                   is regarded truncated. Note that this has no correspondence
                   to the sign of result set column, if you need to find it out
                   use mysql_stmt_result_metadata.
  error          - where to write a truncation error if it is present.
                   possible error value is:
                   0  no truncation
                   1  value is out of range or buffer is too small

  Please note that MYSQL_BIND also has internals members.
*/

@Properties(inherit = org.swdc.mariadb.conf.MariaDBConfigure.class)
public class MYSQL_BIND extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MYSQL_BIND() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MYSQL_BIND(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MYSQL_BIND(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MYSQL_BIND position(long position) {
        return (MYSQL_BIND)super.position(position);
    }
    @Override public MYSQL_BIND getPointer(long i) {
        return new MYSQL_BIND((Pointer)this).offsetAddress(i);
    }

  public native @Cast("unsigned long*") CLongPointer length(); public native MYSQL_BIND length(CLongPointer setter);          /* output length pointer */
  public native @Cast("char*") BytePointer is_null(); public native MYSQL_BIND is_null(BytePointer setter);	  /* Pointer to null indicator */
  public native Pointer buffer(); public native MYSQL_BIND buffer(Pointer setter);	  /* buffer to get/put data */
  /* set this if you want to track data truncations happened during fetch */
  public native @Cast("char*") BytePointer error(); public native MYSQL_BIND error(BytePointer setter);
  public native @Cast("unsigned char*") BytePointer row_ptr(); public native MYSQL_BIND row_ptr(BytePointer setter);         /* for the current data position */
  public static class Store_param_func_NET_MYSQL_BIND extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Store_param_func_NET_MYSQL_BIND(Pointer p) { super(p); }
      protected Store_param_func_NET_MYSQL_BIND() { allocate(); }
      private native void allocate();
      public native void call(NET net, MYSQL_BIND param);
  }
  public native Store_param_func_NET_MYSQL_BIND store_param_func(); public native MYSQL_BIND store_param_func(Store_param_func_NET_MYSQL_BIND setter);
  public static class Fetch_result_MYSQL_BIND_MYSQL_FIELD_PointerPointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Fetch_result_MYSQL_BIND_MYSQL_FIELD_PointerPointer(Pointer p) { super(p); }
      protected Fetch_result_MYSQL_BIND_MYSQL_FIELD_PointerPointer() { allocate(); }
      private native void allocate();
      public native void call(MYSQL_BIND arg0, MYSQL_FIELD arg1,
                         @Cast("unsigned char**") PointerPointer row);
  }
  public native Fetch_result_MYSQL_BIND_MYSQL_FIELD_PointerPointer fetch_result(); public native MYSQL_BIND fetch_result(Fetch_result_MYSQL_BIND_MYSQL_FIELD_PointerPointer setter);
  public static class Skip_result_MYSQL_BIND_MYSQL_FIELD_PointerPointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Skip_result_MYSQL_BIND_MYSQL_FIELD_PointerPointer(Pointer p) { super(p); }
      protected Skip_result_MYSQL_BIND_MYSQL_FIELD_PointerPointer() { allocate(); }
      private native void allocate();
      public native void call(MYSQL_BIND arg0, MYSQL_FIELD arg1,
  		      @Cast("unsigned char**") PointerPointer row);
  }
  public native Skip_result_MYSQL_BIND_MYSQL_FIELD_PointerPointer skip_result(); public native MYSQL_BIND skip_result(Skip_result_MYSQL_BIND_MYSQL_FIELD_PointerPointer setter);
  /* output buffer length, must be set when fetching str/binary */
  public native @Cast("unsigned long") long buffer_length(); public native MYSQL_BIND buffer_length(long setter);
  public native @Cast("unsigned long") long offset(); public native MYSQL_BIND offset(long setter);           /* offset position for char/binary fetch */
  public native @Cast("unsigned long") long length_value(); public native MYSQL_BIND length_value(long setter);     /* Used if length is 0 */
  public native @Cast("unsigned int") int param_number(); public native MYSQL_BIND param_number(int setter);	  /* For null count and error messages */
  public native @Cast("unsigned int") int pack_length(); public native MYSQL_BIND pack_length(int setter);	  /* Internal length for packed data */
  public native enum_field_types buffer_type(); public native MYSQL_BIND buffer_type(enum_field_types setter);	/* buffer type */
  public native @Cast("char") byte error_value(); public native MYSQL_BIND error_value(byte setter);      /* used if error is 0 */
  public native @Cast("char") byte is_unsigned(); public native MYSQL_BIND is_unsigned(byte setter);      /* set if integer type is unsigned */
  public native @Cast("char") byte long_data_used(); public native MYSQL_BIND long_data_used(byte setter);	  /* If used with mysql_send_long_data */
  public native @Cast("char") byte is_null_value(); public native MYSQL_BIND is_null_value(byte setter);    /* Used if is_null is 0 */
  public native Pointer extension(); public native MYSQL_BIND extension(Pointer setter);
}
