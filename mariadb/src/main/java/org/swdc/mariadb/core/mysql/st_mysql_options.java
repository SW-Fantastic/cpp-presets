// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.swdc.mariadb.core.mysql;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.swdc.mariadb.core.global.*;
import static org.swdc.mariadb.core.MyGlobal.*;
import org.swdc.mariadb.core.com.*;
import static org.swdc.mariadb.core.MyCom.*;

import static org.swdc.mariadb.core.MariaDB.*;
 

@Properties(inherit = org.swdc.mariadb.conf.MariaDBConfigure.class)
public class st_mysql_options extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public st_mysql_options() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public st_mysql_options(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public st_mysql_options(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public st_mysql_options position(long position) {
        return (st_mysql_options)super.position(position);
    }
    @Override public st_mysql_options getPointer(long i) {
        return new st_mysql_options((Pointer)this).offsetAddress(i);
    }

  public native @Cast("unsigned int") int connect_timeout(); public native st_mysql_options connect_timeout(int setter);
  public native @Cast("unsigned int") int read_timeout(); public native st_mysql_options read_timeout(int setter);
  public native @Cast("unsigned int") int write_timeout(); public native st_mysql_options write_timeout(int setter);
  public native @Cast("unsigned int") int port(); public native st_mysql_options port(int setter);
  public native @Cast("unsigned int") int protocol(); public native st_mysql_options protocol(int setter);
  public native @Cast("unsigned long") long client_flag(); public native st_mysql_options client_flag(long setter);
  public native @Cast("char*") BytePointer host(); public native st_mysql_options host(BytePointer setter);
  public native @Cast("char*") BytePointer user(); public native st_mysql_options user(BytePointer setter);
  public native @Cast("char*") BytePointer password(); public native st_mysql_options password(BytePointer setter);
  public native @Cast("char*") BytePointer unix_socket(); public native st_mysql_options unix_socket(BytePointer setter);
  public native @Cast("char*") BytePointer db(); public native st_mysql_options db(BytePointer setter);
  public native @Cast("char*") BytePointer my_cnf_file(); public native st_mysql_options my_cnf_file(BytePointer setter);
  public native @Cast("char*") BytePointer my_cnf_group(); public native st_mysql_options my_cnf_group(BytePointer setter);
  public native @Cast("char*") BytePointer charset_dir(); public native st_mysql_options charset_dir(BytePointer setter);
  public native @Cast("char*") BytePointer charset_name(); public native st_mysql_options charset_name(BytePointer setter);
  public native @Cast("char*") BytePointer ssl_key(); public native st_mysql_options ssl_key(BytePointer setter);				/* PEM key file */
  public native @Cast("char*") BytePointer ssl_cert(); public native st_mysql_options ssl_cert(BytePointer setter);				/* PEM cert file */
  public native @Cast("char*") BytePointer ssl_ca(); public native st_mysql_options ssl_ca(BytePointer setter);					/* PEM CA file */
  public native @Cast("char*") BytePointer ssl_capath(); public native st_mysql_options ssl_capath(BytePointer setter);				/* PEM directory of CA-s? */
  public native @Cast("char*") BytePointer ssl_cipher(); public native st_mysql_options ssl_cipher(BytePointer setter);				/* cipher to use */
  public native @Cast("char*") BytePointer shared_memory_base_name(); public native st_mysql_options shared_memory_base_name(BytePointer setter);
  public native @Cast("char") byte use_ssl(); public native st_mysql_options use_ssl(byte setter);				/* if to use SSL or not */
  public native @Cast("char") byte compress(); public native st_mysql_options compress(byte setter);
  public native @Cast("char") byte named_pipe(); public native st_mysql_options named_pipe(byte setter);
  public native @Cast("char") byte use_thread_specific_memory(); public native st_mysql_options use_thread_specific_memory(byte setter);
  public native @Cast("char") byte unused2(); public native st_mysql_options unused2(byte setter);
  public native @Cast("char") byte unused3(); public native st_mysql_options unused3(byte setter);
  public native @Cast("char") byte unused4(); public native st_mysql_options unused4(byte setter);
  public native mysql_option methods_to_use(); public native st_mysql_options methods_to_use(mysql_option setter);
  public native @Cast("char*") BytePointer client_ip(); public native st_mysql_options client_ip(BytePointer setter);
  /* Refuse client connecting to server if it uses old (pre-4.1.1) protocol */
  public native @Cast("char") byte secure_auth(); public native st_mysql_options secure_auth(byte setter);
  /* 0 - never report, 1 - always report (default) */
  public native @Cast("char") byte report_data_truncation(); public native st_mysql_options report_data_truncation(byte setter);

  /* function pointers for local infile support */
  public static class Local_infile_init_PointerPointer_BytePointer_Pointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Local_infile_init_PointerPointer_BytePointer_Pointer(Pointer p) { super(p); }
      protected Local_infile_init_PointerPointer_BytePointer_Pointer() { allocate(); }
      private native void allocate();
      public native int call(@Cast("void**") PointerPointer arg0, @Cast("const char*") BytePointer arg1, Pointer arg2);
  }
  public native Local_infile_init_PointerPointer_BytePointer_Pointer local_infile_init(); public native st_mysql_options local_infile_init(Local_infile_init_PointerPointer_BytePointer_Pointer setter);
  public static class Local_infile_read_Pointer_BytePointer_int extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Local_infile_read_Pointer_BytePointer_int(Pointer p) { super(p); }
      protected Local_infile_read_Pointer_BytePointer_int() { allocate(); }
      private native void allocate();
      public native int call(Pointer arg0, @Cast("char*") BytePointer arg1, @Cast("unsigned int") int arg2);
  }
  public native Local_infile_read_Pointer_BytePointer_int local_infile_read(); public native st_mysql_options local_infile_read(Local_infile_read_Pointer_BytePointer_int setter);
  public static class Local_infile_end_Pointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Local_infile_end_Pointer(Pointer p) { super(p); }
      protected Local_infile_end_Pointer() { allocate(); }
      private native void allocate();
      public native void call(Pointer arg0);
  }
  public native Local_infile_end_Pointer local_infile_end(); public native st_mysql_options local_infile_end(Local_infile_end_Pointer setter);
  public static class Local_infile_error_Pointer_BytePointer_int extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Local_infile_error_Pointer_BytePointer_int(Pointer p) { super(p); }
      protected Local_infile_error_Pointer_BytePointer_int() { allocate(); }
      private native void allocate();
      public native int call(Pointer arg0, @Cast("char*") BytePointer arg1, @Cast("unsigned int") int arg2);
  }
  public native Local_infile_error_Pointer_BytePointer_int local_infile_error(); public native st_mysql_options local_infile_error(Local_infile_error_Pointer_BytePointer_int setter);
  public native Pointer local_infile_userdata(); public native st_mysql_options local_infile_userdata(Pointer setter);
  public native st_mysql_options_extention extension(); public native st_mysql_options extension(st_mysql_options_extention setter);
}
